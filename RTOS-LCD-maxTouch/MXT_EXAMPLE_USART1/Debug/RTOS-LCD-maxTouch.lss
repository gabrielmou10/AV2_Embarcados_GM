
RTOS-LCD-maxTouch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000124a8  00400000  00400000  00010000  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004124a8  004124a8  000224a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009c8  20400000  004124b0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000be58  204009c8  00412e78  000309c8  2**2
                  ALLOC
  4 .stack        00002000  2040c820  0041ecd0  000309c8  2**0
                  ALLOC
  5 .heap         00000200  2040e820  00420cd0  000309c8  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  000309c8  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  000309f6  2**0
                  CONTENTS, READONLY
  8 .debug_info   00026b7d  00000000  00000000  00030a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000051c5  00000000  00000000  000575cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000d0a5  00000000  00000000  0005c791  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000011e0  00000000  00000000  00069836  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001450  00000000  00000000  0006aa16  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025812  00000000  00000000  0006be66  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00014ff9  00000000  00000000  00091678  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0009d4d8  00000000  00000000  000a6671  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000398c  00000000  00000000  00143b4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	20 e8 40 20 0d 1b 40 00 0b 1b 40 00 0b 1b 40 00      .@ ..@...@...@.
  400010:	0b 1b 40 00 0b 1b 40 00 0b 1b 40 00 00 00 00 00     ..@...@...@.....
	...
  40002c:	e5 1e 40 00 0b 1b 40 00 00 00 00 00 85 1f 40 00     ..@...@.......@.
  40003c:	ed 1f 40 00 0b 1b 40 00 0b 1b 40 00 0b 1b 40 00     ..@...@...@...@.
  40004c:	0b 1b 40 00 0b 1b 40 00 0b 1b 40 00 0b 1b 40 00     ..@...@...@...@.
  40005c:	0b 1b 40 00 0b 1b 40 00 00 00 00 00 85 14 40 00     ..@...@.......@.
  40006c:	99 14 40 00 ad 14 40 00 0b 1b 40 00 0b 1b 40 00     ..@...@...@...@.
  40007c:	0b 1b 40 00 c1 14 40 00 d5 14 40 00 0b 1b 40 00     ..@...@...@...@.
  40008c:	0b 1b 40 00 0b 1b 40 00 0b 1b 40 00 0b 1b 40 00     ..@...@...@...@.
  40009c:	0b 1b 40 00 0b 1b 40 00 0b 1b 40 00 0b 1b 40 00     ..@...@...@...@.
  4000ac:	0b 1b 40 00 0b 1b 40 00 0b 1b 40 00 0b 1b 40 00     ..@...@...@...@.
  4000bc:	0b 1b 40 00 0b 1b 40 00 0b 1b 40 00 0b 1b 40 00     ..@...@...@...@.
  4000cc:	0b 1b 40 00 0b 1b 40 00 0b 1b 40 00 0b 1b 40 00     ..@...@...@...@.
  4000dc:	0b 1b 40 00 0b 1b 40 00 0b 1b 40 00 0b 1b 40 00     ..@...@...@...@.
  4000ec:	0b 1b 40 00 0b 1b 40 00 0b 1b 40 00 0b 1b 40 00     ..@...@...@...@.
  4000fc:	0b 1b 40 00 0b 1b 40 00 0b 1b 40 00 0b 1b 40 00     ..@...@...@...@.
  40010c:	0b 1b 40 00 0b 1b 40 00 00 00 00 00 00 00 00 00     ..@...@.........
  40011c:	00 00 00 00 0b 1b 40 00 0b 1b 40 00 0b 1b 40 00     ......@...@...@.
  40012c:	0b 1b 40 00 0b 1b 40 00 0b 1b 40 00 0b 1b 40 00     ..@...@...@...@.
  40013c:	0b 1b 40 00 0b 1b 40 00 0b 1b 40 00 0b 1b 40 00     ..@...@...@...@.
  40014c:	0b 1b 40 00 0b 1b 40 00 0b 1b 40 00 0b 1b 40 00     ..@...@...@...@.
  40015c:	0b 1b 40 00 0b 1b 40 00 0b 1b 40 00                 ..@...@...@.

00400168 <__do_global_dtors_aux>:
  400168:	b510      	push	{r4, lr}
  40016a:	4c05      	ldr	r4, [pc, #20]	; (400180 <__do_global_dtors_aux+0x18>)
  40016c:	7823      	ldrb	r3, [r4, #0]
  40016e:	b933      	cbnz	r3, 40017e <__do_global_dtors_aux+0x16>
  400170:	4b04      	ldr	r3, [pc, #16]	; (400184 <__do_global_dtors_aux+0x1c>)
  400172:	b113      	cbz	r3, 40017a <__do_global_dtors_aux+0x12>
  400174:	4804      	ldr	r0, [pc, #16]	; (400188 <__do_global_dtors_aux+0x20>)
  400176:	f3af 8000 	nop.w
  40017a:	2301      	movs	r3, #1
  40017c:	7023      	strb	r3, [r4, #0]
  40017e:	bd10      	pop	{r4, pc}
  400180:	204009c8 	.word	0x204009c8
  400184:	00000000 	.word	0x00000000
  400188:	004124b0 	.word	0x004124b0

0040018c <frame_dummy>:
  40018c:	4b0c      	ldr	r3, [pc, #48]	; (4001c0 <frame_dummy+0x34>)
  40018e:	b143      	cbz	r3, 4001a2 <frame_dummy+0x16>
  400190:	480c      	ldr	r0, [pc, #48]	; (4001c4 <frame_dummy+0x38>)
  400192:	490d      	ldr	r1, [pc, #52]	; (4001c8 <frame_dummy+0x3c>)
  400194:	b510      	push	{r4, lr}
  400196:	f3af 8000 	nop.w
  40019a:	480c      	ldr	r0, [pc, #48]	; (4001cc <frame_dummy+0x40>)
  40019c:	6803      	ldr	r3, [r0, #0]
  40019e:	b923      	cbnz	r3, 4001aa <frame_dummy+0x1e>
  4001a0:	bd10      	pop	{r4, pc}
  4001a2:	480a      	ldr	r0, [pc, #40]	; (4001cc <frame_dummy+0x40>)
  4001a4:	6803      	ldr	r3, [r0, #0]
  4001a6:	b933      	cbnz	r3, 4001b6 <frame_dummy+0x2a>
  4001a8:	4770      	bx	lr
  4001aa:	4b09      	ldr	r3, [pc, #36]	; (4001d0 <frame_dummy+0x44>)
  4001ac:	2b00      	cmp	r3, #0
  4001ae:	d0f7      	beq.n	4001a0 <frame_dummy+0x14>
  4001b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  4001b4:	4718      	bx	r3
  4001b6:	4b06      	ldr	r3, [pc, #24]	; (4001d0 <frame_dummy+0x44>)
  4001b8:	2b00      	cmp	r3, #0
  4001ba:	d0f5      	beq.n	4001a8 <frame_dummy+0x1c>
  4001bc:	4718      	bx	r3
  4001be:	bf00      	nop
  4001c0:	00000000 	.word	0x00000000
  4001c4:	004124b0 	.word	0x004124b0
  4001c8:	204009cc 	.word	0x204009cc
  4001cc:	004124b0 	.word	0x004124b0
  4001d0:	00000000 	.word	0x00000000

004001d4 <mxt_init_device>:
 * \param chgpin IOPORT pin instance attached to the maXTouch device's /CHG pin
 * \return Operation result status code
 */
status_code_t mxt_init_device(struct mxt_device *device,
		twihs_master_t interface, uint8_t chip_adr, uint32_t chgpin)
{
  4001d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  4001d6:	b087      	sub	sp, #28
  4001d8:	4604      	mov	r4, r0
  4001da:	460e      	mov	r6, r1
  4001dc:	4617      	mov	r7, r2
	int8_t status;

	/* Set TWI interface, TWI address and CHG-pin of the maXTouch device. */
	device->interface = interface;
  4001de:	6081      	str	r1, [r0, #8]
	device->mxt_chip_adr = chip_adr;
  4001e0:	7302      	strb	r2, [r0, #12]
	device->chgpin = chgpin;
  4001e2:	6183      	str	r3, [r0, #24]
	device->handler = NULL;
  4001e4:	2500      	movs	r5, #0
  4001e6:	6105      	str	r5, [r0, #16]
			malloc(sizeof(struct mxt_info_object));
  4001e8:	2007      	movs	r0, #7
  4001ea:	4b9d      	ldr	r3, [pc, #628]	; (400460 <mxt_init_device+0x28c>)
  4001ec:	4798      	blx	r3
	device->info_object = (struct mxt_info_object *)
  4001ee:	6020      	str	r0, [r4, #0]
	twihs_package_t packet = {
  4001f0:	9501      	str	r5, [sp, #4]
  4001f2:	9505      	str	r5, [sp, #20]
  4001f4:	2302      	movs	r3, #2
  4001f6:	9302      	str	r3, [sp, #8]
  4001f8:	9003      	str	r0, [sp, #12]
  4001fa:	2307      	movs	r3, #7
  4001fc:	9304      	str	r3, [sp, #16]
  4001fe:	f88d 7014 	strb.w	r7, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  400202:	a901      	add	r1, sp, #4
  400204:	4630      	mov	r0, r6
  400206:	4b97      	ldr	r3, [pc, #604]	; (400464 <mxt_init_device+0x290>)
  400208:	4798      	blx	r3
  40020a:	1b40      	subs	r0, r0, r5
  40020c:	bf18      	it	ne
  40020e:	2001      	movne	r0, #1
  400210:	4240      	negs	r0, r0
	if ((status = mxt_read_id_block(device)) != STATUS_OK) {
  400212:	b108      	cbz	r0, 400218 <mxt_init_device+0x44>
	}

	device->multitouch_report_offset = status;

	return STATUS_OK;
}
  400214:	b007      	add	sp, #28
  400216:	bdf0      	pop	{r4, r5, r6, r7, pc}
			malloc(device->info_object->obj_count *
  400218:	6825      	ldr	r5, [r4, #0]
  40021a:	79a8      	ldrb	r0, [r5, #6]
  40021c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
  400220:	0040      	lsls	r0, r0, #1
  400222:	4b8f      	ldr	r3, [pc, #572]	; (400460 <mxt_init_device+0x28c>)
  400224:	4798      	blx	r3
	device->object_list = (struct mxt_object *)
  400226:	6060      	str	r0, [r4, #4]
	twihs_package_t packet = {
  400228:	2300      	movs	r3, #0
  40022a:	9301      	str	r3, [sp, #4]
  40022c:	9304      	str	r3, [sp, #16]
  40022e:	9305      	str	r3, [sp, #20]
  400230:	2307      	movs	r3, #7
  400232:	f88d 3004 	strb.w	r3, [sp, #4]
  400236:	2302      	movs	r3, #2
  400238:	9302      	str	r3, [sp, #8]
  40023a:	9003      	str	r0, [sp, #12]
		.length       = device->info_object->obj_count *
  40023c:	79ab      	ldrb	r3, [r5, #6]
  40023e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400242:	005b      	lsls	r3, r3, #1
	twihs_package_t packet = {
  400244:	9304      	str	r3, [sp, #16]
  400246:	7b23      	ldrb	r3, [r4, #12]
  400248:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40024c:	a901      	add	r1, sp, #4
  40024e:	68a0      	ldr	r0, [r4, #8]
  400250:	4b84      	ldr	r3, [pc, #528]	; (400464 <mxt_init_device+0x290>)
  400252:	4798      	blx	r3
  400254:	3000      	adds	r0, #0
  400256:	bf18      	it	ne
  400258:	2001      	movne	r0, #1
  40025a:	4240      	negs	r0, r0
	if (status != STATUS_OK) {
  40025c:	2800      	cmp	r0, #0
  40025e:	d1d9      	bne.n	400214 <mxt_init_device+0x40>
	uint8_t *id_pointer = (uint8_t *)device->info_object;
  400260:	6827      	ldr	r7, [r4, #0]
	uint8_t *objects_pointer = (uint8_t *)device->object_list;
  400262:	6860      	ldr	r0, [r4, #4]
			(device->info_object->obj_count *
  400264:	79bb      	ldrb	r3, [r7, #6]
  400266:	eb03 0643 	add.w	r6, r3, r3, lsl #1
  40026a:	0076      	lsls	r6, r6, #1
	crc_area_size = MXT_ID_BLOCK_SIZE +
  40026c:	3607      	adds	r6, #7
  40026e:	b2b6      	uxth	r6, r6
  400270:	463a      	mov	r2, r7
  400272:	3706      	adds	r7, #6
	uint32_t crc_tmp = 0;
  400274:	2100      	movs	r1, #0
		result ^= crcpoly;
  400276:	f8df c1f0 	ldr.w	ip, [pc, #496]	; 400468 <mxt_init_device+0x294>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  40027a:	f892 e001 	ldrb.w	lr, [r2, #1]
  40027e:	7815      	ldrb	r5, [r2, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  400280:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
  400284:	ea85 0141 	eor.w	r1, r5, r1, lsl #1
	if (result & 0x1000000) {
  400288:	f011 7f80 	tst.w	r1, #16777216	; 0x1000000
		result ^= crcpoly;
  40028c:	bf18      	it	ne
  40028e:	ea81 010c 	eorne.w	r1, r1, ip
  400292:	3202      	adds	r2, #2
	for (i = 0; i < MXT_ID_BLOCK_SIZE - 1; i += 2) {
  400294:	42ba      	cmp	r2, r7
  400296:	d1f0      	bne.n	40027a <mxt_init_device+0xa6>
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  400298:	7802      	ldrb	r2, [r0, #0]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  40029a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  40029e:	ea83 0241 	eor.w	r2, r3, r1, lsl #1
	if (result & 0x1000000) {
  4002a2:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4002a6:	d003      	beq.n	4002b0 <mxt_init_device+0xdc>
		result ^= crcpoly;
  4002a8:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4002ac:	f082 021b 	eor.w	r2, r2, #27
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4002b0:	f1a6 0708 	sub.w	r7, r6, #8
  4002b4:	2f01      	cmp	r7, #1
  4002b6:	dd12      	ble.n	4002de <mxt_init_device+0x10a>
  4002b8:	2301      	movs	r3, #1
		result ^= crcpoly;
  4002ba:	f8df e1ac 	ldr.w	lr, [pc, #428]	; 400468 <mxt_init_device+0x294>
		crc_tmp = mxt_crc_24(crc_tmp, objects_pointer[i],
  4002be:	18c1      	adds	r1, r0, r3
	data_word = (uint16_t)((uint16_t)(byte2 << 8u) | byte1);
  4002c0:	784d      	ldrb	r5, [r1, #1]
  4002c2:	5cc1      	ldrb	r1, [r0, r3]
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4002c4:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
  4002c8:	ea81 0242 	eor.w	r2, r1, r2, lsl #1
	if (result & 0x1000000) {
  4002cc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
		result ^= crcpoly;
  4002d0:	bf18      	it	ne
  4002d2:	ea82 020e 	eorne.w	r2, r2, lr
	for (i = 1; i < (crc_area_size - MXT_ID_BLOCK_SIZE - 1); i += 2) {
  4002d6:	3302      	adds	r3, #2
  4002d8:	b29b      	uxth	r3, r3
  4002da:	42bb      	cmp	r3, r7
  4002dc:	dbef      	blt.n	4002be <mxt_init_device+0xea>
	crc_tmp = mxt_crc_24(crc_tmp,
  4002de:	4430      	add	r0, r6
	result = ((crc << 1u) ^ (uint32_t)data_word);
  4002e0:	f810 3c08 	ldrb.w	r3, [r0, #-8]
  4002e4:	ea83 0242 	eor.w	r2, r3, r2, lsl #1
	if (result & 0x1000000) {
  4002e8:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
  4002ec:	d003      	beq.n	4002f6 <mxt_init_device+0x122>
		result ^= crcpoly;
  4002ee:	f482 0200 	eor.w	r2, r2, #8388608	; 0x800000
  4002f2:	f082 021b 	eor.w	r2, r2, #27
	*crc = (crc_tmp & 0x00FFFFFF);
  4002f6:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	twihs_package_t packet = {
  4002fa:	2300      	movs	r3, #0
  4002fc:	9301      	str	r3, [sp, #4]
  4002fe:	9305      	str	r3, [sp, #20]
  400300:	f88d 6004 	strb.w	r6, [sp, #4]
  400304:	0a36      	lsrs	r6, r6, #8
  400306:	f88d 6005 	strb.w	r6, [sp, #5]
  40030a:	2302      	movs	r3, #2
  40030c:	9302      	str	r3, [sp, #8]
  40030e:	f8cd d00c 	str.w	sp, [sp, #12]
  400312:	2303      	movs	r3, #3
  400314:	9304      	str	r3, [sp, #16]
  400316:	7b23      	ldrb	r3, [r4, #12]
  400318:	f88d 3014 	strb.w	r3, [sp, #20]
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  40031c:	a901      	add	r1, sp, #4
  40031e:	68a0      	ldr	r0, [r4, #8]
  400320:	4b50      	ldr	r3, [pc, #320]	; (400464 <mxt_init_device+0x290>)
  400322:	4798      	blx	r3
  400324:	b328      	cbz	r0, 400372 <mxt_init_device+0x19e>
		return ERR_IO_ERROR;
  400326:	f04f 33ff 	mov.w	r3, #4294967295
	if (crc_calculated != crc_read) {
  40032a:	42ab      	cmp	r3, r5
  40032c:	f040 808b 	bne.w	400446 <mxt_init_device+0x272>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400330:	6825      	ldr	r5, [r4, #0]
  400332:	79a8      	ldrb	r0, [r5, #6]
  400334:	b198      	cbz	r0, 40035e <mxt_init_device+0x18a>
  400336:	2300      	movs	r3, #0
  400338:	3301      	adds	r3, #1
  40033a:	b2da      	uxtb	r2, r3
  40033c:	4290      	cmp	r0, r2
  40033e:	d8fb      	bhi.n	400338 <mxt_init_device+0x164>
		tot_report_ids += (device->object_list[i].num_report_ids);
  400340:	6862      	ldr	r2, [r4, #4]
  400342:	1e43      	subs	r3, r0, #1
  400344:	b2db      	uxtb	r3, r3
  400346:	3301      	adds	r3, #1
  400348:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  40034c:	eb02 0143 	add.w	r1, r2, r3, lsl #1
  400350:	2000      	movs	r0, #0
  400352:	7953      	ldrb	r3, [r2, #5]
  400354:	4418      	add	r0, r3
  400356:	b2c0      	uxtb	r0, r0
  400358:	3206      	adds	r2, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40035a:	4291      	cmp	r1, r2
  40035c:	d1f9      	bne.n	400352 <mxt_init_device+0x17e>
			malloc(sizeof(struct mxt_report_id_map) *
  40035e:	0040      	lsls	r0, r0, #1
  400360:	4b3f      	ldr	r3, [pc, #252]	; (400460 <mxt_init_device+0x28c>)
  400362:	4798      	blx	r3
	device->report_id_map = (struct mxt_report_id_map *)
  400364:	6160      	str	r0, [r4, #20]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  400366:	79ab      	ldrb	r3, [r5, #6]
  400368:	b173      	cbz	r3, 400388 <mxt_init_device+0x1b4>
  40036a:	2700      	movs	r7, #0
  40036c:	2601      	movs	r6, #1
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40036e:	46be      	mov	lr, r7
  400370:	e037      	b.n	4003e2 <mxt_init_device+0x20e>
		return ((uint32_t)crc[2] << 16) | ((uint16_t)crc[1] << 8) | crc[0];
  400372:	f89d 2002 	ldrb.w	r2, [sp, #2]
  400376:	f89d 3000 	ldrb.w	r3, [sp]
  40037a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40037e:	f89d 2001 	ldrb.w	r2, [sp, #1]
  400382:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  400386:	e7d0      	b.n	40032a <mxt_init_device+0x156>
		return ERR_BAD_DATA;
  400388:	f06f 0003 	mvn.w	r0, #3
  40038c:	e742      	b.n	400214 <mxt_init_device+0x40>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  40038e:	3001      	adds	r0, #1
  400390:	b2c0      	uxtb	r0, r0
  400392:	6862      	ldr	r2, [r4, #4]
  400394:	1953      	adds	r3, r2, r5
  400396:	7919      	ldrb	r1, [r3, #4]
  400398:	4281      	cmp	r1, r0
  40039a:	d31c      	bcc.n	4003d6 <mxt_init_device+0x202>
			if (device->object_list[i].num_report_ids != 0) {
  40039c:	795b      	ldrb	r3, [r3, #5]
  40039e:	2b00      	cmp	r3, #0
  4003a0:	d0f5      	beq.n	40038e <mxt_init_device+0x1ba>
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4003a2:	6862      	ldr	r2, [r4, #4]
  4003a4:	442a      	add	r2, r5
  4003a6:	7953      	ldrb	r3, [r2, #5]
  4003a8:	2b00      	cmp	r3, #0
  4003aa:	d0f0      	beq.n	40038e <mxt_init_device+0x1ba>
  4003ac:	4633      	mov	r3, r6
							device->object_list[i].type;
  4003ae:	7811      	ldrb	r1, [r2, #0]
					device->report_id_map[id_index].object_type =
  4003b0:	6962      	ldr	r2, [r4, #20]
  4003b2:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					device->report_id_map[id_index].instance = j;
  4003b6:	6962      	ldr	r2, [r4, #20]
  4003b8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  4003bc:	7050      	strb	r0, [r2, #1]
					id_index++;
  4003be:	3301      	adds	r3, #1
  4003c0:	b2db      	uxtb	r3, r3
				for (k = 0; k < device->object_list[i].num_report_ids; ++k) {
  4003c2:	6862      	ldr	r2, [r4, #4]
  4003c4:	442a      	add	r2, r5
  4003c6:	1b99      	subs	r1, r3, r6
  4003c8:	f892 c005 	ldrb.w	ip, [r2, #5]
  4003cc:	b2c9      	uxtb	r1, r1
  4003ce:	458c      	cmp	ip, r1
  4003d0:	d8ed      	bhi.n	4003ae <mxt_init_device+0x1da>
					id_index++;
  4003d2:	461e      	mov	r6, r3
  4003d4:	e7db      	b.n	40038e <mxt_init_device+0x1ba>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4003d6:	3701      	adds	r7, #1
  4003d8:	b2ff      	uxtb	r7, r7
  4003da:	6823      	ldr	r3, [r4, #0]
  4003dc:	799b      	ldrb	r3, [r3, #6]
  4003de:	429f      	cmp	r7, r3
  4003e0:	d207      	bcs.n	4003f2 <mxt_init_device+0x21e>
		for (j = 0; j <= device->object_list[i].instances; ++j) {
  4003e2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
  4003e6:	005a      	lsls	r2, r3, #1
  4003e8:	4615      	mov	r5, r2
  4003ea:	6863      	ldr	r3, [r4, #4]
  4003ec:	4413      	add	r3, r2
  4003ee:	4670      	mov	r0, lr
  4003f0:	e7d4      	b.n	40039c <mxt_init_device+0x1c8>
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4003f2:	b35b      	cbz	r3, 40044c <mxt_init_device+0x278>
  4003f4:	4610      	mov	r0, r2
  4003f6:	3b01      	subs	r3, #1
  4003f8:	b2db      	uxtb	r3, r3
  4003fa:	3301      	adds	r3, #1
  4003fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  400400:	eb02 0243 	add.w	r2, r2, r3, lsl #1
  400404:	2100      	movs	r1, #0
		tot_report_ids += (device->object_list[i].num_report_ids);
  400406:	7943      	ldrb	r3, [r0, #5]
  400408:	4419      	add	r1, r3
  40040a:	b2c9      	uxtb	r1, r1
  40040c:	3006      	adds	r0, #6
	for (i = 0; i < device->info_object->obj_count; ++i) {
  40040e:	4282      	cmp	r2, r0
  400410:	d1f9      	bne.n	400406 <mxt_init_device+0x232>
	for (i = 0; i < tot_rpt_id; ++i) {
  400412:	b1f1      	cbz	r1, 400452 <mxt_init_device+0x27e>
		if (device->report_id_map[i].object_type == object_type) {
  400414:	6962      	ldr	r2, [r4, #20]
  400416:	7813      	ldrb	r3, [r2, #0]
  400418:	2b09      	cmp	r3, #9
  40041a:	d00f      	beq.n	40043c <mxt_init_device+0x268>
  40041c:	2300      	movs	r3, #0
	for (i = 0; i < tot_rpt_id; ++i) {
  40041e:	3301      	adds	r3, #1
  400420:	b2db      	uxtb	r3, r3
  400422:	428b      	cmp	r3, r1
  400424:	d00c      	beq.n	400440 <mxt_init_device+0x26c>
		if (device->report_id_map[i].object_type == object_type) {
  400426:	f812 0f02 	ldrb.w	r0, [r2, #2]!
  40042a:	2809      	cmp	r0, #9
  40042c:	d1f7      	bne.n	40041e <mxt_init_device+0x24a>
			return i;
  40042e:	b25b      	sxtb	r3, r3
	if (status == -1) {
  400430:	f1b3 3fff 	cmp.w	r3, #4294967295
  400434:	d010      	beq.n	400458 <mxt_init_device+0x284>
	device->multitouch_report_offset = status;
  400436:	7723      	strb	r3, [r4, #28]
	return STATUS_OK;
  400438:	2000      	movs	r0, #0
  40043a:	e6eb      	b.n	400214 <mxt_init_device+0x40>
		if (device->report_id_map[i].object_type == object_type) {
  40043c:	2300      	movs	r3, #0
  40043e:	e7f6      	b.n	40042e <mxt_init_device+0x25a>
		return ERR_BAD_DATA;
  400440:	f06f 0003 	mvn.w	r0, #3
  400444:	e6e6      	b.n	400214 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  400446:	f06f 0003 	mvn.w	r0, #3
  40044a:	e6e3      	b.n	400214 <mxt_init_device+0x40>
		return ERR_BAD_DATA;
  40044c:	f06f 0003 	mvn.w	r0, #3
  400450:	e6e0      	b.n	400214 <mxt_init_device+0x40>
  400452:	f06f 0003 	mvn.w	r0, #3
  400456:	e6dd      	b.n	400214 <mxt_init_device+0x40>
  400458:	f06f 0003 	mvn.w	r0, #3
  40045c:	e6da      	b.n	400214 <mxt_init_device+0x40>
  40045e:	bf00      	nop
  400460:	00404159 	.word	0x00404159
  400464:	00401889 	.word	0x00401889
  400468:	0080001b 	.word	0x0080001b

0040046c <mxt_get_object_address>:
uint16_t mxt_get_object_address(struct mxt_device *device, uint8_t object_id,
		uint8_t instance)
{
	uint8_t i;

	for (i = 0; i < device->info_object->obj_count; i++) {
  40046c:	6803      	ldr	r3, [r0, #0]
  40046e:	799a      	ldrb	r2, [r3, #6]
  400470:	b1d2      	cbz	r2, 4004a8 <mxt_get_object_address+0x3c>
{
  400472:	b410      	push	{r4}
		if (object_id == device->object_list[i].type) {
  400474:	6844      	ldr	r4, [r0, #4]
  400476:	7823      	ldrb	r3, [r4, #0]
  400478:	428b      	cmp	r3, r1
  40047a:	d00e      	beq.n	40049a <mxt_get_object_address+0x2e>
  40047c:	1da3      	adds	r3, r4, #6
  40047e:	3a01      	subs	r2, #1
  400480:	b2d2      	uxtb	r2, r2
  400482:	3201      	adds	r2, #1
  400484:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  400488:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; i++) {
  40048c:	4293      	cmp	r3, r2
  40048e:	d009      	beq.n	4004a4 <mxt_get_object_address+0x38>
		if (object_id == device->object_list[i].type) {
  400490:	461c      	mov	r4, r3
  400492:	f813 0b06 	ldrb.w	r0, [r3], #6
  400496:	4288      	cmp	r0, r1
  400498:	d1f8      	bne.n	40048c <mxt_get_object_address+0x20>
			return device->object_list[i].start_address;
  40049a:	f8b4 0001 	ldrh.w	r0, [r4, #1]
		}
	}

	return 0;
}
  40049e:	f85d 4b04 	ldr.w	r4, [sp], #4
  4004a2:	4770      	bx	lr
	return 0;
  4004a4:	2000      	movs	r0, #0
  4004a6:	e7fa      	b.n	40049e <mxt_get_object_address+0x32>
  4004a8:	2000      	movs	r0, #0
  4004aa:	4770      	bx	lr

004004ac <mxt_write_config_object>:
 * \param *obj_data Pointer to memory buffer containing object data
 * \result Operation result status code
 */
status_code_t mxt_write_config_object(struct mxt_device *device,
		mxt_memory_adr memory_adr, void *obj_data)
{
  4004ac:	b530      	push	{r4, r5, lr}
  4004ae:	b087      	sub	sp, #28
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4004b0:	2300      	movs	r3, #0
  4004b2:	9301      	str	r3, [sp, #4]
  4004b4:	9304      	str	r3, [sp, #16]
  4004b6:	9305      	str	r3, [sp, #20]
  4004b8:	f88d 1004 	strb.w	r1, [sp, #4]
  4004bc:	0a0b      	lsrs	r3, r1, #8
  4004be:	f88d 3005 	strb.w	r3, [sp, #5]
  4004c2:	2302      	movs	r3, #2
  4004c4:	9302      	str	r3, [sp, #8]
  4004c6:	9203      	str	r2, [sp, #12]
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4004c8:	6803      	ldr	r3, [r0, #0]
  4004ca:	799a      	ldrb	r2, [r3, #6]
  4004cc:	b1ba      	cbz	r2, 4004fe <mxt_write_config_object+0x52>
		if (device->object_list[i].start_address == mem_adr) {
  4004ce:	6844      	ldr	r4, [r0, #4]
  4004d0:	f8b4 3001 	ldrh.w	r3, [r4, #1]
  4004d4:	428b      	cmp	r3, r1
  4004d6:	d00f      	beq.n	4004f8 <mxt_write_config_object+0x4c>
  4004d8:	1da3      	adds	r3, r4, #6
  4004da:	3a01      	subs	r2, #1
  4004dc:	b2d2      	uxtb	r2, r2
  4004de:	3201      	adds	r2, #1
  4004e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  4004e4:	eb04 0242 	add.w	r2, r4, r2, lsl #1
	for (i = 0; i < device->info_object->obj_count; ++i) {
  4004e8:	4293      	cmp	r3, r2
  4004ea:	d016      	beq.n	40051a <mxt_write_config_object+0x6e>
		if (device->object_list[i].start_address == mem_adr) {
  4004ec:	461c      	mov	r4, r3
  4004ee:	3306      	adds	r3, #6
  4004f0:	f8b4 5001 	ldrh.w	r5, [r4, #1]
  4004f4:	428d      	cmp	r5, r1
  4004f6:	d1f7      	bne.n	4004e8 <mxt_write_config_object+0x3c>
			return (device->object_list[i].size + 1);
  4004f8:	78e2      	ldrb	r2, [r4, #3]
  4004fa:	3201      	adds	r2, #1
  4004fc:	b2d2      	uxtb	r2, r2
		.addr[0]      = memory_adr,
		.addr[1]      = memory_adr >> 8,
		.addr_length  = sizeof(mxt_memory_adr),
		.chip         = device->mxt_chip_adr,
		.buffer       = obj_data,
		.length       = mxt_get_object_size(device, memory_adr)
  4004fe:	9204      	str	r2, [sp, #16]
	twihs_package_t packet = {
  400500:	7b03      	ldrb	r3, [r0, #12]
  400502:	f88d 3014 	strb.w	r3, [sp, #20]
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400506:	a901      	add	r1, sp, #4
  400508:	6880      	ldr	r0, [r0, #8]
  40050a:	4b05      	ldr	r3, [pc, #20]	; (400520 <mxt_write_config_object+0x74>)
  40050c:	4798      	blx	r3
  40050e:	3000      	adds	r0, #0
  400510:	bf18      	it	ne
  400512:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}

}
  400514:	4240      	negs	r0, r0
  400516:	b007      	add	sp, #28
  400518:	bd30      	pop	{r4, r5, pc}
	return 0;
  40051a:	2200      	movs	r2, #0
  40051c:	e7ef      	b.n	4004fe <mxt_write_config_object+0x52>
  40051e:	bf00      	nop
  400520:	00401935 	.word	0x00401935

00400524 <mxt_write_config_reg>:
 * \param value Value to be written to register
 * \result Operation result status code
 */
status_code_t mxt_write_config_reg(struct mxt_device *device,
		mxt_memory_adr memory_adr, uint8_t value)
{
  400524:	b500      	push	{lr}
  400526:	b089      	sub	sp, #36	; 0x24
  400528:	f88d 2007 	strb.w	r2, [sp, #7]
	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  40052c:	2300      	movs	r3, #0
  40052e:	9303      	str	r3, [sp, #12]
  400530:	9307      	str	r3, [sp, #28]
  400532:	f88d 100c 	strb.w	r1, [sp, #12]
  400536:	0a09      	lsrs	r1, r1, #8
  400538:	f88d 100d 	strb.w	r1, [sp, #13]
  40053c:	2302      	movs	r3, #2
  40053e:	9304      	str	r3, [sp, #16]
  400540:	f10d 0307 	add.w	r3, sp, #7
  400544:	9305      	str	r3, [sp, #20]
  400546:	2301      	movs	r3, #1
  400548:	9306      	str	r3, [sp, #24]
  40054a:	7b03      	ldrb	r3, [r0, #12]
  40054c:	f88d 301c 	strb.w	r3, [sp, #28]
		.chip         = device->mxt_chip_adr,
		.buffer       = &value,
		.length       = sizeof(value)
	};

	if (twihs_master_write(device->interface, &packet) != STATUS_OK) {
  400550:	a903      	add	r1, sp, #12
  400552:	6880      	ldr	r0, [r0, #8]
  400554:	4b04      	ldr	r3, [pc, #16]	; (400568 <mxt_write_config_reg+0x44>)
  400556:	4798      	blx	r3
  400558:	3000      	adds	r0, #0
  40055a:	bf18      	it	ne
  40055c:	2001      	movne	r0, #1
		return ERR_IO_ERROR;
	} else {
		return STATUS_OK;
	}
}
  40055e:	4240      	negs	r0, r0
  400560:	b009      	add	sp, #36	; 0x24
  400562:	f85d fb04 	ldr.w	pc, [sp], #4
  400566:	bf00      	nop
  400568:	00401935 	.word	0x00401935

0040056c <mxt_is_message_pending>:
 * \param *device Pointer to mxt_device instance
 * \return Return /CHG pin status
 */
bool mxt_is_message_pending(struct mxt_device *device)
{
	if (ioport_get_pin_level(device->chgpin) == false) {
  40056c:	6982      	ldr	r2, [r0, #24]
	} else {
		return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
		       (IOPORT_PIO_OFFSET * port));
	}
#else
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
  40056e:	4b07      	ldr	r3, [pc, #28]	; (40058c <mxt_is_message_pending+0x20>)
  400570:	eb03 1352 	add.w	r3, r3, r2, lsr #5
  400574:	025b      	lsls	r3, r3, #9
	}
}

__always_inline static bool arch_ioport_get_pin_level(ioport_pin_t pin)
{
	return arch_ioport_pin_to_base(pin)->PIO_PDSR & arch_ioport_pin_to_mask(pin);
  400576:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	return 1U << (pin & 0x1F);
  400578:	f002 021f 	and.w	r2, r2, #31
  40057c:	2301      	movs	r3, #1
  40057e:	fa03 f202 	lsl.w	r2, r3, r2
  400582:	420a      	tst	r2, r1
		return true;
	} else {
		return false;
	}
}
  400584:	bf0c      	ite	eq
  400586:	4618      	moveq	r0, r3
  400588:	2000      	movne	r0, #0
  40058a:	4770      	bx	lr
  40058c:	00200707 	.word	0x00200707

00400590 <mxt_read_message>:
 * \param *message Pointer to mxt_message instance
 * \return Operation result status code
 */
status_code_t mxt_read_message(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
  400590:	b530      	push	{r4, r5, lr}
  400592:	b087      	sub	sp, #28
  400594:	4604      	mov	r4, r0
  400596:	460d      	mov	r5, r1
	uint16_t obj_adr = mxt_get_object_address(device,
  400598:	2200      	movs	r2, #0
  40059a:	2105      	movs	r1, #5
  40059c:	4b0d      	ldr	r3, [pc, #52]	; (4005d4 <mxt_read_message+0x44>)
  40059e:	4798      	blx	r3
			MXT_GEN_MESSAGEPROCESSOR_T5, 0);

	/* Initializing the TWI packet to send to the slave */
	twihs_package_t packet = {
  4005a0:	2300      	movs	r3, #0
  4005a2:	9301      	str	r3, [sp, #4]
  4005a4:	9305      	str	r3, [sp, #20]
  4005a6:	f88d 0004 	strb.w	r0, [sp, #4]
  4005aa:	0a00      	lsrs	r0, r0, #8
  4005ac:	f88d 0005 	strb.w	r0, [sp, #5]
  4005b0:	2302      	movs	r3, #2
  4005b2:	9302      	str	r3, [sp, #8]
  4005b4:	9503      	str	r5, [sp, #12]
  4005b6:	2309      	movs	r3, #9
  4005b8:	9304      	str	r3, [sp, #16]
  4005ba:	7b23      	ldrb	r3, [r4, #12]
  4005bc:	f88d 3014 	strb.w	r3, [sp, #20]
		.buffer       = message,
		.length       = MXT_TWI_MSG_SIZE_T5
	};

	/* Read information from the slave */
	if (twihs_master_read(device->interface, &packet) != STATUS_OK) {
  4005c0:	a901      	add	r1, sp, #4
  4005c2:	68a0      	ldr	r0, [r4, #8]
  4005c4:	4b04      	ldr	r3, [pc, #16]	; (4005d8 <mxt_read_message+0x48>)
  4005c6:	4798      	blx	r3
  4005c8:	3000      	adds	r0, #0
  4005ca:	bf18      	it	ne
  4005cc:	2001      	movne	r0, #1
		return mxt_validate_message(&packet);
#else
		return STATUS_OK;
#endif
	}
}
  4005ce:	4240      	negs	r0, r0
  4005d0:	b007      	add	sp, #28
  4005d2:	bd30      	pop	{r4, r5, pc}
  4005d4:	0040046d 	.word	0x0040046d
  4005d8:	00401889 	.word	0x00401889

004005dc <mxt_read_touch_event>:
 * \param *touch_event Pointer to mxt_touch_event instance
 * \return Operation result status code
 */
status_code_t mxt_read_touch_event(struct mxt_device *device,
		struct mxt_touch_event *touch_event)
{
  4005dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  4005de:	b085      	sub	sp, #20
  4005e0:	4604      	mov	r4, r0
  4005e2:	460e      	mov	r6, r1
	uint8_t obj_type, status;
	struct mxt_conf_messageprocessor_t5 message;

	while (mxt_is_message_pending(device)) {
  4005e4:	4d17      	ldr	r5, [pc, #92]	; (400644 <mxt_read_touch_event+0x68>)
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4005e6:	4f18      	ldr	r7, [pc, #96]	; (400648 <mxt_read_touch_event+0x6c>)
	while (mxt_is_message_pending(device)) {
  4005e8:	4620      	mov	r0, r4
  4005ea:	47a8      	blx	r5
  4005ec:	b328      	cbz	r0, 40063a <mxt_read_touch_event+0x5e>
		if((status = mxt_read_message(device, &message)) != STATUS_OK) {
  4005ee:	a901      	add	r1, sp, #4
  4005f0:	4620      	mov	r0, r4
  4005f2:	47b8      	blx	r7
  4005f4:	4603      	mov	r3, r0
  4005f6:	bb10      	cbnz	r0, 40063e <mxt_read_touch_event+0x62>
 * \return Operation
 */
enum mxt_object_type mxt_get_object_type(struct mxt_device *device,
		struct mxt_conf_messageprocessor_t5 *message)
{
	return (enum mxt_object_type)(device->report_id_map[message->reportid].object_type);
  4005f8:	f89d 3004 	ldrb.w	r3, [sp, #4]
  4005fc:	6962      	ldr	r2, [r4, #20]
		if (obj_type == MXT_TOUCH_MULTITOUCHSCREEN_T9) {
  4005fe:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
  400602:	2a09      	cmp	r2, #9
  400604:	d1f0      	bne.n	4005e8 <mxt_read_touch_event+0xc>
			touch_event->id = (message.reportid -
  400606:	7f22      	ldrb	r2, [r4, #28]
  400608:	1a9b      	subs	r3, r3, r2
  40060a:	7033      	strb	r3, [r6, #0]
			touch_event->status = message.message[0];
  40060c:	f89d 3005 	ldrb.w	r3, [sp, #5]
  400610:	7073      	strb	r3, [r6, #1]
					((message.message[3] & 0xf0) >> 4);
  400612:	f89d 3008 	ldrb.w	r3, [sp, #8]
			touch_event->x = (message.message[1] << 4) |
  400616:	f89d 1006 	ldrb.w	r1, [sp, #6]
					((message.message[3] & 0xf0) >> 4);
  40061a:	091a      	lsrs	r2, r3, #4
			touch_event->x = (message.message[1] << 4) |
  40061c:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
  400620:	8072      	strh	r2, [r6, #2]
			touch_event->y = (message.message[2] << 4) |
  400622:	f89d 2007 	ldrb.w	r2, [sp, #7]
					(message.message[3] & 0x0f);
  400626:	f003 030f 	and.w	r3, r3, #15
			touch_event->y = (message.message[2] << 4) |
  40062a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
  40062e:	80b3      	strh	r3, [r6, #4]
			touch_event->size = message.message[4];
  400630:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400634:	71b3      	strb	r3, [r6, #6]
			return STATUS_OK;
  400636:	2300      	movs	r3, #0
  400638:	e001      	b.n	40063e <mxt_read_touch_event+0x62>
	return ERR_BAD_DATA;
  40063a:	f06f 0303 	mvn.w	r3, #3
}
  40063e:	4618      	mov	r0, r3
  400640:	b005      	add	sp, #20
  400642:	bdf0      	pop	{r4, r5, r6, r7, pc}
  400644:	0040056d 	.word	0x0040056d
  400648:	00400591 	.word	0x00400591

0040064c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  40064c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  40064e:	4810      	ldr	r0, [pc, #64]	; (400690 <sysclk_init+0x44>)
  400650:	4b10      	ldr	r3, [pc, #64]	; (400694 <sysclk_init+0x48>)
  400652:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  400654:	213e      	movs	r1, #62	; 0x3e
  400656:	2000      	movs	r0, #0
  400658:	4b0f      	ldr	r3, [pc, #60]	; (400698 <sysclk_init+0x4c>)
  40065a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  40065c:	4c0f      	ldr	r4, [pc, #60]	; (40069c <sysclk_init+0x50>)
  40065e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  400660:	2800      	cmp	r0, #0
  400662:	d0fc      	beq.n	40065e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  400664:	4b0e      	ldr	r3, [pc, #56]	; (4006a0 <sysclk_init+0x54>)
  400666:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  400668:	4a0e      	ldr	r2, [pc, #56]	; (4006a4 <sysclk_init+0x58>)
  40066a:	4b0f      	ldr	r3, [pc, #60]	; (4006a8 <sysclk_init+0x5c>)
  40066c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  40066e:	4c0f      	ldr	r4, [pc, #60]	; (4006ac <sysclk_init+0x60>)
  400670:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  400672:	2800      	cmp	r0, #0
  400674:	d0fc      	beq.n	400670 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  400676:	2002      	movs	r0, #2
  400678:	4b0d      	ldr	r3, [pc, #52]	; (4006b0 <sysclk_init+0x64>)
  40067a:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  40067c:	2000      	movs	r0, #0
  40067e:	4b0d      	ldr	r3, [pc, #52]	; (4006b4 <sysclk_init+0x68>)
  400680:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  400682:	4b0d      	ldr	r3, [pc, #52]	; (4006b8 <sysclk_init+0x6c>)
  400684:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  400686:	480d      	ldr	r0, [pc, #52]	; (4006bc <sysclk_init+0x70>)
  400688:	4b02      	ldr	r3, [pc, #8]	; (400694 <sysclk_init+0x48>)
  40068a:	4798      	blx	r3
  40068c:	bd10      	pop	{r4, pc}
  40068e:	bf00      	nop
  400690:	07270e00 	.word	0x07270e00
  400694:	00401ce1 	.word	0x00401ce1
  400698:	00401585 	.word	0x00401585
  40069c:	004015d9 	.word	0x004015d9
  4006a0:	004015e9 	.word	0x004015e9
  4006a4:	20183f01 	.word	0x20183f01
  4006a8:	400e0600 	.word	0x400e0600
  4006ac:	004015f9 	.word	0x004015f9
  4006b0:	004014e9 	.word	0x004014e9
  4006b4:	00401521 	.word	0x00401521
  4006b8:	00401bd5 	.word	0x00401bd5
  4006bc:	11e1a300 	.word	0x11e1a300

004006c0 <spi_master_init>:
 *
 * \param p_spi  Base address of the SPI instance.
 *
 */
void spi_master_init(Spi *p_spi)
{
  4006c0:	b510      	push	{r4, lr}
  4006c2:	4604      	mov	r4, r0
#if SAMG55
	flexcom_enable(BOARD_FLEXCOM_SPI);
	flexcom_set_opmode(BOARD_FLEXCOM_SPI, FLEXCOM_SPI);
#else
	spi_enable_clock(p_spi);
  4006c4:	4b10      	ldr	r3, [pc, #64]	; (400708 <spi_master_init+0x48>)
  4006c6:	4798      	blx	r3
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
	p_spi->SPI_CR = SPI_CR_SWRST;
  4006c8:	2380      	movs	r3, #128	; 0x80
  4006ca:	6023      	str	r3, [r4, #0]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MSTR;
  4006cc:	6863      	ldr	r3, [r4, #4]
  4006ce:	f043 0301 	orr.w	r3, r3, #1
  4006d2:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
  4006d4:	6863      	ldr	r3, [r4, #4]
  4006d6:	f043 0310 	orr.w	r3, r3, #16
  4006da:	6063      	str	r3, [r4, #4]
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
	p_spi->SPI_MR &= (~SPI_MR_LLB);
  4006dc:	6863      	ldr	r3, [r4, #4]
  4006de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4006e2:	6063      	str	r3, [r4, #4]
#endif
	spi_reset(p_spi);
	spi_set_master_mode(p_spi);
	spi_disable_mode_fault_detect(p_spi);
	spi_disable_loopback(p_spi);
	spi_set_peripheral_chip_select_value(p_spi, DEFAULT_CHIP_ID);
  4006e4:	2100      	movs	r1, #0
  4006e6:	4620      	mov	r0, r4
  4006e8:	4b08      	ldr	r3, [pc, #32]	; (40070c <spi_master_init+0x4c>)
  4006ea:	4798      	blx	r3
	p_spi->SPI_MR &= (~SPI_MR_PS);
  4006ec:	6863      	ldr	r3, [r4, #4]
  4006ee:	f023 0302 	bic.w	r3, r3, #2
  4006f2:	6063      	str	r3, [r4, #4]
	p_spi->SPI_MR &= (~SPI_MR_PCSDEC);
  4006f4:	6863      	ldr	r3, [r4, #4]
  4006f6:	f023 0304 	bic.w	r3, r3, #4
  4006fa:	6063      	str	r3, [r4, #4]
	spi_set_fixed_peripheral_select(p_spi);
	spi_disable_peripheral_select_decode(p_spi);
	spi_set_delay_between_chip_select(p_spi, CONFIG_SPI_MASTER_DELAY_BCS);
  4006fc:	2100      	movs	r1, #0
  4006fe:	4620      	mov	r0, r4
  400700:	4b03      	ldr	r3, [pc, #12]	; (400710 <spi_master_init+0x50>)
  400702:	4798      	blx	r3
  400704:	bd10      	pop	{r4, pc}
  400706:	bf00      	nop
  400708:	00401629 	.word	0x00401629
  40070c:	00401655 	.word	0x00401655
  400710:	0040166b 	.word	0x0040166b

00400714 <spi_master_setup_device>:
 * \param baud_rate Baud rate for communication with slave device in Hz.
 * \param sel_id    Board specific select id.
 */
void spi_master_setup_device(Spi *p_spi, struct spi_device *device,
		spi_flags_t flags, uint32_t baud_rate, board_spi_select_id_t sel_id)
{
  400714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400718:	4604      	mov	r4, r0
  40071a:	460d      	mov	r5, r1
  40071c:	4616      	mov	r6, r2
#if (SAM4L)
    int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_pba_hz());
#else
	int16_t baud_div = spi_calc_baudrate_div(baud_rate, sysclk_get_peripheral_hz());
  40071e:	4915      	ldr	r1, [pc, #84]	; (400774 <spi_master_setup_device+0x60>)
  400720:	4618      	mov	r0, r3
  400722:	4b15      	ldr	r3, [pc, #84]	; (400778 <spi_master_setup_device+0x64>)
  400724:	4798      	blx	r3
  400726:	4607      	mov	r7, r0
	/* avoid Cppcheck Warning */
	UNUSED(sel_id);
	if (-1 == baud_div) {
		Assert(0 == "Failed to find baudrate divider");
	}
	spi_set_transfer_delay(p_spi, device->id, CONFIG_SPI_MASTER_DELAY_BS,
  400728:	2300      	movs	r3, #0
  40072a:	461a      	mov	r2, r3
  40072c:	6829      	ldr	r1, [r5, #0]
  40072e:	4620      	mov	r0, r4
  400730:	f8df 805c 	ldr.w	r8, [pc, #92]	; 400790 <spi_master_setup_device+0x7c>
  400734:	47c0      	blx	r8
			CONFIG_SPI_MASTER_DELAY_BCT);
	spi_set_bits_per_transfer(p_spi, device->id,
  400736:	2208      	movs	r2, #8
  400738:	6829      	ldr	r1, [r5, #0]
  40073a:	4620      	mov	r0, r4
  40073c:	4b0f      	ldr	r3, [pc, #60]	; (40077c <spi_master_setup_device+0x68>)
  40073e:	4798      	blx	r3
			CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
	spi_set_baudrate_div(p_spi, device->id, baud_div);
  400740:	b2fa      	uxtb	r2, r7
  400742:	6829      	ldr	r1, [r5, #0]
  400744:	4620      	mov	r0, r4
  400746:	4b0e      	ldr	r3, [pc, #56]	; (400780 <spi_master_setup_device+0x6c>)
  400748:	4798      	blx	r3
	spi_configure_cs_behavior(p_spi, device->id, SPI_CS_KEEP_LOW);
  40074a:	2208      	movs	r2, #8
  40074c:	6829      	ldr	r1, [r5, #0]
  40074e:	4620      	mov	r0, r4
  400750:	4b0c      	ldr	r3, [pc, #48]	; (400784 <spi_master_setup_device+0x70>)
  400752:	4798      	blx	r3
	spi_set_clock_polarity(p_spi, device->id, flags >> 1);
  400754:	0872      	lsrs	r2, r6, #1
  400756:	6829      	ldr	r1, [r5, #0]
  400758:	4620      	mov	r0, r4
  40075a:	4b0b      	ldr	r3, [pc, #44]	; (400788 <spi_master_setup_device+0x74>)
  40075c:	4798      	blx	r3
	spi_set_clock_phase(p_spi, device->id, ((flags & 0x1) ^ 0x1));
  40075e:	f086 0201 	eor.w	r2, r6, #1
  400762:	f002 0201 	and.w	r2, r2, #1
  400766:	6829      	ldr	r1, [r5, #0]
  400768:	4620      	mov	r0, r4
  40076a:	4b08      	ldr	r3, [pc, #32]	; (40078c <spi_master_setup_device+0x78>)
  40076c:	4798      	blx	r3
  40076e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400772:	bf00      	nop
  400774:	08f0d180 	.word	0x08f0d180
  400778:	00401747 	.word	0x00401747
  40077c:	00401733 	.word	0x00401733
  400780:	0040175d 	.word	0x0040175d
  400784:	004016ed 	.word	0x004016ed
  400788:	004016b1 	.word	0x004016b1
  40078c:	004016cf 	.word	0x004016cf
  400790:	00401785 	.word	0x00401785

00400794 <spi_select_device>:
 * \param p_spi   Base address of the SPI instance.
 * \param device  SPI device.
 *
 */
void spi_select_device(Spi *p_spi, struct spi_device *device)
{
  400794:	b508      	push	{r3, lr}
	if (p_spi->SPI_MR & SPI_MR_PCSDEC) {
  400796:	6843      	ldr	r3, [r0, #4]
	if (spi_get_peripheral_select_decode_setting(p_spi)) {
  400798:	f013 0f04 	tst.w	r3, #4
  40079c:	d006      	beq.n	4007ac <spi_select_device+0x18>
		if (device->id < MAX_NUM_WITH_DECODER) {
  40079e:	6809      	ldr	r1, [r1, #0]
  4007a0:	290f      	cmp	r1, #15
  4007a2:	d900      	bls.n	4007a6 <spi_select_device+0x12>
  4007a4:	bd08      	pop	{r3, pc}
			spi_set_peripheral_chip_select_value(p_spi, device->id);
  4007a6:	4b06      	ldr	r3, [pc, #24]	; (4007c0 <spi_select_device+0x2c>)
  4007a8:	4798      	blx	r3
  4007aa:	bd08      	pop	{r3, pc}
		}
	} else {
		if (device->id < MAX_NUM_WITHOUT_DECODER) {
  4007ac:	6809      	ldr	r1, [r1, #0]
  4007ae:	2903      	cmp	r1, #3
  4007b0:	d8f8      	bhi.n	4007a4 <spi_select_device+0x10>
			spi_set_peripheral_chip_select_value(p_spi, (~(1 << device->id)));
  4007b2:	2301      	movs	r3, #1
  4007b4:	fa03 f101 	lsl.w	r1, r3, r1
  4007b8:	43c9      	mvns	r1, r1
  4007ba:	4b01      	ldr	r3, [pc, #4]	; (4007c0 <spi_select_device+0x2c>)
  4007bc:	4798      	blx	r3
		}
	}
}
  4007be:	e7f1      	b.n	4007a4 <spi_select_device+0x10>
  4007c0:	00401655 	.word	0x00401655

004007c4 <spi_write_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t i = 0;
	uint8_t val;

	while (len) {
  4007c4:	b11a      	cbz	r2, 4007ce <spi_write_packet+0xa>
{
  4007c6:	b410      	push	{r4}
  4007c8:	460c      	mov	r4, r1
  4007ca:	4411      	add	r1, r2
  4007cc:	e006      	b.n	4007dc <spi_write_packet+0x18>
		spi_write_single(p_spi, val);
		i++;
		len--;
	}

	return STATUS_OK;
  4007ce:	2000      	movs	r0, #0
  4007d0:	4770      	bx	lr
		val = data[i];
  4007d2:	f814 3b01 	ldrb.w	r3, [r4], #1
 * \param data The data byte to be loaded
 *
 */
static inline void spi_put(Spi *p_spi, uint16_t data)
{
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  4007d6:	60c3      	str	r3, [r0, #12]
	while (len) {
  4007d8:	42a1      	cmp	r1, r4
  4007da:	d00c      	beq.n	4007f6 <spi_write_packet+0x32>
{
  4007dc:	f643 2399 	movw	r3, #15001	; 0x3a99
 * \retval 1 if transmissions are complete.
 * \retval 0 if transmissions are not complete.
 */
static inline uint32_t spi_is_tx_ready(Spi *p_spi)
{
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  4007e0:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  4007e2:	f012 0f02 	tst.w	r2, #2
  4007e6:	d1f4      	bne.n	4007d2 <spi_write_packet+0xe>
			if (!timeout--) {
  4007e8:	3b01      	subs	r3, #1
  4007ea:	d1f9      	bne.n	4007e0 <spi_write_packet+0x1c>
				return ERR_TIMEOUT;
  4007ec:	f06f 0002 	mvn.w	r0, #2
}
  4007f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  4007f4:	4770      	bx	lr
	return STATUS_OK;
  4007f6:	2000      	movs	r0, #0
  4007f8:	e7fa      	b.n	4007f0 <spi_write_packet+0x2c>

004007fa <spi_read_packet>:
{
	uint32_t timeout = SPI_TIMEOUT;
	uint8_t val;
	uint32_t i = 0;

	while (len) {
  4007fa:	b13a      	cbz	r2, 40080c <spi_read_packet+0x12>
{
  4007fc:	b470      	push	{r4, r5, r6}
  4007fe:	4615      	mov	r5, r2
  400800:	460c      	mov	r4, r1
  400802:	440d      	add	r5, r1
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400804:	26ff      	movs	r6, #255	; 0xff
 *
 * \return 1 if the SPI Receiver is ready, otherwise 0.
 */
static inline uint32_t spi_is_rx_ready(Spi *p_spi)
{
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400806:	f240 2101 	movw	r1, #513	; 0x201
  40080a:	e012      	b.n	400832 <spi_read_packet+0x38>
		data[i] = val;
		i++;
		len--;
	}

	return STATUS_OK;
  40080c:	2000      	movs	r0, #0
  40080e:	4770      	bx	lr
	p_spi->SPI_TDR = SPI_TDR_TD(data);
  400810:	60c6      	str	r6, [r0, #12]
		while (!spi_is_rx_ready(p_spi)) {
  400812:	f643 2399 	movw	r3, #15001	; 0x3a99
	if ((p_spi->SPI_SR & (SPI_SR_RDRF | SPI_SR_TXEMPTY))
  400816:	6902      	ldr	r2, [r0, #16]
  400818:	ea31 0202 	bics.w	r2, r1, r2
  40081c:	d004      	beq.n	400828 <spi_read_packet+0x2e>
			if (!timeout--) {
  40081e:	3b01      	subs	r3, #1
  400820:	d1f9      	bne.n	400816 <spi_read_packet+0x1c>
				return ERR_TIMEOUT;
  400822:	f06f 0002 	mvn.w	r0, #2
  400826:	e00e      	b.n	400846 <spi_read_packet+0x4c>
	return (p_spi->SPI_RDR & SPI_RDR_RD_Msk);
  400828:	6883      	ldr	r3, [r0, #8]
 * \param data      Data to read.
 *
 */
static inline void spi_read_single(Spi *p_spi, uint8_t *data)
{
	*data = (uint8_t)spi_get(p_spi);
  40082a:	f804 3b01 	strb.w	r3, [r4], #1
	while (len) {
  40082e:	42a5      	cmp	r5, r4
  400830:	d00b      	beq.n	40084a <spi_read_packet+0x50>
{
  400832:	f643 2399 	movw	r3, #15001	; 0x3a99
	if (p_spi->SPI_SR & SPI_SR_TDRE) {
  400836:	6902      	ldr	r2, [r0, #16]
		while (!spi_is_tx_ready(p_spi)) {
  400838:	f012 0f02 	tst.w	r2, #2
  40083c:	d1e8      	bne.n	400810 <spi_read_packet+0x16>
			if (!timeout--) {
  40083e:	3b01      	subs	r3, #1
  400840:	d1f9      	bne.n	400836 <spi_read_packet+0x3c>
				return ERR_TIMEOUT;
  400842:	f06f 0002 	mvn.w	r0, #2
}
  400846:	bc70      	pop	{r4, r5, r6}
  400848:	4770      	bx	lr
	return STATUS_OK;
  40084a:	2000      	movs	r0, #0
  40084c:	e7fb      	b.n	400846 <spi_read_packet+0x4c>
	...

00400850 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
  400850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
  400854:	b980      	cbnz	r0, 400878 <_read+0x28>
  400856:	460c      	mov	r4, r1
  400858:	4690      	mov	r8, r2
		return -1;
	}

	for (; len > 0; --len) {
  40085a:	2a00      	cmp	r2, #0
  40085c:	dd0f      	ble.n	40087e <_read+0x2e>
  40085e:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
  400860:	4e08      	ldr	r6, [pc, #32]	; (400884 <_read+0x34>)
  400862:	4d09      	ldr	r5, [pc, #36]	; (400888 <_read+0x38>)
  400864:	6830      	ldr	r0, [r6, #0]
  400866:	4621      	mov	r1, r4
  400868:	682b      	ldr	r3, [r5, #0]
  40086a:	4798      	blx	r3
		ptr++;
  40086c:	3401      	adds	r4, #1
	for (; len > 0; --len) {
  40086e:	42bc      	cmp	r4, r7
  400870:	d1f8      	bne.n	400864 <_read+0x14>
		nChars++;
	}
	return nChars;
}
  400872:	4640      	mov	r0, r8
  400874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  400878:	f04f 38ff 	mov.w	r8, #4294967295
  40087c:	e7f9      	b.n	400872 <_read+0x22>
	for (; len > 0; --len) {
  40087e:	4680      	mov	r8, r0
  400880:	e7f7      	b.n	400872 <_read+0x22>
  400882:	bf00      	nop
  400884:	2040c7a0 	.word	0x2040c7a0
  400888:	2040c798 	.word	0x2040c798

0040088c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
  40088c:	3801      	subs	r0, #1
  40088e:	2802      	cmp	r0, #2
  400890:	d815      	bhi.n	4008be <_write+0x32>
{
  400892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400896:	460e      	mov	r6, r1
  400898:	4614      	mov	r4, r2
		return -1;
	}

	for (; len != 0; --len) {
  40089a:	b19a      	cbz	r2, 4008c4 <_write+0x38>
  40089c:	460d      	mov	r5, r1
		if (ptr_put(stdio_base, *ptr++) < 0) {
  40089e:	f8df 8038 	ldr.w	r8, [pc, #56]	; 4008d8 <_write+0x4c>
  4008a2:	4f0c      	ldr	r7, [pc, #48]	; (4008d4 <_write+0x48>)
  4008a4:	f8d8 0000 	ldr.w	r0, [r8]
  4008a8:	f815 1b01 	ldrb.w	r1, [r5], #1
  4008ac:	683b      	ldr	r3, [r7, #0]
  4008ae:	4798      	blx	r3
  4008b0:	2800      	cmp	r0, #0
  4008b2:	db0a      	blt.n	4008ca <_write+0x3e>
  4008b4:	1ba8      	subs	r0, r5, r6
	for (; len != 0; --len) {
  4008b6:	3c01      	subs	r4, #1
  4008b8:	d1f4      	bne.n	4008a4 <_write+0x18>
  4008ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
  4008be:	f04f 30ff 	mov.w	r0, #4294967295
  4008c2:	4770      	bx	lr
	for (; len != 0; --len) {
  4008c4:	4610      	mov	r0, r2
  4008c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return -1;
  4008ca:	f04f 30ff 	mov.w	r0, #4294967295
		}
		++nChars;
	}
	return nChars;
}
  4008ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4008d2:	bf00      	nop
  4008d4:	2040c79c 	.word	0x2040c79c
  4008d8:	2040c7a0 	.word	0x2040c7a0

004008dc <board_init>:
	__ISB();
}
#endif

void board_init(void)
{
  4008dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
  4008e0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  4008e4:	4b9e      	ldr	r3, [pc, #632]	; (400b60 <board_init+0x284>)
  4008e6:	605a      	str	r2, [r3, #4]
    This function acts as a special kind of Data Memory Barrier.
    It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb");
  4008e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4008ec:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache(void)
{
  #if (__ICACHE_PRESENT == 1)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0;                       // invalidate I-Cache
  4008f0:	4b9c      	ldr	r3, [pc, #624]	; (400b64 <board_init+0x288>)
  4008f2:	2200      	movs	r2, #0
  4008f4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
    SCB->CCR |=  SCB_CCR_IC_Msk;            // enable I-Cache
  4008f8:	695a      	ldr	r2, [r3, #20]
  4008fa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
  4008fe:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb");
  400900:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400904:	f3bf 8f6f 	isb	sy
{
  #if (__DCACHE_PRESENT == 1)
    uint32_t ccsidr, sshift, wshift, sw;
    uint32_t sets, ways;

    ccsidr  = SCB->CCSIDR;
  400908:	f8d3 7080 	ldr.w	r7, [r3, #128]	; 0x80
    sets    = CCSIDR_SETS(ccsidr);
  40090c:	f3c7 364e 	ubfx	r6, r7, #13, #15
    sshift  = CCSIDR_LSSHIFT(ccsidr) + 4;
  400910:	f007 0007 	and.w	r0, r7, #7
  400914:	3004      	adds	r0, #4
    ways    = CCSIDR_WAYS(ccsidr);
  400916:	f3c7 07c9 	ubfx	r7, r7, #3, #10
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint8_t __CLZ(uint32_t value)
{
  uint32_t result;

  __ASM volatile ("clz %0, %1" : "=r" (result) : "r" (value) );
  40091a:	fab7 fe87 	clz	lr, r7
    wshift  = __CLZ(ways) & 0x1f;
  40091e:	f00e 0e1f 	and.w	lr, lr, #31
  __ASM volatile ("dsb");
  400922:	f3bf 8f4f 	dsb	sy
  400926:	f04f 34ff 	mov.w	r4, #4294967295
  40092a:	fa04 fc00 	lsl.w	ip, r4, r0
  40092e:	fa06 f000 	lsl.w	r0, r6, r0
  400932:	fa04 f40e 	lsl.w	r4, r4, lr
  400936:	fa07 fe0e 	lsl.w	lr, r7, lr

    do {                                    // invalidate D-Cache
         int32_t tmpways = ways;
         do {
              sw = ((tmpways << wshift) | (sets << sshift));
              SCB->DCISW = sw;
  40093a:	461d      	mov	r5, r3
         int32_t tmpways = ways;
  40093c:	463a      	mov	r2, r7
  40093e:	4673      	mov	r3, lr
              sw = ((tmpways << wshift) | (sets << sshift));
  400940:	ea40 0103 	orr.w	r1, r0, r3
              SCB->DCISW = sw;
  400944:	f8c5 1260 	str.w	r1, [r5, #608]	; 0x260
            } while(tmpways--);
  400948:	3a01      	subs	r2, #1
  40094a:	4423      	add	r3, r4
  40094c:	f1b2 3fff 	cmp.w	r2, #4294967295
  400950:	d1f6      	bne.n	400940 <board_init+0x64>
        } while(sets--);
  400952:	3e01      	subs	r6, #1
  400954:	4460      	add	r0, ip
  400956:	f1b6 3fff 	cmp.w	r6, #4294967295
  40095a:	d1ef      	bne.n	40093c <board_init+0x60>
  40095c:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  SCB_CCR_DC_Msk;            // enable D-Cache
  400960:	4b80      	ldr	r3, [pc, #512]	; (400b64 <board_init+0x288>)
  400962:	695a      	ldr	r2, [r3, #20]
  400964:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
  400968:	615a      	str	r2, [r3, #20]
  40096a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  40096e:	f3bf 8f6f 	isb	sy
		*dst++ = *src++;
	}
#endif
#else
	/* TCM Configuration */
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400972:	4a7d      	ldr	r2, [pc, #500]	; (400b68 <board_init+0x28c>)
  400974:	497d      	ldr	r1, [pc, #500]	; (400b6c <board_init+0x290>)
  400976:	6051      	str	r1, [r2, #4]
					| EEFC_FCR_FARG(8));
	EFC->EEFC_FCR = (EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FCMD_CGPB 
  400978:	f5a1 7180 	sub.w	r1, r1, #256	; 0x100
  40097c:	6051      	str	r1, [r2, #4]
  __ASM volatile ("dsb");
  40097e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  400982:	f3bf 8f6f 	isb	sy
	SCB->ITCMCR &= ~(uint32_t)(1UL);
  400986:	f8d3 2290 	ldr.w	r2, [r3, #656]	; 0x290
  40098a:	f022 0201 	bic.w	r2, r2, #1
  40098e:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
	SCB->DTCMCR &= ~(uint32_t)SCB_DTCMCR_EN_Msk;
  400992:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
  400996:	f022 0201 	bic.w	r2, r2, #1
  40099a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  __ASM volatile ("dsb");
  40099e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009a2:	f3bf 8f6f 	isb	sy
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
  4009a6:	200a      	movs	r0, #10
  4009a8:	4c71      	ldr	r4, [pc, #452]	; (400b70 <board_init+0x294>)
  4009aa:	47a0      	blx	r4
  4009ac:	200b      	movs	r0, #11
  4009ae:	47a0      	blx	r4
  4009b0:	200c      	movs	r0, #12
  4009b2:	47a0      	blx	r4
  4009b4:	2010      	movs	r0, #16
  4009b6:	47a0      	blx	r4
  4009b8:	2011      	movs	r0, #17
  4009ba:	47a0      	blx	r4
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
  4009bc:	4e6d      	ldr	r6, [pc, #436]	; (400b74 <board_init+0x298>)
  4009be:	f44f 7880 	mov.w	r8, #256	; 0x100
  4009c2:	f8c6 8010 	str.w	r8, [r6, #16]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009c6:	f8c6 80a0 	str.w	r8, [r6, #160]	; 0xa0
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
  4009ca:	f8c6 8030 	str.w	r8, [r6, #48]	; 0x30
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
  4009ce:	4c6a      	ldr	r4, [pc, #424]	; (400b78 <board_init+0x29c>)
  4009d0:	f44f 6500 	mov.w	r5, #2048	; 0x800
  4009d4:	6165      	str	r5, [r4, #20]
	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
  4009d6:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		base->PIO_PUER = mask;
  4009da:	6665      	str	r5, [r4, #100]	; 0x64
		base->PIO_PPDDR = mask;
  4009dc:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  4009e0:	6565      	str	r5, [r4, #84]	; 0x54
		base->PIO_IFER = mask;
  4009e2:	6225      	str	r5, [r4, #32]
		base->PIO_IFSCER = mask;
  4009e4:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
		base->PIO_ABCDSR[0] &= ~mask;
  4009e8:	6f23      	ldr	r3, [r4, #112]	; 0x70
  4009ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4009ee:	6723      	str	r3, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  4009f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
  4009f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  4009f6:	6763      	str	r3, [r4, #116]	; 0x74
	case IOPORT_SENSE_FALLING:
		base->PIO_ESR = mask;
		base->PIO_FELLSR = mask;
		break;
	case IOPORT_SENSE_RISING:
		base->PIO_ESR = mask;
  4009f8:	f8c4 50c0 	str.w	r5, [r4, #192]	; 0xc0
		base->PIO_REHLSR = mask;
  4009fc:	f8c4 50d4 	str.w	r5, [r4, #212]	; 0xd4
		break;
	default:
		base->PIO_AIMDR = mask;
		return;
	}
	base->PIO_AIMER = mask;
  400a00:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		base->PIO_PUDR = mask;
  400a04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  400a08:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400a0a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a0e:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a10:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a12:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a16:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400a18:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400a1c:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a1e:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400a20:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  400a24:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a26:	6063      	str	r3, [r4, #4]
			GPIO_PUSH_BUTTON_1_SENSE);

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_pin_peripheral_mode(USART1_RXD_GPIO, USART1_RXD_FLAGS);
	MATRIX->CCFG_SYSIO |= CCFG_SYSIO_SYSIO4;
  400a28:	4a54      	ldr	r2, [pc, #336]	; (400b7c <board_init+0x2a0>)
  400a2a:	f8d2 3114 	ldr.w	r3, [r2, #276]	; 0x114
  400a2e:	f043 0310 	orr.w	r3, r3, #16
  400a32:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
		base->PIO_PUDR = mask;
  400a36:	f502 22b2 	add.w	r2, r2, #364544	; 0x59000
  400a3a:	2310      	movs	r3, #16
  400a3c:	6613      	str	r3, [r2, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a42:	6553      	str	r3, [r2, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a44:	6253      	str	r3, [r2, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		base->PIO_ABCDSR[0] |= mask;
  400a4a:	6f11      	ldr	r1, [r2, #112]	; 0x70
  400a4c:	4319      	orrs	r1, r3
  400a4e:	6711      	str	r1, [r2, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
  400a50:	6f51      	ldr	r1, [r2, #116]	; 0x74
  400a52:	4319      	orrs	r1, r3
  400a54:	6751      	str	r1, [r2, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a56:	6053      	str	r3, [r2, #4]
		base->PIO_PUDR = mask;
  400a58:	2208      	movs	r2, #8
  400a5a:	6622      	str	r2, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400a5c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a60:	6562      	str	r2, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a62:	6262      	str	r2, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a64:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a68:	6f21      	ldr	r1, [r4, #112]	; 0x70
  400a6a:	f021 0108 	bic.w	r1, r1, #8
  400a6e:	6721      	str	r1, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a70:	6f61      	ldr	r1, [r4, #116]	; 0x74
  400a72:	f021 0108 	bic.w	r1, r1, #8
  400a76:	6761      	str	r1, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a78:	6062      	str	r2, [r4, #4]
		base->PIO_PUDR = mask;
  400a7a:	6623      	str	r3, [r4, #96]	; 0x60
		base->PIO_PPDDR = mask;
  400a7c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		base->PIO_MDDR = mask;
  400a80:	6563      	str	r3, [r4, #84]	; 0x54
		base->PIO_IFDR = mask;
  400a82:	6263      	str	r3, [r4, #36]	; 0x24
		base->PIO_IFSCDR = mask;
  400a84:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
		base->PIO_ABCDSR[0] &= ~mask;
  400a88:	6f22      	ldr	r2, [r4, #112]	; 0x70
  400a8a:	f022 0210 	bic.w	r2, r2, #16
  400a8e:	6722      	str	r2, [r4, #112]	; 0x70
		base->PIO_ABCDSR[1] &= ~mask;
  400a90:	6f62      	ldr	r2, [r4, #116]	; 0x74
  400a92:	f022 0210 	bic.w	r2, r2, #16
  400a96:	6762      	str	r2, [r4, #116]	; 0x74
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
  400a98:	6063      	str	r3, [r4, #4]
	ioport_set_pin_mode(SD_MMC_0_CD_GPIO, SD_MMC_0_CD_FLAGS);
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on EBI*/
	pio_configure(PIN_EBI_RESET_PIO, PIN_EBI_RESET_TYPE, PIN_EBI_RESET_MASK, PIN_EBI_RESET_ATTRI);
  400a9a:	2300      	movs	r3, #0
  400a9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400aa0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400aa4:	4630      	mov	r0, r6
  400aa6:	4f36      	ldr	r7, [pc, #216]	; (400b80 <board_init+0x2a4>)
  400aa8:	47b8      	blx	r7
	pio_configure(PIN_EBI_CDS_PIO, PIN_EBI_CDS_TYPE, PIN_EBI_CDS_MASK, PIN_EBI_CDS_ATTRI);
  400aaa:	2300      	movs	r3, #0
  400aac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400ab0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400ab4:	4630      	mov	r0, r6
  400ab6:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAL_PIO, PIN_EBI_DATAL_TYPE, PIN_EBI_DATAL_MASK, PIN_EBI_DATAL_ATTRI);
  400ab8:	2301      	movs	r3, #1
  400aba:	22ff      	movs	r2, #255	; 0xff
  400abc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ac0:	4630      	mov	r0, r6
  400ac2:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_0_PIO, PIN_EBI_DATAH_0_TYPE, PIN_EBI_DATAH_0_MASK, PIN_EBI_DATAH_0_ATTRI);
  400ac4:	2301      	movs	r3, #1
  400ac6:	223f      	movs	r2, #63	; 0x3f
  400ac8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400acc:	482d      	ldr	r0, [pc, #180]	; (400b84 <board_init+0x2a8>)
  400ace:	47b8      	blx	r7
	pio_configure(PIN_EBI_DATAH_1_PIO, PIN_EBI_DATAH_1_TYPE, PIN_EBI_DATAH_1_MASK, PIN_EBI_DATAH_1_ATTRI);
  400ad0:	2301      	movs	r3, #1
  400ad2:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  400ad6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ada:	4620      	mov	r0, r4
  400adc:	47b8      	blx	r7
	pio_configure(PIN_EBI_NWE_PIO, PIN_EBI_NWE_TYPE, PIN_EBI_NWE_MASK, PIN_EBI_NWE_ATTRI);
  400ade:	2301      	movs	r3, #1
  400ae0:	4642      	mov	r2, r8
  400ae2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400ae6:	4630      	mov	r0, r6
  400ae8:	47b8      	blx	r7
	pio_configure(PIN_EBI_NRD_PIO, PIN_EBI_NRD_TYPE, PIN_EBI_NRD_MASK, PIN_EBI_NRD_ATTRI);
  400aea:	2301      	movs	r3, #1
  400aec:	462a      	mov	r2, r5
  400aee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400af2:	4630      	mov	r0, r6
  400af4:	47b8      	blx	r7
	pio_configure(PIN_EBI_CS_PIO, PIN_EBI_CS_TYPE, PIN_EBI_CS_MASK, PIN_EBI_CS_ATTRI);
  400af6:	2301      	movs	r3, #1
  400af8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400afc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  400b00:	4821      	ldr	r0, [pc, #132]	; (400b88 <board_init+0x2ac>)
  400b02:	47b8      	blx	r7
	pio_configure(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_TYPE, PIN_EBI_BACKLIGHT_MASK, PIN_EBI_BACKLIGHT_ATTRI);
  400b04:	2300      	movs	r3, #0
  400b06:	f44f 7200 	mov.w	r2, #512	; 0x200
  400b0a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b0e:	4630      	mov	r0, r6
  400b10:	47b8      	blx	r7
	pio_set(PIN_EBI_BACKLIGHT_PIO, PIN_EBI_BACKLIGHT_MASK);
  400b12:	f44f 7100 	mov.w	r1, #512	; 0x200
  400b16:	4630      	mov	r0, r6
  400b18:	4b1c      	ldr	r3, [pc, #112]	; (400b8c <board_init+0x2b0>)
  400b1a:	4798      	blx	r3
	MATRIX->CCFG_SMCNFCS = CCFG_SMCNFCS_SDRAMEN;
#endif

#ifdef CONF_BOARD_ILI9488
	/**LCD pin configure on SPI*/
	pio_configure_pin(LCD_SPI_MISO_PIO, LCD_SPI_MISO_FLAGS);
  400b1c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b20:	2074      	movs	r0, #116	; 0x74
  400b22:	4c1b      	ldr	r4, [pc, #108]	; (400b90 <board_init+0x2b4>)
  400b24:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_MOSI_PIO, LCD_SPI_MOSI_FLAGS);
  400b26:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b2a:	2075      	movs	r0, #117	; 0x75
  400b2c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_SPCK_PIO, LCD_SPI_SPCK_FLAGS);
  400b2e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b32:	2076      	movs	r0, #118	; 0x76
  400b34:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_NPCS_PIO, LCD_SPI_NPCS_FLAGS);
  400b36:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  400b3a:	207b      	movs	r0, #123	; 0x7b
  400b3c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_RESET_PIO, LCD_SPI_RESET_FLAGS);
  400b3e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400b42:	2018      	movs	r0, #24
  400b44:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_CDS_PIO, LCD_SPI_CDS_FLAGS);
  400b46:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400b4a:	2006      	movs	r0, #6
  400b4c:	47a0      	blx	r4
	pio_configure_pin(LCD_SPI_BACKLIGHT_PIO, LCD_SPI_BACKLIGHT_FLAGS);
  400b4e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  400b52:	2053      	movs	r0, #83	; 0x53
  400b54:	47a0      	blx	r4
	pio_set_pin_high(LCD_SPI_BACKLIGHT_PIO);
  400b56:	2053      	movs	r0, #83	; 0x53
  400b58:	4b0e      	ldr	r3, [pc, #56]	; (400b94 <board_init+0x2b8>)
  400b5a:	4798      	blx	r3
  400b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400b60:	400e1850 	.word	0x400e1850
  400b64:	e000ed00 	.word	0xe000ed00
  400b68:	400e0c00 	.word	0x400e0c00
  400b6c:	5a00080c 	.word	0x5a00080c
  400b70:	00401609 	.word	0x00401609
  400b74:	400e1200 	.word	0x400e1200
  400b78:	400e0e00 	.word	0x400e0e00
  400b7c:	40088000 	.word	0x40088000
  400b80:	00401235 	.word	0x00401235
  400b84:	400e1600 	.word	0x400e1600
  400b88:	400e1400 	.word	0x400e1400
  400b8c:	00401141 	.word	0x00401141
  400b90:	00401305 	.word	0x00401305
  400b94:	004012cd 	.word	0x004012cd

00400b98 <ili9488_check_box_coordinates>:
 * \param p_ul_x2 X coordinate of lower-right corner on LCD.
 * \param p_ul_y2 Y coordinate of lower-right corner on LCD.
 */
static void ili9488_check_box_coordinates(uint32_t *p_ul_x1, uint32_t *p_ul_y1,
		uint32_t *p_ul_x2, uint32_t *p_ul_y2)
{
  400b98:	b430      	push	{r4, r5}
	uint32_t dw;

	if (*p_ul_x1 >= ILI9488_LCD_WIDTH) {
  400b9a:	6804      	ldr	r4, [r0, #0]
  400b9c:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400ba0:	d302      	bcc.n	400ba8 <ili9488_check_box_coordinates+0x10>
		*p_ul_x1 = ILI9488_LCD_WIDTH - 1;
  400ba2:	f240 143f 	movw	r4, #319	; 0x13f
  400ba6:	6004      	str	r4, [r0, #0]
	}

	if (*p_ul_x2 >= ILI9488_LCD_WIDTH) {
  400ba8:	6814      	ldr	r4, [r2, #0]
  400baa:	f5b4 7fa0 	cmp.w	r4, #320	; 0x140
  400bae:	d302      	bcc.n	400bb6 <ili9488_check_box_coordinates+0x1e>
		*p_ul_x2 = ILI9488_LCD_WIDTH - 1;
  400bb0:	f240 143f 	movw	r4, #319	; 0x13f
  400bb4:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 >= ILI9488_LCD_HEIGHT) {
  400bb6:	680c      	ldr	r4, [r1, #0]
  400bb8:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400bbc:	d302      	bcc.n	400bc4 <ili9488_check_box_coordinates+0x2c>
		*p_ul_y1 = ILI9488_LCD_HEIGHT - 1;
  400bbe:	f240 14df 	movw	r4, #479	; 0x1df
  400bc2:	600c      	str	r4, [r1, #0]
	}

	if (*p_ul_y2 >= ILI9488_LCD_HEIGHT) {
  400bc4:	681c      	ldr	r4, [r3, #0]
  400bc6:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
  400bca:	d302      	bcc.n	400bd2 <ili9488_check_box_coordinates+0x3a>
		*p_ul_y2 = ILI9488_LCD_HEIGHT - 1;
  400bcc:	f240 14df 	movw	r4, #479	; 0x1df
  400bd0:	601c      	str	r4, [r3, #0]
	}

	if (*p_ul_x1 > *p_ul_x2) {
  400bd2:	6804      	ldr	r4, [r0, #0]
  400bd4:	6815      	ldr	r5, [r2, #0]
  400bd6:	42ac      	cmp	r4, r5
  400bd8:	d901      	bls.n	400bde <ili9488_check_box_coordinates+0x46>
		dw = *p_ul_x1;
		*p_ul_x1 = *p_ul_x2;
  400bda:	6005      	str	r5, [r0, #0]
		*p_ul_x2 = dw;
  400bdc:	6014      	str	r4, [r2, #0]
	}

	if (*p_ul_y1 > *p_ul_y2) {
  400bde:	680a      	ldr	r2, [r1, #0]
  400be0:	6818      	ldr	r0, [r3, #0]
  400be2:	4282      	cmp	r2, r0
  400be4:	d901      	bls.n	400bea <ili9488_check_box_coordinates+0x52>
		dw = *p_ul_y1;
		*p_ul_y1 = *p_ul_y2;
  400be6:	6008      	str	r0, [r1, #0]
		*p_ul_y2 = dw;
  400be8:	601a      	str	r2, [r3, #0]
	}
}
  400bea:	bc30      	pop	{r4, r5}
  400bec:	4770      	bx	lr
	...

00400bf0 <ili9488_write_ram_prepare>:
{
  400bf0:	b510      	push	{r4, lr}
  400bf2:	b082      	sub	sp, #8
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400bf4:	2006      	movs	r0, #6
  400bf6:	4b0a      	ldr	r3, [pc, #40]	; (400c20 <ili9488_write_ram_prepare+0x30>)
  400bf8:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, ILI9488_CMD_MEMORY_WRITE, BOARD_ILI9488_SPI_NPCS, 0);
  400bfa:	2300      	movs	r3, #0
  400bfc:	2203      	movs	r2, #3
  400bfe:	212c      	movs	r1, #44	; 0x2c
  400c00:	4808      	ldr	r0, [pc, #32]	; (400c24 <ili9488_write_ram_prepare+0x34>)
  400c02:	4c09      	ldr	r4, [pc, #36]	; (400c28 <ili9488_write_ram_prepare+0x38>)
  400c04:	47a0      	blx	r4
	for(i = 0; i < 0xFF; i++);
  400c06:	2300      	movs	r3, #0
  400c08:	9301      	str	r3, [sp, #4]
  400c0a:	9b01      	ldr	r3, [sp, #4]
  400c0c:	2bfe      	cmp	r3, #254	; 0xfe
  400c0e:	d805      	bhi.n	400c1c <ili9488_write_ram_prepare+0x2c>
  400c10:	9b01      	ldr	r3, [sp, #4]
  400c12:	3301      	adds	r3, #1
  400c14:	9301      	str	r3, [sp, #4]
  400c16:	9b01      	ldr	r3, [sp, #4]
  400c18:	2bfe      	cmp	r3, #254	; 0xfe
  400c1a:	d9f9      	bls.n	400c10 <ili9488_write_ram_prepare+0x20>
}
  400c1c:	b002      	add	sp, #8
  400c1e:	bd10      	pop	{r4, pc}
  400c20:	004012e9 	.word	0x004012e9
  400c24:	40008000 	.word	0x40008000
  400c28:	0040167d 	.word	0x0040167d

00400c2c <ili9488_write_register>:
{
  400c2c:	b570      	push	{r4, r5, r6, lr}
  400c2e:	b082      	sub	sp, #8
  400c30:	4605      	mov	r5, r0
  400c32:	460e      	mov	r6, r1
  400c34:	4614      	mov	r4, r2
	pio_set_pin_low(LCD_SPI_CDS_PIO);
  400c36:	2006      	movs	r0, #6
  400c38:	4b14      	ldr	r3, [pc, #80]	; (400c8c <ili9488_write_register+0x60>)
  400c3a:	4798      	blx	r3
	spi_write(BOARD_ILI9488_SPI, uc_reg, BOARD_ILI9488_SPI_NPCS, 0);
  400c3c:	2300      	movs	r3, #0
  400c3e:	2203      	movs	r2, #3
  400c40:	4629      	mov	r1, r5
  400c42:	4813      	ldr	r0, [pc, #76]	; (400c90 <ili9488_write_register+0x64>)
  400c44:	4d13      	ldr	r5, [pc, #76]	; (400c94 <ili9488_write_register+0x68>)
  400c46:	47a8      	blx	r5
	for(i = 0; i < 0xFF; i++);
  400c48:	2300      	movs	r3, #0
  400c4a:	9301      	str	r3, [sp, #4]
  400c4c:	9b01      	ldr	r3, [sp, #4]
  400c4e:	2bfe      	cmp	r3, #254	; 0xfe
  400c50:	d805      	bhi.n	400c5e <ili9488_write_register+0x32>
  400c52:	9b01      	ldr	r3, [sp, #4]
  400c54:	3301      	adds	r3, #1
  400c56:	9301      	str	r3, [sp, #4]
  400c58:	9b01      	ldr	r3, [sp, #4]
  400c5a:	2bfe      	cmp	r3, #254	; 0xfe
  400c5c:	d9f9      	bls.n	400c52 <ili9488_write_register+0x26>
	if(size > 0) {
  400c5e:	b90c      	cbnz	r4, 400c64 <ili9488_write_register+0x38>
}
  400c60:	b002      	add	sp, #8
  400c62:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_pin_high(LCD_SPI_CDS_PIO);
  400c64:	2006      	movs	r0, #6
  400c66:	4b0c      	ldr	r3, [pc, #48]	; (400c98 <ili9488_write_register+0x6c>)
  400c68:	4798      	blx	r3
		spi_write_packet(BOARD_ILI9488_SPI, us_data, size);
  400c6a:	4622      	mov	r2, r4
  400c6c:	4631      	mov	r1, r6
  400c6e:	4808      	ldr	r0, [pc, #32]	; (400c90 <ili9488_write_register+0x64>)
  400c70:	4b0a      	ldr	r3, [pc, #40]	; (400c9c <ili9488_write_register+0x70>)
  400c72:	4798      	blx	r3
		for(i = 0; i < 0x5F; i++);
  400c74:	2300      	movs	r3, #0
  400c76:	9301      	str	r3, [sp, #4]
  400c78:	9b01      	ldr	r3, [sp, #4]
  400c7a:	2b5e      	cmp	r3, #94	; 0x5e
  400c7c:	d8f0      	bhi.n	400c60 <ili9488_write_register+0x34>
  400c7e:	9b01      	ldr	r3, [sp, #4]
  400c80:	3301      	adds	r3, #1
  400c82:	9301      	str	r3, [sp, #4]
  400c84:	9b01      	ldr	r3, [sp, #4]
  400c86:	2b5e      	cmp	r3, #94	; 0x5e
  400c88:	d9f9      	bls.n	400c7e <ili9488_write_register+0x52>
  400c8a:	e7e9      	b.n	400c60 <ili9488_write_register+0x34>
  400c8c:	004012e9 	.word	0x004012e9
  400c90:	40008000 	.word	0x40008000
  400c94:	0040167d 	.word	0x0040167d
  400c98:	004012cd 	.word	0x004012cd
  400c9c:	004007c5 	.word	0x004007c5

00400ca0 <ili9488_write_ram_buffer>:
{
  400ca0:	b530      	push	{r4, r5, lr}
  400ca2:	b083      	sub	sp, #12
  400ca4:	4604      	mov	r4, r0
  400ca6:	460d      	mov	r5, r1
	pio_set_pin_high(LCD_SPI_CDS_PIO);
  400ca8:	2006      	movs	r0, #6
  400caa:	4b0a      	ldr	r3, [pc, #40]	; (400cd4 <ili9488_write_ram_buffer+0x34>)
  400cac:	4798      	blx	r3
	spi_write_packet(BOARD_ILI9488_SPI, p_ul_buf, ul_size);
  400cae:	462a      	mov	r2, r5
  400cb0:	4621      	mov	r1, r4
  400cb2:	4809      	ldr	r0, [pc, #36]	; (400cd8 <ili9488_write_ram_buffer+0x38>)
  400cb4:	4b09      	ldr	r3, [pc, #36]	; (400cdc <ili9488_write_ram_buffer+0x3c>)
  400cb6:	4798      	blx	r3
	for(i = 0; i < 0xFF; i++);
  400cb8:	2300      	movs	r3, #0
  400cba:	9301      	str	r3, [sp, #4]
  400cbc:	9b01      	ldr	r3, [sp, #4]
  400cbe:	2bfe      	cmp	r3, #254	; 0xfe
  400cc0:	d805      	bhi.n	400cce <ili9488_write_ram_buffer+0x2e>
  400cc2:	9b01      	ldr	r3, [sp, #4]
  400cc4:	3301      	adds	r3, #1
  400cc6:	9301      	str	r3, [sp, #4]
  400cc8:	9b01      	ldr	r3, [sp, #4]
  400cca:	2bfe      	cmp	r3, #254	; 0xfe
  400ccc:	d9f9      	bls.n	400cc2 <ili9488_write_ram_buffer+0x22>
}
  400cce:	b003      	add	sp, #12
  400cd0:	bd30      	pop	{r4, r5, pc}
  400cd2:	bf00      	nop
  400cd4:	004012cd 	.word	0x004012cd
  400cd8:	40008000 	.word	0x40008000
  400cdc:	004007c5 	.word	0x004007c5

00400ce0 <ili9488_delay>:
	for(i = 0; i < ul_ms; i++) {
  400ce0:	4601      	mov	r1, r0
  400ce2:	b130      	cbz	r0, 400cf2 <ili9488_delay+0x12>
  400ce4:	4a03      	ldr	r2, [pc, #12]	; (400cf4 <ili9488_delay+0x14>)
{
  400ce6:	4b04      	ldr	r3, [pc, #16]	; (400cf8 <ili9488_delay+0x18>)
		for(i = 0; i < 100000; i++) {
  400ce8:	3b01      	subs	r3, #1
  400cea:	d1fd      	bne.n	400ce8 <ili9488_delay+0x8>
	for(i = 0; i < ul_ms; i++) {
  400cec:	4291      	cmp	r1, r2
  400cee:	d8fa      	bhi.n	400ce6 <ili9488_delay+0x6>
  400cf0:	4770      	bx	lr
  400cf2:	4770      	bx	lr
  400cf4:	000186a1 	.word	0x000186a1
  400cf8:	000186a0 	.word	0x000186a0

00400cfc <ili9488_set_display_direction>:
 * \brief ILI9488 configure landscape.
 *
 * \Param LandscaprMode Landscape Mode.
 */
void ili9488_set_display_direction(enum ili9488_display_direction direction )
{
  400cfc:	b500      	push	{lr}
  400cfe:	b083      	sub	sp, #12
	ili9488_color_t value;
	if(direction) {
  400d00:	b958      	cbnz	r0, 400d1a <ili9488_set_display_direction+0x1e>
		value = 0xE8;
	} else {
		value = 0x48;
  400d02:	2348      	movs	r3, #72	; 0x48
  400d04:	f88d 3007 	strb.w	r3, [sp, #7]
	}
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &value, 1);
  400d08:	2201      	movs	r2, #1
  400d0a:	f10d 0107 	add.w	r1, sp, #7
  400d0e:	2036      	movs	r0, #54	; 0x36
  400d10:	4b04      	ldr	r3, [pc, #16]	; (400d24 <ili9488_set_display_direction+0x28>)
  400d12:	4798      	blx	r3
}
  400d14:	b003      	add	sp, #12
  400d16:	f85d fb04 	ldr.w	pc, [sp], #4
		value = 0xE8;
  400d1a:	23e8      	movs	r3, #232	; 0xe8
  400d1c:	f88d 3007 	strb.w	r3, [sp, #7]
  400d20:	e7f2      	b.n	400d08 <ili9488_set_display_direction+0xc>
  400d22:	bf00      	nop
  400d24:	00400c2d 	.word	0x00400c2d

00400d28 <ili9488_set_window>:
 * \Param y start position.
 * \Param width  Width of window.
 * \Param height Height of window.
 */
void ili9488_set_window(uint16_t x, uint16_t y, uint16_t width, uint16_t height )
{
  400d28:	b510      	push	{r4, lr}
  400d2a:	b084      	sub	sp, #16
	uint32_t cnt = 0;
	ili9488_color_t buf[4];

	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	col_start  =  x ;
  400d2c:	f8ad 000e 	strh.w	r0, [sp, #14]
	col_end    =  width + x - 1;
  400d30:	3a01      	subs	r2, #1
  400d32:	4402      	add	r2, r0
  400d34:	f8ad 200c 	strh.w	r2, [sp, #12]

	row_start = y ;
  400d38:	f8ad 100a 	strh.w	r1, [sp, #10]
	row_end   = height + y - 1;
  400d3c:	3b01      	subs	r3, #1
  400d3e:	4419      	add	r1, r3
  400d40:	f8ad 1008 	strh.w	r1, [sp, #8]

	buf[0] = get_8b_to_16b(col_start);
  400d44:	0a03      	lsrs	r3, r0, #8
  400d46:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(col_start);
  400d4a:	f88d 0005 	strb.w	r0, [sp, #5]
	buf[2] = get_8b_to_16b(col_end);
  400d4e:	f3c2 2307 	ubfx	r3, r2, #8, #8
  400d52:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(col_end);
  400d56:	f88d 2007 	strb.w	r2, [sp, #7]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400d5a:	2204      	movs	r2, #4
  400d5c:	eb0d 0102 	add.w	r1, sp, r2
  400d60:	202a      	movs	r0, #42	; 0x2a
  400d62:	4c10      	ldr	r4, [pc, #64]	; (400da4 <ili9488_set_window+0x7c>)
  400d64:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400d66:	2200      	movs	r2, #0
  400d68:	4611      	mov	r1, r2
  400d6a:	4610      	mov	r0, r2
  400d6c:	47a0      	blx	r4

	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(row_start);
  400d6e:	f89d 300b 	ldrb.w	r3, [sp, #11]
  400d72:	f88d 3004 	strb.w	r3, [sp, #4]
	buf[1] = get_0b_to_8b(row_start);
  400d76:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400d7a:	f88d 3005 	strb.w	r3, [sp, #5]
	buf[2] = get_8b_to_16b(row_end);
  400d7e:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400d82:	f88d 3006 	strb.w	r3, [sp, #6]
	buf[3] = get_0b_to_8b(row_end);
  400d86:	f89d 3008 	ldrb.w	r3, [sp, #8]
  400d8a:	f88d 3007 	strb.w	r3, [sp, #7]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400d8e:	2204      	movs	r2, #4
  400d90:	eb0d 0102 	add.w	r1, sp, r2
  400d94:	202b      	movs	r0, #43	; 0x2b
  400d96:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400d98:	2200      	movs	r2, #0
  400d9a:	4611      	mov	r1, r2
  400d9c:	4610      	mov	r0, r2
  400d9e:	47a0      	blx	r4
}
  400da0:	b004      	add	sp, #16
  400da2:	bd10      	pop	{r4, pc}
  400da4:	00400c2d 	.word	0x00400c2d

00400da8 <ili9488_display_on>:

/**
 * \brief Turn on the LCD.
 */
void ili9488_display_on(void)
{
  400da8:	b508      	push	{r3, lr}
	ili9488_write_register(ILI9488_CMD_DISPLAY_ON, 0, 0);
  400daa:	2200      	movs	r2, #0
  400dac:	4611      	mov	r1, r2
  400dae:	2029      	movs	r0, #41	; 0x29
  400db0:	4b01      	ldr	r3, [pc, #4]	; (400db8 <ili9488_display_on+0x10>)
  400db2:	4798      	blx	r3
  400db4:	bd08      	pop	{r3, pc}
  400db6:	bf00      	nop
  400db8:	00400c2d 	.word	0x00400c2d

00400dbc <ili9488_set_foreground_color>:
 * \brief Set foreground color.
 *
 * \param ul_color foreground color.
 */
void ili9488_set_foreground_color(uint32_t ul_color)
{
  400dbc:	b410      	push	{r4}
		g_ul_pixel_cache[i] = ul_color;
	}
#endif
#ifdef ILI9488_SPIMODE
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
		g_ul_pixel_cache[i++] = ul_color>>16;
  400dbe:	f3c0 4407 	ubfx	r4, r0, #16, #8
		g_ul_pixel_cache[i++] = ul_color>>8;
  400dc2:	f3c0 2107 	ubfx	r1, r0, #8, #8
  400dc6:	4b06      	ldr	r3, [pc, #24]	; (400de0 <ili9488_set_foreground_color+0x24>)
  400dc8:	f503 7270 	add.w	r2, r3, #960	; 0x3c0
		g_ul_pixel_cache[i++] = ul_color>>16;
  400dcc:	701c      	strb	r4, [r3, #0]
		g_ul_pixel_cache[i++] = ul_color>>8;
  400dce:	7059      	strb	r1, [r3, #1]
		g_ul_pixel_cache[i++] = ul_color&0xFF;
  400dd0:	7098      	strb	r0, [r3, #2]
  400dd2:	3303      	adds	r3, #3
	for (i = 0; i < LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT; ) {
  400dd4:	4293      	cmp	r3, r2
  400dd6:	d1f9      	bne.n	400dcc <ili9488_set_foreground_color+0x10>
	}
#endif
}
  400dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
  400ddc:	4770      	bx	lr
  400dde:	bf00      	nop
  400de0:	204009e4 	.word	0x204009e4

00400de4 <ili9488_set_cursor_position>:
 *
 * \param x X coordinate of upper-left corner on LCD.
 * \param y Y coordinate of upper-left corner on LCD.
 */
void ili9488_set_cursor_position(uint16_t x, uint16_t y)
{
  400de4:	b510      	push	{r4, lr}
  400de6:	b084      	sub	sp, #16
  400de8:	f8ad 0006 	strh.w	r0, [sp, #6]
  400dec:	f8ad 1004 	strh.w	r1, [sp, #4]
	uint32_t cnt = 0;

	ili9488_color_t buf[4];
	cnt = sizeof(buf)/sizeof(ili9488_color_t);

	buf[0] = get_8b_to_16b(x);
  400df0:	0a03      	lsrs	r3, r0, #8
  400df2:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[1] = get_0b_to_8b(x);
  400df6:	b2c0      	uxtb	r0, r0
  400df8:	f88d 000d 	strb.w	r0, [sp, #13]
	buf[2] = get_8b_to_16b(x);
  400dfc:	f88d 300e 	strb.w	r3, [sp, #14]
	buf[3] = get_0b_to_8b(x);
  400e00:	f88d 000f 	strb.w	r0, [sp, #15]
	ili9488_write_register(ILI9488_CMD_COLUMN_ADDRESS_SET, buf, cnt);
  400e04:	2204      	movs	r2, #4
  400e06:	a903      	add	r1, sp, #12
  400e08:	202a      	movs	r0, #42	; 0x2a
  400e0a:	4c0e      	ldr	r4, [pc, #56]	; (400e44 <ili9488_set_cursor_position+0x60>)
  400e0c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400e0e:	2200      	movs	r2, #0
  400e10:	4611      	mov	r1, r2
  400e12:	4610      	mov	r0, r2
  400e14:	47a0      	blx	r4


	/* Set Horizontal Address End Position */
	buf[0] = get_8b_to_16b(y);
  400e16:	f89d 2005 	ldrb.w	r2, [sp, #5]
  400e1a:	f88d 200c 	strb.w	r2, [sp, #12]
	buf[1] = get_0b_to_8b(y);
  400e1e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  400e22:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[2] = get_8b_to_16b(y);
  400e26:	f88d 200e 	strb.w	r2, [sp, #14]
	buf[3] = get_0b_to_8b(y);
  400e2a:	f88d 300f 	strb.w	r3, [sp, #15]
	ili9488_write_register(ILI9488_CMD_PAGE_ADDRESS_SET, buf, cnt);
  400e2e:	2204      	movs	r2, #4
  400e30:	a903      	add	r1, sp, #12
  400e32:	202b      	movs	r0, #43	; 0x2b
  400e34:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NOP, 0, 0);
  400e36:	2200      	movs	r2, #0
  400e38:	4611      	mov	r1, r2
  400e3a:	4610      	mov	r0, r2
  400e3c:	47a0      	blx	r4
}
  400e3e:	b004      	add	sp, #16
  400e40:	bd10      	pop	{r4, pc}
  400e42:	bf00      	nop
  400e44:	00400c2d 	.word	0x00400c2d

00400e48 <ili9488_init>:
{
  400e48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  400e4c:	b087      	sub	sp, #28
  400e4e:	4681      	mov	r9, r0
	struct spi_device ILI9488_SPI_DEVICE = {
  400e50:	2703      	movs	r7, #3
  400e52:	ae06      	add	r6, sp, #24
  400e54:	f846 7d08 	str.w	r7, [r6, #-8]!
	spi_master_init(BOARD_ILI9488_SPI);
  400e58:	4d5d      	ldr	r5, [pc, #372]	; (400fd0 <ili9488_init+0x188>)
  400e5a:	4628      	mov	r0, r5
  400e5c:	4b5d      	ldr	r3, [pc, #372]	; (400fd4 <ili9488_init+0x18c>)
  400e5e:	4798      	blx	r3
	spi_master_setup_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE, SPI_MODE_3, ILI9488_SPI_BAUDRATE, 0);
  400e60:	2400      	movs	r4, #0
  400e62:	9400      	str	r4, [sp, #0]
  400e64:	4b5c      	ldr	r3, [pc, #368]	; (400fd8 <ili9488_init+0x190>)
  400e66:	463a      	mov	r2, r7
  400e68:	4631      	mov	r1, r6
  400e6a:	4628      	mov	r0, r5
  400e6c:	f8df 8198 	ldr.w	r8, [pc, #408]	; 401008 <ili9488_init+0x1c0>
  400e70:	47c0      	blx	r8
	spi_configure_cs_behavior(BOARD_ILI9488_SPI, BOARD_ILI9488_SPI_NPCS, SPI_CS_RISE_NO_TX);
  400e72:	4622      	mov	r2, r4
  400e74:	4639      	mov	r1, r7
  400e76:	4628      	mov	r0, r5
  400e78:	4b58      	ldr	r3, [pc, #352]	; (400fdc <ili9488_init+0x194>)
  400e7a:	4798      	blx	r3
	spi_select_device(BOARD_ILI9488_SPI, &ILI9488_SPI_DEVICE);
  400e7c:	4631      	mov	r1, r6
  400e7e:	4628      	mov	r0, r5
  400e80:	4b57      	ldr	r3, [pc, #348]	; (400fe0 <ili9488_init+0x198>)
  400e82:	4798      	blx	r3
	p_spi->SPI_CR = SPI_CR_SPIEN;
  400e84:	2001      	movs	r0, #1
  400e86:	6028      	str	r0, [r5, #0]
 * \param p_spi Pointer to an SPI instance.
 * \param ul_sources Interrupts to be enabled.
 */
static inline void spi_enable_interrupt(Spi *p_spi, uint32_t ul_sources)
{
	p_spi->SPI_IER = ul_sources;
  400e88:	6168      	str	r0, [r5, #20]
	ili9488_write_register(ILI9488_CMD_SOFTWARE_RESET, 0x0000, 0);
  400e8a:	4622      	mov	r2, r4
  400e8c:	4621      	mov	r1, r4
  400e8e:	4e55      	ldr	r6, [pc, #340]	; (400fe4 <ili9488_init+0x19c>)
  400e90:	47b0      	blx	r6
	ili9488_delay(200);
  400e92:	20c8      	movs	r0, #200	; 0xc8
  400e94:	4d54      	ldr	r5, [pc, #336]	; (400fe8 <ili9488_init+0x1a0>)
  400e96:	47a8      	blx	r5
	ili9488_write_register(ILI9488_CMD_SLEEP_OUT, 0x0000, 0);
  400e98:	4622      	mov	r2, r4
  400e9a:	4621      	mov	r1, r4
  400e9c:	2011      	movs	r0, #17
  400e9e:	47b0      	blx	r6
	ili9488_delay(200);
  400ea0:	20c8      	movs	r0, #200	; 0xc8
  400ea2:	47a8      	blx	r5
	reg = 0x81;
  400ea4:	2381      	movs	r3, #129	; 0x81
  400ea6:	f88d 300a 	strb.w	r3, [sp, #10]
	param = 0x0;
  400eaa:	f88d 400b 	strb.w	r4, [sp, #11]
  400eae:	2610      	movs	r6, #16
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  400eb0:	f04f 0801 	mov.w	r8, #1
  400eb4:	4f4b      	ldr	r7, [pc, #300]	; (400fe4 <ili9488_init+0x19c>)
		for(j = 0; j < 0xFF; j++);
  400eb6:	4625      	mov	r5, r4
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &reg, 1);
  400eb8:	4642      	mov	r2, r8
  400eba:	f10d 010a 	add.w	r1, sp, #10
  400ebe:	20fb      	movs	r0, #251	; 0xfb
  400ec0:	47b8      	blx	r7
		reg++;
  400ec2:	f89d 300a 	ldrb.w	r3, [sp, #10]
  400ec6:	3301      	adds	r3, #1
  400ec8:	f88d 300a 	strb.w	r3, [sp, #10]
		for(j = 0; j < 0xFF; j++);
  400ecc:	9503      	str	r5, [sp, #12]
  400ece:	9b03      	ldr	r3, [sp, #12]
  400ed0:	2bfe      	cmp	r3, #254	; 0xfe
  400ed2:	d805      	bhi.n	400ee0 <ili9488_init+0x98>
  400ed4:	9b03      	ldr	r3, [sp, #12]
  400ed6:	3301      	adds	r3, #1
  400ed8:	9303      	str	r3, [sp, #12]
  400eda:	9b03      	ldr	r3, [sp, #12]
  400edc:	2bfe      	cmp	r3, #254	; 0xfe
  400ede:	d9f9      	bls.n	400ed4 <ili9488_init+0x8c>
		ili9488_write_register(ILI9488_CMD_READ_ID4, 0, 0);
  400ee0:	462a      	mov	r2, r5
  400ee2:	4629      	mov	r1, r5
  400ee4:	20d3      	movs	r0, #211	; 0xd3
  400ee6:	47b8      	blx	r7
			pio_set_pin_high(LCD_SPI_CDS_PIO);
  400ee8:	2006      	movs	r0, #6
  400eea:	4b40      	ldr	r3, [pc, #256]	; (400fec <ili9488_init+0x1a4>)
  400eec:	4798      	blx	r3
			spi_read_packet(BOARD_ILI9488_SPI, &chipidBuf, 1);
  400eee:	4642      	mov	r2, r8
  400ef0:	f10d 0109 	add.w	r1, sp, #9
  400ef4:	4836      	ldr	r0, [pc, #216]	; (400fd0 <ili9488_init+0x188>)
  400ef6:	4b3e      	ldr	r3, [pc, #248]	; (400ff0 <ili9488_init+0x1a8>)
  400ef8:	4798      	blx	r3
			for(j = 0; j < 0xFF; j++);
  400efa:	9503      	str	r5, [sp, #12]
  400efc:	9b03      	ldr	r3, [sp, #12]
  400efe:	2bfe      	cmp	r3, #254	; 0xfe
  400f00:	d805      	bhi.n	400f0e <ili9488_init+0xc6>
  400f02:	9b03      	ldr	r3, [sp, #12]
  400f04:	3301      	adds	r3, #1
  400f06:	9303      	str	r3, [sp, #12]
  400f08:	9b03      	ldr	r3, [sp, #12]
  400f0a:	2bfe      	cmp	r3, #254	; 0xfe
  400f0c:	d9f9      	bls.n	400f02 <ili9488_init+0xba>
		chipid |= (chipidBuf & 0xFF) << ((i - 1) << 3);
  400f0e:	f89d 3009 	ldrb.w	r3, [sp, #9]
  400f12:	40b3      	lsls	r3, r6
  400f14:	431c      	orrs	r4, r3
		ili9488_write_register(ILI9488_CMD_SPI_READ_SETTINGS, &param, 1);
  400f16:	4642      	mov	r2, r8
  400f18:	f10d 010b 	add.w	r1, sp, #11
  400f1c:	20fb      	movs	r0, #251	; 0xfb
  400f1e:	47b8      	blx	r7
		for(j = 0; j < 0xFFF; j++);
  400f20:	9503      	str	r5, [sp, #12]
  400f22:	9a03      	ldr	r2, [sp, #12]
  400f24:	f640 73fe 	movw	r3, #4094	; 0xffe
  400f28:	429a      	cmp	r2, r3
  400f2a:	d806      	bhi.n	400f3a <ili9488_init+0xf2>
  400f2c:	461a      	mov	r2, r3
  400f2e:	9b03      	ldr	r3, [sp, #12]
  400f30:	3301      	adds	r3, #1
  400f32:	9303      	str	r3, [sp, #12]
  400f34:	9b03      	ldr	r3, [sp, #12]
  400f36:	4293      	cmp	r3, r2
  400f38:	d9f9      	bls.n	400f2e <ili9488_init+0xe6>
  400f3a:	3e08      	subs	r6, #8
	for (i = 3; i > 0; i--) {
  400f3c:	f116 0f08 	cmn.w	r6, #8
  400f40:	d1ba      	bne.n	400eb8 <ili9488_init+0x70>
	if (chipid != ILI9488_DEVICE_CODE) {
  400f42:	f249 4388 	movw	r3, #38024	; 0x9488
  400f46:	429c      	cmp	r4, r3
  400f48:	d003      	beq.n	400f52 <ili9488_init+0x10a>
		return 1;
  400f4a:	2001      	movs	r0, #1
}
  400f4c:	b007      	add	sp, #28
  400f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	param = 0x48;
  400f52:	ad06      	add	r5, sp, #24
  400f54:	2348      	movs	r3, #72	; 0x48
  400f56:	f805 3d01 	strb.w	r3, [r5, #-1]!
	ili9488_write_register(ILI9488_CMD_MEMORY_ACCESS_CONTROL, &param, 1);
  400f5a:	2201      	movs	r2, #1
  400f5c:	4629      	mov	r1, r5
  400f5e:	2036      	movs	r0, #54	; 0x36
  400f60:	4e20      	ldr	r6, [pc, #128]	; (400fe4 <ili9488_init+0x19c>)
  400f62:	47b0      	blx	r6
	ili9488_delay(100);
  400f64:	2064      	movs	r0, #100	; 0x64
  400f66:	4c20      	ldr	r4, [pc, #128]	; (400fe8 <ili9488_init+0x1a0>)
  400f68:	47a0      	blx	r4
	param = 0x04;
  400f6a:	2304      	movs	r3, #4
  400f6c:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_CABC_CONTROL_9, &param, 1);
  400f70:	2201      	movs	r2, #1
  400f72:	4629      	mov	r1, r5
  400f74:	20cf      	movs	r0, #207	; 0xcf
  400f76:	47b0      	blx	r6
	ili9488_delay(100);
  400f78:	2064      	movs	r0, #100	; 0x64
  400f7a:	47a0      	blx	r4
	param = 0x06;
  400f7c:	2306      	movs	r3, #6
  400f7e:	f88d 3017 	strb.w	r3, [sp, #23]
	ili9488_write_register(ILI9488_CMD_COLMOD_PIXEL_FORMAT_SET, &param, 1);
  400f82:	2201      	movs	r2, #1
  400f84:	4629      	mov	r1, r5
  400f86:	203a      	movs	r0, #58	; 0x3a
  400f88:	47b0      	blx	r6
	ili9488_delay(100);
  400f8a:	2064      	movs	r0, #100	; 0x64
  400f8c:	47a0      	blx	r4
	ili9488_write_register(ILI9488_CMD_NORMAL_DISP_MODE_ON, 0, 0);
  400f8e:	2200      	movs	r2, #0
  400f90:	4611      	mov	r1, r2
  400f92:	2013      	movs	r0, #19
  400f94:	47b0      	blx	r6
	ili9488_delay(100);
  400f96:	2064      	movs	r0, #100	; 0x64
  400f98:	47a0      	blx	r4
	ili9488_display_on();
  400f9a:	4b16      	ldr	r3, [pc, #88]	; (400ff4 <ili9488_init+0x1ac>)
  400f9c:	4798      	blx	r3
	ili9488_delay(100);
  400f9e:	2064      	movs	r0, #100	; 0x64
  400fa0:	47a0      	blx	r4
	ili9488_set_display_direction(LANDSCAPE);
  400fa2:	2000      	movs	r0, #0
  400fa4:	4b14      	ldr	r3, [pc, #80]	; (400ff8 <ili9488_init+0x1b0>)
  400fa6:	4798      	blx	r3
	ili9488_delay(100);
  400fa8:	2064      	movs	r0, #100	; 0x64
  400faa:	47a0      	blx	r4
	ili9488_set_window(0, 0,p_opt->ul_width,p_opt->ul_height);
  400fac:	f8b9 3004 	ldrh.w	r3, [r9, #4]
  400fb0:	f8b9 2000 	ldrh.w	r2, [r9]
  400fb4:	2100      	movs	r1, #0
  400fb6:	4608      	mov	r0, r1
  400fb8:	4c10      	ldr	r4, [pc, #64]	; (400ffc <ili9488_init+0x1b4>)
  400fba:	47a0      	blx	r4
	ili9488_set_foreground_color(p_opt->foreground_color);
  400fbc:	f8d9 0008 	ldr.w	r0, [r9, #8]
  400fc0:	4b0f      	ldr	r3, [pc, #60]	; (401000 <ili9488_init+0x1b8>)
  400fc2:	4798      	blx	r3
	ili9488_set_cursor_position(0, 0);
  400fc4:	2100      	movs	r1, #0
  400fc6:	4608      	mov	r0, r1
  400fc8:	4b0e      	ldr	r3, [pc, #56]	; (401004 <ili9488_init+0x1bc>)
  400fca:	4798      	blx	r3
	return 0;
  400fcc:	2000      	movs	r0, #0
  400fce:	e7bd      	b.n	400f4c <ili9488_init+0x104>
  400fd0:	40008000 	.word	0x40008000
  400fd4:	004006c1 	.word	0x004006c1
  400fd8:	01312d00 	.word	0x01312d00
  400fdc:	004016ed 	.word	0x004016ed
  400fe0:	00400795 	.word	0x00400795
  400fe4:	00400c2d 	.word	0x00400c2d
  400fe8:	00400ce1 	.word	0x00400ce1
  400fec:	004012cd 	.word	0x004012cd
  400ff0:	004007fb 	.word	0x004007fb
  400ff4:	00400da9 	.word	0x00400da9
  400ff8:	00400cfd 	.word	0x00400cfd
  400ffc:	00400d29 	.word	0x00400d29
  401000:	00400dbd 	.word	0x00400dbd
  401004:	00400de5 	.word	0x00400de5
  401008:	00400715 	.word	0x00400715

0040100c <ili9488_draw_filled_rectangle>:
 * \param ul_x2 X coordinate of lower-right corner on LCD.
 * \param ul_y2 Y coordinate of lower-right corner on LCD.
 */
void ili9488_draw_filled_rectangle(uint32_t ul_x1, uint32_t ul_y1,
		uint32_t ul_x2, uint32_t ul_y2)
{
  40100c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401010:	b084      	sub	sp, #16
  401012:	9003      	str	r0, [sp, #12]
  401014:	9102      	str	r1, [sp, #8]
  401016:	9201      	str	r2, [sp, #4]
  401018:	aa04      	add	r2, sp, #16
  40101a:	f842 3d10 	str.w	r3, [r2, #-16]!
	uint32_t size, blocks;

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&ul_x1, &ul_y1, &ul_x2, &ul_y2);
  40101e:	4613      	mov	r3, r2
  401020:	aa01      	add	r2, sp, #4
  401022:	a902      	add	r1, sp, #8
  401024:	a803      	add	r0, sp, #12
  401026:	4c22      	ldr	r4, [pc, #136]	; (4010b0 <ili9488_draw_filled_rectangle+0xa4>)
  401028:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(ul_x1, ul_y1, (ul_x2 - ul_x1) + 1, (ul_y2 - ul_y1) + 1);
  40102a:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  40102e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  401032:	9b00      	ldr	r3, [sp, #0]
  401034:	3301      	adds	r3, #1
  401036:	1a5b      	subs	r3, r3, r1
  401038:	9a01      	ldr	r2, [sp, #4]
  40103a:	3201      	adds	r2, #1
  40103c:	1a12      	subs	r2, r2, r0
  40103e:	b29b      	uxth	r3, r3
  401040:	b292      	uxth	r2, r2
  401042:	4c1c      	ldr	r4, [pc, #112]	; (4010b4 <ili9488_draw_filled_rectangle+0xa8>)
  401044:	47a0      	blx	r4

	/* Prepare to write in GRAM */
	ili9488_write_ram_prepare();
  401046:	4b1c      	ldr	r3, [pc, #112]	; (4010b8 <ili9488_draw_filled_rectangle+0xac>)
  401048:	4798      	blx	r3

	size = (ul_x2 - ul_x1 + 1) * (ul_y2 - ul_y1 + 1);
  40104a:	9903      	ldr	r1, [sp, #12]
  40104c:	9d01      	ldr	r5, [sp, #4]
  40104e:	1a69      	subs	r1, r5, r1
  401050:	9d00      	ldr	r5, [sp, #0]
  401052:	3501      	adds	r5, #1
  401054:	9b02      	ldr	r3, [sp, #8]
  401056:	1aed      	subs	r5, r5, r3
  401058:	fb01 5505 	mla	r5, r1, r5, r5
	/* Send pixels blocks => one SPI IT / block */
	blocks = size / LCD_DATA_CACHE_SIZE;
  40105c:	4b17      	ldr	r3, [pc, #92]	; (4010bc <ili9488_draw_filled_rectangle+0xb0>)
  40105e:	fba3 2305 	umull	r2, r3, r3, r5
  401062:	0a1b      	lsrs	r3, r3, #8
	while (blocks--) {
  401064:	b163      	cbz	r3, 401080 <ili9488_draw_filled_rectangle+0x74>
  401066:	1e5c      	subs	r4, r3, #1
		ili9488_write_ram_buffer(g_ul_pixel_cache, LCD_DATA_CACHE_SIZE * LCD_DATA_COLOR_UNIT);
  401068:	f8df 8058 	ldr.w	r8, [pc, #88]	; 4010c4 <ili9488_draw_filled_rectangle+0xb8>
  40106c:	f44f 7770 	mov.w	r7, #960	; 0x3c0
  401070:	4e13      	ldr	r6, [pc, #76]	; (4010c0 <ili9488_draw_filled_rectangle+0xb4>)
  401072:	4639      	mov	r1, r7
  401074:	4640      	mov	r0, r8
  401076:	47b0      	blx	r6
	while (blocks--) {
  401078:	3c01      	subs	r4, #1
  40107a:	f1b4 3fff 	cmp.w	r4, #4294967295
  40107e:	d1f8      	bne.n	401072 <ili9488_draw_filled_rectangle+0x66>
	}

	/* Send remaining pixels */
	ili9488_write_ram_buffer(g_ul_pixel_cache, (size % LCD_DATA_CACHE_SIZE) * LCD_DATA_COLOR_UNIT);
  401080:	490e      	ldr	r1, [pc, #56]	; (4010bc <ili9488_draw_filled_rectangle+0xb0>)
  401082:	fba1 3105 	umull	r3, r1, r1, r5
  401086:	0a09      	lsrs	r1, r1, #8
  401088:	eb01 0181 	add.w	r1, r1, r1, lsl #2
  40108c:	eba5 1181 	sub.w	r1, r5, r1, lsl #6
  401090:	eb01 0141 	add.w	r1, r1, r1, lsl #1
  401094:	480b      	ldr	r0, [pc, #44]	; (4010c4 <ili9488_draw_filled_rectangle+0xb8>)
  401096:	4b0a      	ldr	r3, [pc, #40]	; (4010c0 <ili9488_draw_filled_rectangle+0xb4>)
  401098:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  40109a:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  40109e:	f44f 72a0 	mov.w	r2, #320	; 0x140
  4010a2:	2100      	movs	r1, #0
  4010a4:	4608      	mov	r0, r1
  4010a6:	4c03      	ldr	r4, [pc, #12]	; (4010b4 <ili9488_draw_filled_rectangle+0xa8>)
  4010a8:	47a0      	blx	r4

}
  4010aa:	b004      	add	sp, #16
  4010ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010b0:	00400b99 	.word	0x00400b99
  4010b4:	00400d29 	.word	0x00400d29
  4010b8:	00400bf1 	.word	0x00400bf1
  4010bc:	cccccccd 	.word	0xcccccccd
  4010c0:	00400ca1 	.word	0x00400ca1
  4010c4:	204009e4 	.word	0x204009e4

004010c8 <ili9488_draw_pixmap>:
 * \param ul_height height of the picture.
 * \param p_ul_pixmap pixmap of the image.
 */
void ili9488_draw_pixmap(uint32_t ul_x, uint32_t ul_y, uint32_t ul_width,
		uint32_t ul_height, const ili9488_color_t *p_ul_pixmap)
{
  4010c8:	b510      	push	{r4, lr}
  4010ca:	b084      	sub	sp, #16
	uint32_t size;
	uint32_t dwX1, dwY1, dwX2, dwY2;
	dwX1 = ul_x;
  4010cc:	9003      	str	r0, [sp, #12]
	dwY1 = ul_y;
  4010ce:	9102      	str	r1, [sp, #8]
	dwX2 = ul_x + ul_width - 1;
  4010d0:	3a01      	subs	r2, #1
  4010d2:	4410      	add	r0, r2
  4010d4:	9001      	str	r0, [sp, #4]
	dwY2 = ul_y + ul_height - 1;
  4010d6:	3b01      	subs	r3, #1
  4010d8:	4419      	add	r1, r3
  4010da:	ab04      	add	r3, sp, #16
  4010dc:	f843 1d10 	str.w	r1, [r3, #-16]!

	/* Swap coordinates if necessary */
	ili9488_check_box_coordinates(&dwX1, &dwY1, &dwX2, &dwY2);
  4010e0:	aa01      	add	r2, sp, #4
  4010e2:	a902      	add	r1, sp, #8
  4010e4:	a803      	add	r0, sp, #12
  4010e6:	4c13      	ldr	r4, [pc, #76]	; (401134 <ili9488_draw_pixmap+0x6c>)
  4010e8:	47a0      	blx	r4

	/* Determine the refresh window area */
	ili9488_set_window(dwX1, dwY1, (dwX2 - dwX1 + 1), (dwY2 - dwY1 + 1));
  4010ea:	f8bd 000c 	ldrh.w	r0, [sp, #12]
  4010ee:	f8bd 1008 	ldrh.w	r1, [sp, #8]
  4010f2:	9b00      	ldr	r3, [sp, #0]
  4010f4:	3301      	adds	r3, #1
  4010f6:	1a5b      	subs	r3, r3, r1
  4010f8:	9a01      	ldr	r2, [sp, #4]
  4010fa:	3201      	adds	r2, #1
  4010fc:	1a12      	subs	r2, r2, r0
  4010fe:	b29b      	uxth	r3, r3
  401100:	b292      	uxth	r2, r2
  401102:	4c0d      	ldr	r4, [pc, #52]	; (401138 <ili9488_draw_pixmap+0x70>)
  401104:	47a0      	blx	r4

	size = (dwX2 - dwX1) * (dwY2 - dwY1);
  401106:	9903      	ldr	r1, [sp, #12]
  401108:	9a01      	ldr	r2, [sp, #4]
  40110a:	1a51      	subs	r1, r2, r1
  40110c:	9a02      	ldr	r2, [sp, #8]
  40110e:	9b00      	ldr	r3, [sp, #0]
  401110:	1a9a      	subs	r2, r3, r2
  401112:	fb02 f201 	mul.w	r2, r2, r1

	ili9488_write_register(ILI9488_CMD_MEMORY_WRITE, p_ul_pixmap, size * LCD_DATA_COLOR_UNIT);
  401116:	eb02 0242 	add.w	r2, r2, r2, lsl #1
  40111a:	9906      	ldr	r1, [sp, #24]
  40111c:	202c      	movs	r0, #44	; 0x2c
  40111e:	4b07      	ldr	r3, [pc, #28]	; (40113c <ili9488_draw_pixmap+0x74>)
  401120:	4798      	blx	r3

	/* Reset the refresh window area */
	ili9488_set_window(0, 0, ILI9488_LCD_WIDTH, ILI9488_LCD_HEIGHT);
  401122:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  401126:	f44f 72a0 	mov.w	r2, #320	; 0x140
  40112a:	2100      	movs	r1, #0
  40112c:	4608      	mov	r0, r1
  40112e:	47a0      	blx	r4
}
  401130:	b004      	add	sp, #16
  401132:	bd10      	pop	{r4, pc}
  401134:	00400b99 	.word	0x00400b99
  401138:	00400d29 	.word	0x00400d29
  40113c:	00400c2d 	.word	0x00400c2d

00401140 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  401140:	6301      	str	r1, [r0, #48]	; 0x30
  401142:	4770      	bx	lr

00401144 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  401144:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  401146:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40114a:	d03a      	beq.n	4011c2 <pio_set_peripheral+0x7e>
  40114c:	d813      	bhi.n	401176 <pio_set_peripheral+0x32>
  40114e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  401152:	d025      	beq.n	4011a0 <pio_set_peripheral+0x5c>
  401154:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401158:	d10a      	bne.n	401170 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40115a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40115c:	4313      	orrs	r3, r2
  40115e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  401160:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  401162:	6f41      	ldr	r1, [r0, #116]	; 0x74
  401164:	400b      	ands	r3, r1
  401166:	ea23 0302 	bic.w	r3, r3, r2
  40116a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40116c:	6042      	str	r2, [r0, #4]
  40116e:	4770      	bx	lr
	switch (ul_type) {
  401170:	2900      	cmp	r1, #0
  401172:	d1fb      	bne.n	40116c <pio_set_peripheral+0x28>
  401174:	4770      	bx	lr
  401176:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40117a:	d021      	beq.n	4011c0 <pio_set_peripheral+0x7c>
  40117c:	d809      	bhi.n	401192 <pio_set_peripheral+0x4e>
  40117e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401182:	d1f3      	bne.n	40116c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  401184:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  401186:	4313      	orrs	r3, r2
  401188:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40118a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40118c:	4313      	orrs	r3, r2
  40118e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  401190:	e7ec      	b.n	40116c <pio_set_peripheral+0x28>
	switch (ul_type) {
  401192:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  401196:	d013      	beq.n	4011c0 <pio_set_peripheral+0x7c>
  401198:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40119c:	d010      	beq.n	4011c0 <pio_set_peripheral+0x7c>
  40119e:	e7e5      	b.n	40116c <pio_set_peripheral+0x28>
{
  4011a0:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  4011a2:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4011a4:	6f04      	ldr	r4, [r0, #112]	; 0x70
  4011a6:	43d3      	mvns	r3, r2
  4011a8:	4021      	ands	r1, r4
  4011aa:	461c      	mov	r4, r3
  4011ac:	4019      	ands	r1, r3
  4011ae:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4011b0:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  4011b2:	6f41      	ldr	r1, [r0, #116]	; 0x74
  4011b4:	400b      	ands	r3, r1
  4011b6:	4023      	ands	r3, r4
  4011b8:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  4011ba:	6042      	str	r2, [r0, #4]
}
  4011bc:	f85d 4b04 	ldr.w	r4, [sp], #4
  4011c0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4011c2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4011c4:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4011c6:	400b      	ands	r3, r1
  4011c8:	ea23 0302 	bic.w	r3, r3, r2
  4011cc:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4011ce:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4011d0:	4313      	orrs	r3, r2
  4011d2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4011d4:	e7ca      	b.n	40116c <pio_set_peripheral+0x28>

004011d6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4011d6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4011d8:	f012 0f01 	tst.w	r2, #1
  4011dc:	d10d      	bne.n	4011fa <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4011de:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4011e0:	f012 0f0a 	tst.w	r2, #10
  4011e4:	d00b      	beq.n	4011fe <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4011e6:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4011e8:	f012 0f02 	tst.w	r2, #2
  4011ec:	d109      	bne.n	401202 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4011ee:	f012 0f08 	tst.w	r2, #8
  4011f2:	d008      	beq.n	401206 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4011f4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4011f8:	e005      	b.n	401206 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4011fa:	6641      	str	r1, [r0, #100]	; 0x64
  4011fc:	e7f0      	b.n	4011e0 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4011fe:	6241      	str	r1, [r0, #36]	; 0x24
  401200:	e7f2      	b.n	4011e8 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  401202:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  401206:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  401208:	6001      	str	r1, [r0, #0]
  40120a:	4770      	bx	lr

0040120c <pio_set_output>:
{
  40120c:	b410      	push	{r4}
  40120e:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  401210:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  401212:	b94c      	cbnz	r4, 401228 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  401214:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  401216:	b14b      	cbz	r3, 40122c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  401218:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40121a:	b94a      	cbnz	r2, 401230 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40121c:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  40121e:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  401220:	6001      	str	r1, [r0, #0]
}
  401222:	f85d 4b04 	ldr.w	r4, [sp], #4
  401226:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  401228:	6641      	str	r1, [r0, #100]	; 0x64
  40122a:	e7f4      	b.n	401216 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40122c:	6541      	str	r1, [r0, #84]	; 0x54
  40122e:	e7f4      	b.n	40121a <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  401230:	6301      	str	r1, [r0, #48]	; 0x30
  401232:	e7f4      	b.n	40121e <pio_set_output+0x12>

00401234 <pio_configure>:
{
  401234:	b570      	push	{r4, r5, r6, lr}
  401236:	b082      	sub	sp, #8
  401238:	4605      	mov	r5, r0
  40123a:	4616      	mov	r6, r2
  40123c:	461c      	mov	r4, r3
	switch (ul_type) {
  40123e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  401242:	d014      	beq.n	40126e <pio_configure+0x3a>
  401244:	d90a      	bls.n	40125c <pio_configure+0x28>
  401246:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40124a:	d024      	beq.n	401296 <pio_configure+0x62>
  40124c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  401250:	d021      	beq.n	401296 <pio_configure+0x62>
  401252:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  401256:	d017      	beq.n	401288 <pio_configure+0x54>
		return 0;
  401258:	2000      	movs	r0, #0
  40125a:	e01a      	b.n	401292 <pio_configure+0x5e>
	switch (ul_type) {
  40125c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  401260:	d005      	beq.n	40126e <pio_configure+0x3a>
  401262:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  401266:	d002      	beq.n	40126e <pio_configure+0x3a>
  401268:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40126c:	d1f4      	bne.n	401258 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40126e:	4632      	mov	r2, r6
  401270:	4628      	mov	r0, r5
  401272:	4b11      	ldr	r3, [pc, #68]	; (4012b8 <pio_configure+0x84>)
  401274:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401276:	f014 0f01 	tst.w	r4, #1
  40127a:	d102      	bne.n	401282 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40127c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40127e:	2001      	movs	r0, #1
  401280:	e007      	b.n	401292 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  401282:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  401284:	2001      	movs	r0, #1
  401286:	e004      	b.n	401292 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  401288:	461a      	mov	r2, r3
  40128a:	4631      	mov	r1, r6
  40128c:	4b0b      	ldr	r3, [pc, #44]	; (4012bc <pio_configure+0x88>)
  40128e:	4798      	blx	r3
	return 1;
  401290:	2001      	movs	r0, #1
}
  401292:	b002      	add	sp, #8
  401294:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  401296:	f004 0301 	and.w	r3, r4, #1
  40129a:	9300      	str	r3, [sp, #0]
  40129c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  4012a0:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  4012a4:	bf14      	ite	ne
  4012a6:	2200      	movne	r2, #0
  4012a8:	2201      	moveq	r2, #1
  4012aa:	4631      	mov	r1, r6
  4012ac:	4628      	mov	r0, r5
  4012ae:	4c04      	ldr	r4, [pc, #16]	; (4012c0 <pio_configure+0x8c>)
  4012b0:	47a0      	blx	r4
	return 1;
  4012b2:	2001      	movs	r0, #1
		break;
  4012b4:	e7ed      	b.n	401292 <pio_configure+0x5e>
  4012b6:	bf00      	nop
  4012b8:	00401145 	.word	0x00401145
  4012bc:	004011d7 	.word	0x004011d7
  4012c0:	0040120d 	.word	0x0040120d

004012c4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4012c4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4012c6:	4770      	bx	lr

004012c8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4012c8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4012ca:	4770      	bx	lr

004012cc <pio_set_pin_high>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4012cc:	4b05      	ldr	r3, [pc, #20]	; (4012e4 <pio_set_pin_high+0x18>)
  4012ce:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4012d2:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
  4012d4:	f000 001f 	and.w	r0, r0, #31
  4012d8:	2201      	movs	r2, #1
  4012da:	fa02 f000 	lsl.w	r0, r2, r0
  4012de:	6318      	str	r0, [r3, #48]	; 0x30
  4012e0:	4770      	bx	lr
  4012e2:	bf00      	nop
  4012e4:	00200707 	.word	0x00200707

004012e8 <pio_set_pin_low>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  4012e8:	4b05      	ldr	r3, [pc, #20]	; (401300 <pio_set_pin_low+0x18>)
  4012ea:	eb03 1350 	add.w	r3, r3, r0, lsr #5
  4012ee:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
  4012f0:	f000 001f 	and.w	r0, r0, #31
  4012f4:	2201      	movs	r2, #1
  4012f6:	fa02 f000 	lsl.w	r0, r2, r0
  4012fa:	6358      	str	r0, [r3, #52]	; 0x34
  4012fc:	4770      	bx	lr
  4012fe:	bf00      	nop
  401300:	00200707 	.word	0x00200707

00401304 <pio_configure_pin>:
{
  401304:	b570      	push	{r4, r5, r6, lr}
  401306:	b082      	sub	sp, #8
  401308:	460d      	mov	r5, r1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
  40130a:	4c46      	ldr	r4, [pc, #280]	; (401424 <pio_configure_pin+0x120>)
  40130c:	eb04 1450 	add.w	r4, r4, r0, lsr #5
  401310:	0264      	lsls	r4, r4, #9
	switch (ul_flags & PIO_TYPE_Msk) {
  401312:	f001 43f0 	and.w	r3, r1, #2013265920	; 0x78000000
  401316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
  40131a:	d059      	beq.n	4013d0 <pio_configure_pin+0xcc>
  40131c:	d80a      	bhi.n	401334 <pio_configure_pin+0x30>
  40131e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
  401322:	d02f      	beq.n	401384 <pio_configure_pin+0x80>
  401324:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
  401328:	d03f      	beq.n	4013aa <pio_configure_pin+0xa6>
  40132a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
  40132e:	d016      	beq.n	40135e <pio_configure_pin+0x5a>
		return 0;
  401330:	2000      	movs	r0, #0
  401332:	e012      	b.n	40135a <pio_configure_pin+0x56>
	switch (ul_flags & PIO_TYPE_Msk) {
  401334:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
  401338:	d05d      	beq.n	4013f6 <pio_configure_pin+0xf2>
  40133a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
  40133e:	d05a      	beq.n	4013f6 <pio_configure_pin+0xf2>
  401340:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
  401344:	d1f4      	bne.n	401330 <pio_configure_pin+0x2c>
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
  401346:	f000 011f 	and.w	r1, r0, #31
  40134a:	2601      	movs	r6, #1
  40134c:	462a      	mov	r2, r5
  40134e:	fa06 f101 	lsl.w	r1, r6, r1
  401352:	4620      	mov	r0, r4
  401354:	4b34      	ldr	r3, [pc, #208]	; (401428 <pio_configure_pin+0x124>)
  401356:	4798      	blx	r3
	return 1;
  401358:	4630      	mov	r0, r6
}
  40135a:	b002      	add	sp, #8
  40135c:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
  40135e:	f000 001f 	and.w	r0, r0, #31
  401362:	2601      	movs	r6, #1
  401364:	4086      	lsls	r6, r0
  401366:	4632      	mov	r2, r6
  401368:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  40136c:	4620      	mov	r0, r4
  40136e:	4b2f      	ldr	r3, [pc, #188]	; (40142c <pio_configure_pin+0x128>)
  401370:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401372:	f015 0f01 	tst.w	r5, #1
  401376:	d102      	bne.n	40137e <pio_configure_pin+0x7a>
		p_pio->PIO_PUDR = ul_mask;
  401378:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  40137a:	2001      	movs	r0, #1
  40137c:	e7ed      	b.n	40135a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  40137e:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  401380:	2001      	movs	r0, #1
  401382:	e7ea      	b.n	40135a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
  401384:	f000 001f 	and.w	r0, r0, #31
  401388:	2601      	movs	r6, #1
  40138a:	4086      	lsls	r6, r0
  40138c:	4632      	mov	r2, r6
  40138e:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
  401392:	4620      	mov	r0, r4
  401394:	4b25      	ldr	r3, [pc, #148]	; (40142c <pio_configure_pin+0x128>)
  401396:	4798      	blx	r3
	if (ul_pull_up_enable) {
  401398:	f015 0f01 	tst.w	r5, #1
  40139c:	d102      	bne.n	4013a4 <pio_configure_pin+0xa0>
		p_pio->PIO_PUDR = ul_mask;
  40139e:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4013a0:	2001      	movs	r0, #1
  4013a2:	e7da      	b.n	40135a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4013a4:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4013a6:	2001      	movs	r0, #1
  4013a8:	e7d7      	b.n	40135a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_C, (1 << (ul_pin & 0x1F)));
  4013aa:	f000 001f 	and.w	r0, r0, #31
  4013ae:	2601      	movs	r6, #1
  4013b0:	4086      	lsls	r6, r0
  4013b2:	4632      	mov	r2, r6
  4013b4:	f04f 51c0 	mov.w	r1, #402653184	; 0x18000000
  4013b8:	4620      	mov	r0, r4
  4013ba:	4b1c      	ldr	r3, [pc, #112]	; (40142c <pio_configure_pin+0x128>)
  4013bc:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4013be:	f015 0f01 	tst.w	r5, #1
  4013c2:	d102      	bne.n	4013ca <pio_configure_pin+0xc6>
		p_pio->PIO_PUDR = ul_mask;
  4013c4:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4013c6:	2001      	movs	r0, #1
  4013c8:	e7c7      	b.n	40135a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4013ca:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4013cc:	2001      	movs	r0, #1
  4013ce:	e7c4      	b.n	40135a <pio_configure_pin+0x56>
		pio_set_peripheral(p_pio, PIO_PERIPH_D, (1 << (ul_pin & 0x1F)));
  4013d0:	f000 001f 	and.w	r0, r0, #31
  4013d4:	2601      	movs	r6, #1
  4013d6:	4086      	lsls	r6, r0
  4013d8:	4632      	mov	r2, r6
  4013da:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
  4013de:	4620      	mov	r0, r4
  4013e0:	4b12      	ldr	r3, [pc, #72]	; (40142c <pio_configure_pin+0x128>)
  4013e2:	4798      	blx	r3
	if (ul_pull_up_enable) {
  4013e4:	f015 0f01 	tst.w	r5, #1
  4013e8:	d102      	bne.n	4013f0 <pio_configure_pin+0xec>
		p_pio->PIO_PUDR = ul_mask;
  4013ea:	6626      	str	r6, [r4, #96]	; 0x60
	return 1;
  4013ec:	2001      	movs	r0, #1
  4013ee:	e7b4      	b.n	40135a <pio_configure_pin+0x56>
		p_pio->PIO_PUER = ul_mask;
  4013f0:	6666      	str	r6, [r4, #100]	; 0x64
	return 1;
  4013f2:	2001      	movs	r0, #1
  4013f4:	e7b1      	b.n	40135a <pio_configure_pin+0x56>
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
  4013f6:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
  4013fa:	f000 011f 	and.w	r1, r0, #31
  4013fe:	2601      	movs	r6, #1
  401400:	ea05 0306 	and.w	r3, r5, r6
  401404:	9300      	str	r3, [sp, #0]
  401406:	f3c5 0380 	ubfx	r3, r5, #2, #1
  40140a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
  40140e:	bf14      	ite	ne
  401410:	2200      	movne	r2, #0
  401412:	2201      	moveq	r2, #1
  401414:	fa06 f101 	lsl.w	r1, r6, r1
  401418:	4620      	mov	r0, r4
  40141a:	4c05      	ldr	r4, [pc, #20]	; (401430 <pio_configure_pin+0x12c>)
  40141c:	47a0      	blx	r4
	return 1;
  40141e:	4630      	mov	r0, r6
		break;
  401420:	e79b      	b.n	40135a <pio_configure_pin+0x56>
  401422:	bf00      	nop
  401424:	00200707 	.word	0x00200707
  401428:	004011d7 	.word	0x004011d7
  40142c:	00401145 	.word	0x00401145
  401430:	0040120d 	.word	0x0040120d

00401434 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  401434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  401438:	4604      	mov	r4, r0
  40143a:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  40143c:	4b0e      	ldr	r3, [pc, #56]	; (401478 <pio_handler_process+0x44>)
  40143e:	4798      	blx	r3
  401440:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  401442:	4620      	mov	r0, r4
  401444:	4b0d      	ldr	r3, [pc, #52]	; (40147c <pio_handler_process+0x48>)
  401446:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  401448:	4005      	ands	r5, r0
  40144a:	d013      	beq.n	401474 <pio_handler_process+0x40>
  40144c:	4c0c      	ldr	r4, [pc, #48]	; (401480 <pio_handler_process+0x4c>)
  40144e:	f104 0660 	add.w	r6, r4, #96	; 0x60
  401452:	e003      	b.n	40145c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  401454:	42b4      	cmp	r4, r6
  401456:	d00d      	beq.n	401474 <pio_handler_process+0x40>
  401458:	3410      	adds	r4, #16
		while (status != 0) {
  40145a:	b15d      	cbz	r5, 401474 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40145c:	6820      	ldr	r0, [r4, #0]
  40145e:	4540      	cmp	r0, r8
  401460:	d1f8      	bne.n	401454 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  401462:	6861      	ldr	r1, [r4, #4]
  401464:	4229      	tst	r1, r5
  401466:	d0f5      	beq.n	401454 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  401468:	68e3      	ldr	r3, [r4, #12]
  40146a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40146c:	6863      	ldr	r3, [r4, #4]
  40146e:	ea25 0503 	bic.w	r5, r5, r3
  401472:	e7ef      	b.n	401454 <pio_handler_process+0x20>
  401474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  401478:	004012c5 	.word	0x004012c5
  40147c:	004012c9 	.word	0x004012c9
  401480:	20400da4 	.word	0x20400da4

00401484 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  401484:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  401486:	210a      	movs	r1, #10
  401488:	4801      	ldr	r0, [pc, #4]	; (401490 <PIOA_Handler+0xc>)
  40148a:	4b02      	ldr	r3, [pc, #8]	; (401494 <PIOA_Handler+0x10>)
  40148c:	4798      	blx	r3
  40148e:	bd08      	pop	{r3, pc}
  401490:	400e0e00 	.word	0x400e0e00
  401494:	00401435 	.word	0x00401435

00401498 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  401498:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  40149a:	210b      	movs	r1, #11
  40149c:	4801      	ldr	r0, [pc, #4]	; (4014a4 <PIOB_Handler+0xc>)
  40149e:	4b02      	ldr	r3, [pc, #8]	; (4014a8 <PIOB_Handler+0x10>)
  4014a0:	4798      	blx	r3
  4014a2:	bd08      	pop	{r3, pc}
  4014a4:	400e1000 	.word	0x400e1000
  4014a8:	00401435 	.word	0x00401435

004014ac <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4014ac:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4014ae:	210c      	movs	r1, #12
  4014b0:	4801      	ldr	r0, [pc, #4]	; (4014b8 <PIOC_Handler+0xc>)
  4014b2:	4b02      	ldr	r3, [pc, #8]	; (4014bc <PIOC_Handler+0x10>)
  4014b4:	4798      	blx	r3
  4014b6:	bd08      	pop	{r3, pc}
  4014b8:	400e1200 	.word	0x400e1200
  4014bc:	00401435 	.word	0x00401435

004014c0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4014c0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4014c2:	2110      	movs	r1, #16
  4014c4:	4801      	ldr	r0, [pc, #4]	; (4014cc <PIOD_Handler+0xc>)
  4014c6:	4b02      	ldr	r3, [pc, #8]	; (4014d0 <PIOD_Handler+0x10>)
  4014c8:	4798      	blx	r3
  4014ca:	bd08      	pop	{r3, pc}
  4014cc:	400e1400 	.word	0x400e1400
  4014d0:	00401435 	.word	0x00401435

004014d4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4014d4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4014d6:	2111      	movs	r1, #17
  4014d8:	4801      	ldr	r0, [pc, #4]	; (4014e0 <PIOE_Handler+0xc>)
  4014da:	4b02      	ldr	r3, [pc, #8]	; (4014e4 <PIOE_Handler+0x10>)
  4014dc:	4798      	blx	r3
  4014de:	bd08      	pop	{r3, pc}
  4014e0:	400e1600 	.word	0x400e1600
  4014e4:	00401435 	.word	0x00401435

004014e8 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  4014e8:	2803      	cmp	r0, #3
  4014ea:	d011      	beq.n	401510 <pmc_mck_set_division+0x28>
  4014ec:	2804      	cmp	r0, #4
  4014ee:	d012      	beq.n	401516 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  4014f0:	2802      	cmp	r0, #2
  4014f2:	bf0c      	ite	eq
  4014f4:	f44f 7180 	moveq.w	r1, #256	; 0x100
  4014f8:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  4014fa:	4a08      	ldr	r2, [pc, #32]	; (40151c <pmc_mck_set_division+0x34>)
  4014fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
  4014fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  401502:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  401504:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  401506:	6e93      	ldr	r3, [r2, #104]	; 0x68
  401508:	f013 0f08 	tst.w	r3, #8
  40150c:	d0fb      	beq.n	401506 <pmc_mck_set_division+0x1e>
}
  40150e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  401510:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  401514:	e7f1      	b.n	4014fa <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  401516:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40151a:	e7ee      	b.n	4014fa <pmc_mck_set_division+0x12>
  40151c:	400e0600 	.word	0x400e0600

00401520 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  401520:	4a17      	ldr	r2, [pc, #92]	; (401580 <pmc_switch_mck_to_pllack+0x60>)
  401522:	6b13      	ldr	r3, [r2, #48]	; 0x30
  401524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  401528:	4318      	orrs	r0, r3
  40152a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40152c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40152e:	f013 0f08 	tst.w	r3, #8
  401532:	d10a      	bne.n	40154a <pmc_switch_mck_to_pllack+0x2a>
  401534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401538:	4911      	ldr	r1, [pc, #68]	; (401580 <pmc_switch_mck_to_pllack+0x60>)
  40153a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40153c:	f012 0f08 	tst.w	r2, #8
  401540:	d103      	bne.n	40154a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  401542:	3b01      	subs	r3, #1
  401544:	d1f9      	bne.n	40153a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  401546:	2001      	movs	r0, #1
  401548:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40154a:	4a0d      	ldr	r2, [pc, #52]	; (401580 <pmc_switch_mck_to_pllack+0x60>)
  40154c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40154e:	f023 0303 	bic.w	r3, r3, #3
  401552:	f043 0302 	orr.w	r3, r3, #2
  401556:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  401558:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40155a:	f013 0f08 	tst.w	r3, #8
  40155e:	d10a      	bne.n	401576 <pmc_switch_mck_to_pllack+0x56>
  401560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  401564:	4906      	ldr	r1, [pc, #24]	; (401580 <pmc_switch_mck_to_pllack+0x60>)
  401566:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  401568:	f012 0f08 	tst.w	r2, #8
  40156c:	d105      	bne.n	40157a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40156e:	3b01      	subs	r3, #1
  401570:	d1f9      	bne.n	401566 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  401572:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  401574:	4770      	bx	lr
	return 0;
  401576:	2000      	movs	r0, #0
  401578:	4770      	bx	lr
  40157a:	2000      	movs	r0, #0
  40157c:	4770      	bx	lr
  40157e:	bf00      	nop
  401580:	400e0600 	.word	0x400e0600

00401584 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  401584:	b9a0      	cbnz	r0, 4015b0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401586:	480e      	ldr	r0, [pc, #56]	; (4015c0 <pmc_switch_mainck_to_xtal+0x3c>)
  401588:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  40158a:	0209      	lsls	r1, r1, #8
  40158c:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  40158e:	4a0d      	ldr	r2, [pc, #52]	; (4015c4 <pmc_switch_mainck_to_xtal+0x40>)
  401590:	401a      	ands	r2, r3
  401592:	4b0d      	ldr	r3, [pc, #52]	; (4015c8 <pmc_switch_mainck_to_xtal+0x44>)
  401594:	4313      	orrs	r3, r2
  401596:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  401598:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40159a:	4602      	mov	r2, r0
  40159c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40159e:	f013 0f01 	tst.w	r3, #1
  4015a2:	d0fb      	beq.n	40159c <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4015a4:	4a06      	ldr	r2, [pc, #24]	; (4015c0 <pmc_switch_mainck_to_xtal+0x3c>)
  4015a6:	6a11      	ldr	r1, [r2, #32]
  4015a8:	4b08      	ldr	r3, [pc, #32]	; (4015cc <pmc_switch_mainck_to_xtal+0x48>)
  4015aa:	430b      	orrs	r3, r1
  4015ac:	6213      	str	r3, [r2, #32]
  4015ae:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015b0:	4903      	ldr	r1, [pc, #12]	; (4015c0 <pmc_switch_mainck_to_xtal+0x3c>)
  4015b2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4015b4:	4a06      	ldr	r2, [pc, #24]	; (4015d0 <pmc_switch_mainck_to_xtal+0x4c>)
  4015b6:	401a      	ands	r2, r3
  4015b8:	4b06      	ldr	r3, [pc, #24]	; (4015d4 <pmc_switch_mainck_to_xtal+0x50>)
  4015ba:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4015bc:	620b      	str	r3, [r1, #32]
  4015be:	4770      	bx	lr
  4015c0:	400e0600 	.word	0x400e0600
  4015c4:	ffc8fffc 	.word	0xffc8fffc
  4015c8:	00370001 	.word	0x00370001
  4015cc:	01370000 	.word	0x01370000
  4015d0:	fec8fffc 	.word	0xfec8fffc
  4015d4:	01370002 	.word	0x01370002

004015d8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4015d8:	4b02      	ldr	r3, [pc, #8]	; (4015e4 <pmc_osc_is_ready_mainck+0xc>)
  4015da:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4015dc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  4015e0:	4770      	bx	lr
  4015e2:	bf00      	nop
  4015e4:	400e0600 	.word	0x400e0600

004015e8 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  4015e8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  4015ec:	4b01      	ldr	r3, [pc, #4]	; (4015f4 <pmc_disable_pllack+0xc>)
  4015ee:	629a      	str	r2, [r3, #40]	; 0x28
  4015f0:	4770      	bx	lr
  4015f2:	bf00      	nop
  4015f4:	400e0600 	.word	0x400e0600

004015f8 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  4015f8:	4b02      	ldr	r3, [pc, #8]	; (401604 <pmc_is_locked_pllack+0xc>)
  4015fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4015fc:	f000 0002 	and.w	r0, r0, #2
  401600:	4770      	bx	lr
  401602:	bf00      	nop
  401604:	400e0600 	.word	0x400e0600

00401608 <pmc_enable_periph_clk>:
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
  401608:	f000 007f 	and.w	r0, r0, #127	; 0x7f
  40160c:	4b05      	ldr	r3, [pc, #20]	; (401624 <pmc_enable_periph_clk+0x1c>)
  40160e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
  401612:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
  401616:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
  40161a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
  40161e:	2000      	movs	r0, #0
  401620:	4770      	bx	lr
  401622:	bf00      	nop
  401624:	400e0600 	.word	0x400e0600

00401628 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
  401628:	b508      	push	{r3, lr}
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
#elif (SAM3XA || SAM4C || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	if (p_spi == SPI0) {
  40162a:	4b07      	ldr	r3, [pc, #28]	; (401648 <spi_enable_clock+0x20>)
  40162c:	4298      	cmp	r0, r3
  40162e:	d003      	beq.n	401638 <spi_enable_clock+0x10>
		sysclk_enable_peripheral_clock(ID_SPI0);
	}
	#ifdef SPI1
	else if (p_spi == SPI1) {
  401630:	4b06      	ldr	r3, [pc, #24]	; (40164c <spi_enable_clock+0x24>)
  401632:	4298      	cmp	r0, r3
  401634:	d004      	beq.n	401640 <spi_enable_clock+0x18>
  401636:	bd08      	pop	{r3, pc}
  401638:	2015      	movs	r0, #21
  40163a:	4b05      	ldr	r3, [pc, #20]	; (401650 <spi_enable_clock+0x28>)
  40163c:	4798      	blx	r3
  40163e:	bd08      	pop	{r3, pc}
  401640:	202a      	movs	r0, #42	; 0x2a
  401642:	4b03      	ldr	r3, [pc, #12]	; (401650 <spi_enable_clock+0x28>)
  401644:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
  401646:	e7f6      	b.n	401636 <spi_enable_clock+0xe>
  401648:	40008000 	.word	0x40008000
  40164c:	40058000 	.word	0x40058000
  401650:	00401609 	.word	0x00401609

00401654 <spi_set_peripheral_chip_select_value>:
 *                 \ref spi_enable_peripheral_select_decode,
 *                 \ref spi_disable_peripheral_select_decode.
 */
void spi_set_peripheral_chip_select_value(Spi *p_spi, uint32_t ul_value)
{
	p_spi->SPI_MR &= (~SPI_MR_PCS_Msk);
  401654:	6843      	ldr	r3, [r0, #4]
  401656:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
  40165a:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_PCS(ul_value);
  40165c:	6843      	ldr	r3, [r0, #4]
  40165e:	0409      	lsls	r1, r1, #16
  401660:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
  401664:	4319      	orrs	r1, r3
  401666:	6041      	str	r1, [r0, #4]
  401668:	4770      	bx	lr

0040166a <spi_set_delay_between_chip_select>:
 * \param p_spi Pointer to an SPI instance.
 * \param ul_delay Delay between chip selects (in number of MCK clocks).
 */
void spi_set_delay_between_chip_select(Spi *p_spi, uint32_t ul_delay)
{
	p_spi->SPI_MR &= (~SPI_MR_DLYBCS_Msk);
  40166a:	6843      	ldr	r3, [r0, #4]
  40166c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
  401670:	6043      	str	r3, [r0, #4]
	p_spi->SPI_MR |= SPI_MR_DLYBCS(ul_delay);
  401672:	6843      	ldr	r3, [r0, #4]
  401674:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
  401678:	6041      	str	r1, [r0, #4]
  40167a:	4770      	bx	lr

0040167c <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
  40167c:	b430      	push	{r4, r5}
	uint32_t timeout = SPI_TIMEOUT;
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
  40167e:	f643 2499 	movw	r4, #15001	; 0x3a99
  401682:	6905      	ldr	r5, [r0, #16]
  401684:	f015 0f02 	tst.w	r5, #2
  401688:	d103      	bne.n	401692 <spi_write+0x16>
		if (!timeout--) {
  40168a:	3c01      	subs	r4, #1
  40168c:	d1f9      	bne.n	401682 <spi_write+0x6>
			return SPI_ERROR_TIMEOUT;
  40168e:	2001      	movs	r0, #1
  401690:	e00c      	b.n	4016ac <spi_write+0x30>
	if (p_spi->SPI_MR & SPI_MR_PS) {
  401692:	6844      	ldr	r4, [r0, #4]
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
  401694:	f014 0f02 	tst.w	r4, #2
  401698:	d006      	beq.n	4016a8 <spi_write+0x2c>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
  40169a:	0412      	lsls	r2, r2, #16
  40169c:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
  4016a0:	4311      	orrs	r1, r2
		if (uc_last) {
  4016a2:	b10b      	cbz	r3, 4016a8 <spi_write+0x2c>
			value |= SPI_TDR_LASTXFER;
  4016a4:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
		}
	} else {
		value = SPI_TDR_TD(us_data);
	}

	p_spi->SPI_TDR = value;
  4016a8:	60c1      	str	r1, [r0, #12]

	return SPI_OK;
  4016aa:	2000      	movs	r0, #0
}
  4016ac:	bc30      	pop	{r4, r5}
  4016ae:	4770      	bx	lr

004016b0 <spi_set_clock_polarity>:
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
	if (ul_polarity) {
  4016b0:	b932      	cbnz	r2, 4016c0 <spi_set_clock_polarity+0x10>
  4016b2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
  4016b6:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4016b8:	f023 0301 	bic.w	r3, r3, #1
  4016bc:	6303      	str	r3, [r0, #48]	; 0x30
  4016be:	4770      	bx	lr
  4016c0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
  4016c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4016c6:	f043 0301 	orr.w	r3, r3, #1
  4016ca:	6303      	str	r3, [r0, #48]	; 0x30
  4016cc:	4770      	bx	lr

004016ce <spi_set_clock_phase>:
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
	if (ul_phase) {
  4016ce:	b932      	cbnz	r2, 4016de <spi_set_clock_phase+0x10>
  4016d0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
  4016d4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4016d6:	f023 0302 	bic.w	r3, r3, #2
  4016da:	6303      	str	r3, [r0, #48]	; 0x30
  4016dc:	4770      	bx	lr
  4016de:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
  4016e2:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4016e4:	f043 0302 	orr.w	r3, r3, #2
  4016e8:	6303      	str	r3, [r0, #48]	; 0x30
  4016ea:	4770      	bx	lr

004016ec <spi_configure_cs_behavior>:
 * \param ul_cs_behavior Behavior of the Chip Select after transfer.
 */
void spi_configure_cs_behavior(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_cs_behavior)
{
	if (ul_cs_behavior == SPI_CS_RISE_FORCED) {
  4016ec:	2a04      	cmp	r2, #4
  4016ee:	d003      	beq.n	4016f8 <spi_configure_cs_behavior+0xc>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
	} else if (ul_cs_behavior == SPI_CS_RISE_NO_TX) {
  4016f0:	b16a      	cbz	r2, 40170e <spi_configure_cs_behavior+0x22>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
	} else if (ul_cs_behavior == SPI_CS_KEEP_LOW) {
  4016f2:	2a08      	cmp	r2, #8
  4016f4:	d016      	beq.n	401724 <spi_configure_cs_behavior+0x38>
  4016f6:	4770      	bx	lr
  4016f8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  4016fc:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4016fe:	f023 0308 	bic.w	r3, r3, #8
  401702:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSNAAT;
  401704:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401706:	f043 0304 	orr.w	r3, r3, #4
  40170a:	6303      	str	r3, [r0, #48]	; 0x30
  40170c:	4770      	bx	lr
  40170e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSAAT);
  401712:	6b03      	ldr	r3, [r0, #48]	; 0x30
  401714:	f023 0308 	bic.w	r3, r3, #8
  401718:	6303      	str	r3, [r0, #48]	; 0x30
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CSNAAT);
  40171a:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40171c:	f023 0304 	bic.w	r3, r3, #4
  401720:	6303      	str	r3, [r0, #48]	; 0x30
  401722:	4770      	bx	lr
  401724:	eb00 0081 	add.w	r0, r0, r1, lsl #2
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CSAAT;
  401728:	6b03      	ldr	r3, [r0, #48]	; 0x30
  40172a:	f043 0308 	orr.w	r3, r3, #8
  40172e:	6303      	str	r3, [r0, #48]	; 0x30
	}
}
  401730:	e7e1      	b.n	4016f6 <spi_configure_cs_behavior+0xa>

00401732 <spi_set_bits_per_transfer>:
 * \param ul_bits Number of bits (8~16), use the pattern defined
 *        in the device header file.
 */
void spi_set_bits_per_transfer(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_bits)
{
  401732:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_BITS_Msk);
  401736:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401738:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  40173c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= ul_bits;
  40173e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401740:	431a      	orrs	r2, r3
  401742:	630a      	str	r2, [r1, #48]	; 0x30
  401744:	4770      	bx	lr

00401746 <spi_calc_baudrate_div>:
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
	int baud_div = div_ceil(mck, baudrate);
  401746:	1e43      	subs	r3, r0, #1
  401748:	4419      	add	r1, r3
  40174a:	fbb1 f0f0 	udiv	r0, r1, r0

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
  40174e:	1e43      	subs	r3, r0, #1
  401750:	2bfe      	cmp	r3, #254	; 0xfe
		return -1;
	}

	return baud_div;
  401752:	bf94      	ite	ls
  401754:	b200      	sxthls	r0, r0
		return -1;
  401756:	f04f 30ff 	movhi.w	r0, #4294967295
}
  40175a:	4770      	bx	lr

0040175c <spi_set_baudrate_div>:
 */
int16_t spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
    /* Programming the SCBR field to 0 is forbidden */
    if (!uc_baudrate_divider){
  40175c:	b17a      	cbz	r2, 40177e <spi_set_baudrate_div+0x22>
{
  40175e:	b410      	push	{r4}
  401760:	4614      	mov	r4, r2
  401762:	eb00 0181 	add.w	r1, r0, r1, lsl #2
        return -1;
	}
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
  401766:	6b0b      	ldr	r3, [r1, #48]	; 0x30
  401768:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
  40176c:	630b      	str	r3, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
  40176e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  401770:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  401774:	630a      	str	r2, [r1, #48]	; 0x30
    return 0;
  401776:	2000      	movs	r0, #0
}
  401778:	f85d 4b04 	ldr.w	r4, [sp], #4
  40177c:	4770      	bx	lr
        return -1;
  40177e:	f04f 30ff 	mov.w	r0, #4294967295
  401782:	4770      	bx	lr

00401784 <spi_set_transfer_delay>:
 * \param uc_dlybs Delay before SPCK (in number of MCK clocks).
 * \param uc_dlybct Delay between consecutive transfers (in number of MCK clocks).
 */
void spi_set_transfer_delay(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_dlybs, uint8_t uc_dlybct)
{
  401784:	b410      	push	{r4}
  401786:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	p_spi->SPI_CSR[ul_pcs_ch] &= ~(SPI_CSR_DLYBS_Msk | SPI_CSR_DLYBCT_Msk);
  40178a:	6b08      	ldr	r0, [r1, #48]	; 0x30
  40178c:	b280      	uxth	r0, r0
  40178e:	6308      	str	r0, [r1, #48]	; 0x30
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_DLYBS(uc_dlybs)
  401790:	6b0c      	ldr	r4, [r1, #48]	; 0x30
  401792:	ea44 6303 	orr.w	r3, r4, r3, lsl #24
  401796:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  40179a:	630b      	str	r3, [r1, #48]	; 0x30
			| SPI_CSR_DLYBCT(uc_dlybct);
}
  40179c:	f85d 4b04 	ldr.w	r4, [sp], #4
  4017a0:	4770      	bx	lr
	...

004017a4 <twihs_set_speed>:
	uint32_t ckdiv = 0;
	uint32_t c_lh_div;
	uint32_t cldiv, chdiv;

	/* High-Speed can be only used in slave mode, 400k is the max speed allowed for master */
	if (ul_speed > I2C_FAST_MODE_SPEED) {
  4017a4:	4b28      	ldr	r3, [pc, #160]	; (401848 <twihs_set_speed+0xa4>)
  4017a6:	4299      	cmp	r1, r3
  4017a8:	d84b      	bhi.n	401842 <twihs_set_speed+0x9e>
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
  4017aa:	f5a3 537a 	sub.w	r3, r3, #16000	; 0x3e80
  4017ae:	4299      	cmp	r1, r3
  4017b0:	d92d      	bls.n	40180e <twihs_set_speed+0x6a>
{
  4017b2:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4017b4:	4c25      	ldr	r4, [pc, #148]	; (40184c <twihs_set_speed+0xa8>)
  4017b6:	fba4 3402 	umull	r3, r4, r4, r2
  4017ba:	0ba4      	lsrs	r4, r4, #14
  4017bc:	3c03      	subs	r4, #3
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  4017be:	4b24      	ldr	r3, [pc, #144]	; (401850 <twihs_set_speed+0xac>)
  4017c0:	440b      	add	r3, r1
  4017c2:	009b      	lsls	r3, r3, #2
  4017c4:	fbb2 f2f3 	udiv	r2, r2, r3
  4017c8:	3a03      	subs	r2, #3
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4017ca:	2cff      	cmp	r4, #255	; 0xff
  4017cc:	d91d      	bls.n	40180a <twihs_set_speed+0x66>
  4017ce:	2100      	movs	r1, #0
			/* Increase clock divider */
			ckdiv++;
  4017d0:	3101      	adds	r1, #1
			/* Divide cldiv value */
			cldiv /= TWIHS_CLK_DIVIDER;
  4017d2:	0864      	lsrs	r4, r4, #1
		while ((cldiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4017d4:	2cff      	cmp	r4, #255	; 0xff
  4017d6:	d901      	bls.n	4017dc <twihs_set_speed+0x38>
  4017d8:	2906      	cmp	r1, #6
  4017da:	d9f9      	bls.n	4017d0 <twihs_set_speed+0x2c>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4017dc:	2aff      	cmp	r2, #255	; 0xff
  4017de:	d907      	bls.n	4017f0 <twihs_set_speed+0x4c>
  4017e0:	2906      	cmp	r1, #6
  4017e2:	d805      	bhi.n	4017f0 <twihs_set_speed+0x4c>
			/* Increase clock divider */
			ckdiv++;
  4017e4:	3101      	adds	r1, #1
			/* Divide cldiv value */
			chdiv /= TWIHS_CLK_DIVIDER;
  4017e6:	0852      	lsrs	r2, r2, #1
		while ((chdiv > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  4017e8:	2aff      	cmp	r2, #255	; 0xff
  4017ea:	d901      	bls.n	4017f0 <twihs_set_speed+0x4c>
  4017ec:	2906      	cmp	r1, #6
  4017ee:	d9f9      	bls.n	4017e4 <twihs_set_speed+0x40>
		}

		/* set clock waveform generator register */
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4017f0:	0213      	lsls	r3, r2, #8
  4017f2:	b29b      	uxth	r3, r3
				TWIHS_CWGR_CKDIV(ckdiv);
  4017f4:	0409      	lsls	r1, r1, #16
  4017f6:	f401 21e0 	and.w	r1, r1, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(cldiv) | TWIHS_CWGR_CHDIV(chdiv) |
  4017fa:	430b      	orrs	r3, r1
  4017fc:	b2e4      	uxtb	r4, r4
  4017fe:	4323      	orrs	r3, r4
		p_twihs->TWIHS_CWGR =
  401800:	6103      	str	r3, [r0, #16]
		p_twihs->TWIHS_CWGR =
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
				TWIHS_CWGR_CKDIV(ckdiv);
	}

	return PASS;
  401802:	2000      	movs	r0, #0
}
  401804:	f85d 4b04 	ldr.w	r4, [sp], #4
  401808:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40180a:	2100      	movs	r1, #0
  40180c:	e7e6      	b.n	4017dc <twihs_set_speed+0x38>
		c_lh_div = ul_mck / (ul_speed * TWIHS_CLK_DIVIDER) - TWIHS_CLK_CALC_ARGU;
  40180e:	0049      	lsls	r1, r1, #1
  401810:	fbb2 f2f1 	udiv	r2, r2, r1
  401814:	3a03      	subs	r2, #3
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401816:	2aff      	cmp	r2, #255	; 0xff
  401818:	d911      	bls.n	40183e <twihs_set_speed+0x9a>
  40181a:	2300      	movs	r3, #0
			ckdiv++;
  40181c:	3301      	adds	r3, #1
			c_lh_div /= TWIHS_CLK_DIVIDER;
  40181e:	0852      	lsrs	r2, r2, #1
		while ((c_lh_div > TWIHS_CLK_DIV_MAX) && (ckdiv < TWIHS_CLK_DIV_MIN)) {
  401820:	2aff      	cmp	r2, #255	; 0xff
  401822:	d901      	bls.n	401828 <twihs_set_speed+0x84>
  401824:	2b06      	cmp	r3, #6
  401826:	d9f9      	bls.n	40181c <twihs_set_speed+0x78>
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401828:	0211      	lsls	r1, r2, #8
  40182a:	b289      	uxth	r1, r1
				TWIHS_CWGR_CKDIV(ckdiv);
  40182c:	041b      	lsls	r3, r3, #16
  40182e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
				TWIHS_CWGR_CLDIV(c_lh_div) | TWIHS_CWGR_CHDIV(c_lh_div) |
  401832:	430b      	orrs	r3, r1
  401834:	b2d2      	uxtb	r2, r2
  401836:	431a      	orrs	r2, r3
		p_twihs->TWIHS_CWGR =
  401838:	6102      	str	r2, [r0, #16]
	return PASS;
  40183a:	2000      	movs	r0, #0
  40183c:	4770      	bx	lr
	uint32_t ckdiv = 0;
  40183e:	2300      	movs	r3, #0
  401840:	e7f2      	b.n	401828 <twihs_set_speed+0x84>
		return FAIL;
  401842:	2001      	movs	r0, #1
  401844:	4770      	bx	lr
  401846:	bf00      	nop
  401848:	00061a80 	.word	0x00061a80
  40184c:	057619f1 	.word	0x057619f1
  401850:	3ffd1200 	.word	0x3ffd1200

00401854 <twihs_master_init>:
{
  401854:	b508      	push	{r3, lr}
	p_twihs->TWIHS_IDR = ~0UL;
  401856:	f04f 32ff 	mov.w	r2, #4294967295
  40185a:	6282      	str	r2, [r0, #40]	; 0x28
	p_twihs->TWIHS_SR;
  40185c:	6a02      	ldr	r2, [r0, #32]
 * \param p_twihs Pointer to a TWIHS instance.
 */
void twihs_reset(Twihs *p_twihs)
{
	/* Set SWRST bit to reset TWIHS peripheral */
	p_twihs->TWIHS_CR = TWIHS_CR_SWRST;
  40185e:	2280      	movs	r2, #128	; 0x80
  401860:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_RHR;
  401862:	6b02      	ldr	r2, [r0, #48]	; 0x30
	p_twihs->TWIHS_CR = TWIHS_CR_MSDIS;
  401864:	2208      	movs	r2, #8
  401866:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_SVDIS;
  401868:	2220      	movs	r2, #32
  40186a:	6002      	str	r2, [r0, #0]
	p_twihs->TWIHS_CR = TWIHS_CR_MSEN;
  40186c:	2204      	movs	r2, #4
  40186e:	6002      	str	r2, [r0, #0]
	if (twihs_set_speed(p_twihs, p_opt->speed, p_opt->master_clk) == FAIL) {
  401870:	680a      	ldr	r2, [r1, #0]
  401872:	6849      	ldr	r1, [r1, #4]
  401874:	4b03      	ldr	r3, [pc, #12]	; (401884 <twihs_master_init+0x30>)
  401876:	4798      	blx	r3
}
  401878:	2801      	cmp	r0, #1
  40187a:	bf14      	ite	ne
  40187c:	2000      	movne	r0, #0
  40187e:	2001      	moveq	r0, #1
  401880:	bd08      	pop	{r3, pc}
  401882:	bf00      	nop
  401884:	004017a5 	.word	0x004017a5

00401888 <twihs_master_read>:
	uint32_t status, cnt = p_packet->length;
  401888:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
  40188a:	2a00      	cmp	r2, #0
  40188c:	d04c      	beq.n	401928 <twihs_master_read+0xa0>
{
  40188e:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  401890:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  401892:	2600      	movs	r6, #0
  401894:	6046      	str	r6, [r0, #4]
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  401896:	684b      	ldr	r3, [r1, #4]
  401898:	021b      	lsls	r3, r3, #8
  40189a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_MREAD | TWIHS_MMR_DADR(p_packet->chip) |
  40189e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
  4018a2:	7c0d      	ldrb	r5, [r1, #16]
  4018a4:	042d      	lsls	r5, r5, #16
  4018a6:	f405 05fe 	and.w	r5, r5, #8323072	; 0x7f0000
  4018aa:	432b      	orrs	r3, r5
  4018ac:	6043      	str	r3, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  4018ae:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4018b0:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  4018b2:	b15d      	cbz	r5, 4018cc <twihs_master_read+0x44>
	val = addr[0];
  4018b4:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
  4018b6:	2d01      	cmp	r5, #1
  4018b8:	dd02      	ble.n	4018c0 <twihs_master_read+0x38>
		val |= addr[1];
  4018ba:	784e      	ldrb	r6, [r1, #1]
  4018bc:	ea46 2303 	orr.w	r3, r6, r3, lsl #8
	if (len > 2) {
  4018c0:	2d02      	cmp	r5, #2
  4018c2:	dd04      	ble.n	4018ce <twihs_master_read+0x46>
		val |= addr[2];
  4018c4:	7889      	ldrb	r1, [r1, #2]
  4018c6:	ea41 2303 	orr.w	r3, r1, r3, lsl #8
  4018ca:	e000      	b.n	4018ce <twihs_master_read+0x46>
		return 0;
  4018cc:	2300      	movs	r3, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  4018ce:	60c3      	str	r3, [r0, #12]
	p_twihs->TWIHS_CR = TWIHS_CR_START;
  4018d0:	2301      	movs	r3, #1
  4018d2:	6003      	str	r3, [r0, #0]
			p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4018d4:	2502      	movs	r5, #2
  4018d6:	e012      	b.n	4018fe <twihs_master_read+0x76>
  4018d8:	6005      	str	r5, [r0, #0]
		if (!(status & TWIHS_SR_RXRDY)) {
  4018da:	f013 0f02 	tst.w	r3, #2
  4018de:	d01b      	beq.n	401918 <twihs_master_read+0x90>
		*buffer++ = p_twihs->TWIHS_RHR;
  4018e0:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4018e2:	7023      	strb	r3, [r4, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4018e4:	6a03      	ldr	r3, [r0, #32]
  4018e6:	f013 0f01 	tst.w	r3, #1
  4018ea:	d0fb      	beq.n	4018e4 <twihs_master_read+0x5c>
	p_twihs->TWIHS_SR;
  4018ec:	6a03      	ldr	r3, [r0, #32]
	return TWIHS_SUCCESS;
  4018ee:	2000      	movs	r0, #0
}
  4018f0:	bc70      	pop	{r4, r5, r6}
  4018f2:	4770      	bx	lr
		*buffer++ = p_twihs->TWIHS_RHR;
  4018f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
  4018f6:	f804 3b01 	strb.w	r3, [r4], #1
	while (cnt > 0) {
  4018fa:	3a01      	subs	r2, #1
  4018fc:	d0f2      	beq.n	4018e4 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  4018fe:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401900:	f413 7f80 	tst.w	r3, #256	; 0x100
  401904:	d114      	bne.n	401930 <twihs_master_read+0xa8>
  401906:	f247 5130 	movw	r1, #30000	; 0x7530
		if (cnt == 1) {
  40190a:	2a01      	cmp	r2, #1
  40190c:	d0e4      	beq.n	4018d8 <twihs_master_read+0x50>
		if (!(status & TWIHS_SR_RXRDY)) {
  40190e:	f013 0f02 	tst.w	r3, #2
  401912:	d1ef      	bne.n	4018f4 <twihs_master_read+0x6c>
	while (cnt > 0) {
  401914:	2a00      	cmp	r2, #0
  401916:	d0e5      	beq.n	4018e4 <twihs_master_read+0x5c>
		status = p_twihs->TWIHS_SR;
  401918:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  40191a:	f413 7f80 	tst.w	r3, #256	; 0x100
  40191e:	d105      	bne.n	40192c <twihs_master_read+0xa4>
		if (!timeout--) {
  401920:	3901      	subs	r1, #1
  401922:	d1f2      	bne.n	40190a <twihs_master_read+0x82>
			return TWIHS_ERROR_TIMEOUT;
  401924:	2009      	movs	r0, #9
  401926:	e7e3      	b.n	4018f0 <twihs_master_read+0x68>
		return TWIHS_INVALID_ARGUMENT;
  401928:	2001      	movs	r0, #1
  40192a:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  40192c:	2005      	movs	r0, #5
  40192e:	e7df      	b.n	4018f0 <twihs_master_read+0x68>
  401930:	2005      	movs	r0, #5
  401932:	e7dd      	b.n	4018f0 <twihs_master_read+0x68>

00401934 <twihs_master_write>:
	uint32_t status, cnt = p_packet->length;
  401934:	68cb      	ldr	r3, [r1, #12]
	if (cnt == 0) {
  401936:	2b00      	cmp	r3, #0
  401938:	d043      	beq.n	4019c2 <twihs_master_write+0x8e>
{
  40193a:	b470      	push	{r4, r5, r6}
	uint8_t *buffer = p_packet->buffer;
  40193c:	688c      	ldr	r4, [r1, #8]
	p_twihs->TWIHS_MMR = 0;
  40193e:	2600      	movs	r6, #0
  401940:	6046      	str	r6, [r0, #4]
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401942:	7c0a      	ldrb	r2, [r1, #16]
  401944:	0412      	lsls	r2, r2, #16
  401946:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
			((p_packet->addr_length << TWIHS_MMR_IADRSZ_Pos) &
  40194a:	684d      	ldr	r5, [r1, #4]
  40194c:	022d      	lsls	r5, r5, #8
  40194e:	f405 7540 	and.w	r5, r5, #768	; 0x300
	p_twihs->TWIHS_MMR = TWIHS_MMR_DADR(p_packet->chip) |
  401952:	432a      	orrs	r2, r5
  401954:	6042      	str	r2, [r0, #4]
	p_twihs->TWIHS_IADR = 0;
  401956:	60c6      	str	r6, [r0, #12]
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401958:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
  40195a:	b15d      	cbz	r5, 401974 <twihs_master_write+0x40>
	val = addr[0];
  40195c:	780a      	ldrb	r2, [r1, #0]
	if (len > 1) {
  40195e:	2d01      	cmp	r5, #1
  401960:	dd02      	ble.n	401968 <twihs_master_write+0x34>
		val |= addr[1];
  401962:	784e      	ldrb	r6, [r1, #1]
  401964:	ea46 2202 	orr.w	r2, r6, r2, lsl #8
	if (len > 2) {
  401968:	2d02      	cmp	r5, #2
  40196a:	dd04      	ble.n	401976 <twihs_master_write+0x42>
		val |= addr[2];
  40196c:	7889      	ldrb	r1, [r1, #2]
  40196e:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  401972:	e000      	b.n	401976 <twihs_master_write+0x42>
		return 0;
  401974:	2200      	movs	r2, #0
	p_twihs->TWIHS_IADR = twihs_mk_addr(p_packet->addr, p_packet->addr_length);
  401976:	60c2      	str	r2, [r0, #12]
  401978:	e004      	b.n	401984 <twihs_master_write+0x50>
		p_twihs->TWIHS_THR = *buffer++;
  40197a:	f814 2b01 	ldrb.w	r2, [r4], #1
  40197e:	6342      	str	r2, [r0, #52]	; 0x34
	while (cnt > 0) {
  401980:	3b01      	subs	r3, #1
  401982:	d00f      	beq.n	4019a4 <twihs_master_write+0x70>
		status = p_twihs->TWIHS_SR;
  401984:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401986:	f412 7f80 	tst.w	r2, #256	; 0x100
  40198a:	d11e      	bne.n	4019ca <twihs_master_write+0x96>
		if (!(status & TWIHS_SR_TXRDY)) {
  40198c:	f012 0f04 	tst.w	r2, #4
  401990:	d1f3      	bne.n	40197a <twihs_master_write+0x46>
		status = p_twihs->TWIHS_SR;
  401992:	6a02      	ldr	r2, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  401994:	f412 7f80 	tst.w	r2, #256	; 0x100
  401998:	d115      	bne.n	4019c6 <twihs_master_write+0x92>
		if (!(status & TWIHS_SR_TXRDY)) {
  40199a:	f012 0f04 	tst.w	r2, #4
  40199e:	d1ec      	bne.n	40197a <twihs_master_write+0x46>
	while (cnt > 0) {
  4019a0:	2b00      	cmp	r3, #0
  4019a2:	d1f6      	bne.n	401992 <twihs_master_write+0x5e>
		status = p_twihs->TWIHS_SR;
  4019a4:	6a03      	ldr	r3, [r0, #32]
		if (status & TWIHS_SR_NACK) {
  4019a6:	f413 7f80 	tst.w	r3, #256	; 0x100
  4019aa:	d111      	bne.n	4019d0 <twihs_master_write+0x9c>
		if (status & TWIHS_SR_TXRDY) {
  4019ac:	f013 0f04 	tst.w	r3, #4
  4019b0:	d0f8      	beq.n	4019a4 <twihs_master_write+0x70>
	p_twihs->TWIHS_CR = TWIHS_CR_STOP;
  4019b2:	2302      	movs	r3, #2
  4019b4:	6003      	str	r3, [r0, #0]
	while (!(p_twihs->TWIHS_SR & TWIHS_SR_TXCOMP)) {
  4019b6:	6a03      	ldr	r3, [r0, #32]
  4019b8:	f013 0f01 	tst.w	r3, #1
  4019bc:	d0fb      	beq.n	4019b6 <twihs_master_write+0x82>
	return TWIHS_SUCCESS;
  4019be:	2000      	movs	r0, #0
  4019c0:	e004      	b.n	4019cc <twihs_master_write+0x98>
		return TWIHS_INVALID_ARGUMENT;
  4019c2:	2001      	movs	r0, #1
  4019c4:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4019c6:	2005      	movs	r0, #5
  4019c8:	e000      	b.n	4019cc <twihs_master_write+0x98>
  4019ca:	2005      	movs	r0, #5
}
  4019cc:	bc70      	pop	{r4, r5, r6}
  4019ce:	4770      	bx	lr
			return TWIHS_RECEIVE_NACK;
  4019d0:	2005      	movs	r0, #5
  4019d2:	e7fb      	b.n	4019cc <twihs_master_write+0x98>

004019d4 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
  4019d4:	6943      	ldr	r3, [r0, #20]
  4019d6:	f013 0f02 	tst.w	r3, #2
  4019da:	d002      	beq.n	4019e2 <uart_write+0xe>
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
  4019dc:	61c1      	str	r1, [r0, #28]
	return 0;
  4019de:	2000      	movs	r0, #0
  4019e0:	4770      	bx	lr
		return 1;
  4019e2:	2001      	movs	r0, #1
}
  4019e4:	4770      	bx	lr

004019e6 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
  4019e6:	6943      	ldr	r3, [r0, #20]
  4019e8:	f013 0f01 	tst.w	r3, #1
  4019ec:	d003      	beq.n	4019f6 <uart_read+0x10>
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
  4019ee:	6983      	ldr	r3, [r0, #24]
  4019f0:	700b      	strb	r3, [r1, #0]
	return 0;
  4019f2:	2000      	movs	r0, #0
  4019f4:	4770      	bx	lr
		return 1;
  4019f6:	2001      	movs	r0, #1
}
  4019f8:	4770      	bx	lr

004019fa <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
  4019fa:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
  4019fc:	010b      	lsls	r3, r1, #4
  4019fe:	4293      	cmp	r3, r2
  401a00:	d914      	bls.n	401a2c <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401a02:	00c9      	lsls	r1, r1, #3
  401a04:	084b      	lsrs	r3, r1, #1
  401a06:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
  401a0a:	fbb2 f2f1 	udiv	r2, r2, r1
	cd = cd_fp >> 3;
  401a0e:	08d3      	lsrs	r3, r2, #3
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401a10:	1e5c      	subs	r4, r3, #1
  401a12:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401a16:	428c      	cmp	r4, r1
  401a18:	d901      	bls.n	401a1e <usart_set_async_baudrate+0x24>
		return 1;
  401a1a:	2001      	movs	r0, #1
  401a1c:	e017      	b.n	401a4e <usart_set_async_baudrate+0x54>
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
  401a1e:	6841      	ldr	r1, [r0, #4]
  401a20:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
  401a24:	6041      	str	r1, [r0, #4]
  401a26:	e00c      	b.n	401a42 <usart_set_async_baudrate+0x48>
		return 1;
  401a28:	2001      	movs	r0, #1
  401a2a:	e010      	b.n	401a4e <usart_set_async_baudrate+0x54>
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
  401a2c:	0859      	lsrs	r1, r3, #1
  401a2e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
  401a32:	fbb2 f2f3 	udiv	r2, r2, r3
	cd = cd_fp >> 3;
  401a36:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
  401a38:	1e5c      	subs	r4, r3, #1
  401a3a:	f64f 71fe 	movw	r1, #65534	; 0xfffe
  401a3e:	428c      	cmp	r4, r1
  401a40:	d8f2      	bhi.n	401a28 <usart_set_async_baudrate+0x2e>
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
  401a42:	0412      	lsls	r2, r2, #16
  401a44:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
  401a48:	431a      	orrs	r2, r3
  401a4a:	6202      	str	r2, [r0, #32]

	return 0;
  401a4c:	2000      	movs	r0, #0
}
  401a4e:	f85d 4b04 	ldr.w	r4, [sp], #4
  401a52:	4770      	bx	lr

00401a54 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
  401a54:	4b08      	ldr	r3, [pc, #32]	; (401a78 <usart_reset+0x24>)
  401a56:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
	p_usart->US_MR = 0;
  401a5a:	2300      	movs	r3, #0
  401a5c:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
  401a5e:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
  401a60:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
  401a62:	2388      	movs	r3, #136	; 0x88
  401a64:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
  401a66:	2324      	movs	r3, #36	; 0x24
  401a68:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RSTSTA;
  401a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
  401a6e:	6003      	str	r3, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
  401a70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  401a74:	6003      	str	r3, [r0, #0]
  401a76:	4770      	bx	lr
  401a78:	55534100 	.word	0x55534100

00401a7c <usart_init_rs232>:
{
  401a7c:	b570      	push	{r4, r5, r6, lr}
  401a7e:	4605      	mov	r5, r0
  401a80:	460c      	mov	r4, r1
  401a82:	4616      	mov	r6, r2
	usart_reset(p_usart);
  401a84:	4b0f      	ldr	r3, [pc, #60]	; (401ac4 <usart_init_rs232+0x48>)
  401a86:	4798      	blx	r3
	ul_reg_val = 0;
  401a88:	2200      	movs	r2, #0
  401a8a:	4b0f      	ldr	r3, [pc, #60]	; (401ac8 <usart_init_rs232+0x4c>)
  401a8c:	601a      	str	r2, [r3, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
  401a8e:	b1a4      	cbz	r4, 401aba <usart_init_rs232+0x3e>
  401a90:	4632      	mov	r2, r6
  401a92:	6821      	ldr	r1, [r4, #0]
  401a94:	4628      	mov	r0, r5
  401a96:	4b0d      	ldr	r3, [pc, #52]	; (401acc <usart_init_rs232+0x50>)
  401a98:	4798      	blx	r3
  401a9a:	4602      	mov	r2, r0
  401a9c:	b978      	cbnz	r0, 401abe <usart_init_rs232+0x42>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401a9e:	6863      	ldr	r3, [r4, #4]
  401aa0:	68a1      	ldr	r1, [r4, #8]
  401aa2:	430b      	orrs	r3, r1
  401aa4:	6921      	ldr	r1, [r4, #16]
  401aa6:	430b      	orrs	r3, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
  401aa8:	68e1      	ldr	r1, [r4, #12]
  401aaa:	430b      	orrs	r3, r1
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
  401aac:	4906      	ldr	r1, [pc, #24]	; (401ac8 <usart_init_rs232+0x4c>)
  401aae:	600b      	str	r3, [r1, #0]
	p_usart->US_MR |= ul_reg_val;
  401ab0:	6869      	ldr	r1, [r5, #4]
  401ab2:	430b      	orrs	r3, r1
  401ab4:	606b      	str	r3, [r5, #4]
}
  401ab6:	4610      	mov	r0, r2
  401ab8:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
  401aba:	2201      	movs	r2, #1
  401abc:	e7fb      	b.n	401ab6 <usart_init_rs232+0x3a>
  401abe:	2201      	movs	r2, #1
  401ac0:	e7f9      	b.n	401ab6 <usart_init_rs232+0x3a>
  401ac2:	bf00      	nop
  401ac4:	00401a55 	.word	0x00401a55
  401ac8:	20400e14 	.word	0x20400e14
  401acc:	004019fb 	.word	0x004019fb

00401ad0 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
  401ad0:	2340      	movs	r3, #64	; 0x40
  401ad2:	6003      	str	r3, [r0, #0]
  401ad4:	4770      	bx	lr

00401ad6 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
  401ad6:	2310      	movs	r3, #16
  401ad8:	6003      	str	r3, [r0, #0]
  401ada:	4770      	bx	lr

00401adc <usart_write>:
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
  401adc:	6943      	ldr	r3, [r0, #20]
  401ade:	f013 0f02 	tst.w	r3, #2
  401ae2:	d004      	beq.n	401aee <usart_write+0x12>
	p_usart->US_THR = US_THR_TXCHR(c);
  401ae4:	f3c1 0108 	ubfx	r1, r1, #0, #9
  401ae8:	61c1      	str	r1, [r0, #28]
	return 0;
  401aea:	2000      	movs	r0, #0
  401aec:	4770      	bx	lr
		return 1;
  401aee:	2001      	movs	r0, #1
}
  401af0:	4770      	bx	lr

00401af2 <usart_read>:
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
  401af2:	6943      	ldr	r3, [r0, #20]
  401af4:	f013 0f01 	tst.w	r3, #1
  401af8:	d005      	beq.n	401b06 <usart_read+0x14>
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
  401afa:	6983      	ldr	r3, [r0, #24]
  401afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
  401b00:	600b      	str	r3, [r1, #0]
	return 0;
  401b02:	2000      	movs	r0, #0
  401b04:	4770      	bx	lr
		return 1;
  401b06:	2001      	movs	r0, #1
}
  401b08:	4770      	bx	lr

00401b0a <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  401b0a:	e7fe      	b.n	401b0a <Dummy_Handler>

00401b0c <Reset_Handler>:
{
  401b0c:	b500      	push	{lr}
  401b0e:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  401b10:	4b25      	ldr	r3, [pc, #148]	; (401ba8 <Reset_Handler+0x9c>)
  401b12:	4a26      	ldr	r2, [pc, #152]	; (401bac <Reset_Handler+0xa0>)
  401b14:	429a      	cmp	r2, r3
  401b16:	d010      	beq.n	401b3a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  401b18:	4b25      	ldr	r3, [pc, #148]	; (401bb0 <Reset_Handler+0xa4>)
  401b1a:	4a23      	ldr	r2, [pc, #140]	; (401ba8 <Reset_Handler+0x9c>)
  401b1c:	429a      	cmp	r2, r3
  401b1e:	d20c      	bcs.n	401b3a <Reset_Handler+0x2e>
  401b20:	3b01      	subs	r3, #1
  401b22:	1a9b      	subs	r3, r3, r2
  401b24:	f023 0303 	bic.w	r3, r3, #3
  401b28:	3304      	adds	r3, #4
  401b2a:	4413      	add	r3, r2
  401b2c:	491f      	ldr	r1, [pc, #124]	; (401bac <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  401b2e:	f851 0b04 	ldr.w	r0, [r1], #4
  401b32:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  401b36:	429a      	cmp	r2, r3
  401b38:	d1f9      	bne.n	401b2e <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  401b3a:	4b1e      	ldr	r3, [pc, #120]	; (401bb4 <Reset_Handler+0xa8>)
  401b3c:	4a1e      	ldr	r2, [pc, #120]	; (401bb8 <Reset_Handler+0xac>)
  401b3e:	429a      	cmp	r2, r3
  401b40:	d20a      	bcs.n	401b58 <Reset_Handler+0x4c>
  401b42:	3b01      	subs	r3, #1
  401b44:	1a9b      	subs	r3, r3, r2
  401b46:	f023 0303 	bic.w	r3, r3, #3
  401b4a:	3304      	adds	r3, #4
  401b4c:	4413      	add	r3, r2
                *pDest++ = 0;
  401b4e:	2100      	movs	r1, #0
  401b50:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  401b54:	4293      	cmp	r3, r2
  401b56:	d1fb      	bne.n	401b50 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  401b58:	4a18      	ldr	r2, [pc, #96]	; (401bbc <Reset_Handler+0xb0>)
  401b5a:	4b19      	ldr	r3, [pc, #100]	; (401bc0 <Reset_Handler+0xb4>)
  401b5c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  401b60:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  401b62:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  401b66:	fab3 f383 	clz	r3, r3
  401b6a:	095b      	lsrs	r3, r3, #5
  401b6c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  401b6e:	b672      	cpsid	i
  __ASM volatile ("dmb");
  401b70:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  401b74:	2200      	movs	r2, #0
  401b76:	4b13      	ldr	r3, [pc, #76]	; (401bc4 <Reset_Handler+0xb8>)
  401b78:	701a      	strb	r2, [r3, #0]
	return flags;
  401b7a:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  401b7c:	4a12      	ldr	r2, [pc, #72]	; (401bc8 <Reset_Handler+0xbc>)
  401b7e:	6813      	ldr	r3, [r2, #0]
  401b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  401b84:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  401b86:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  401b8a:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  401b8e:	b129      	cbz	r1, 401b9c <Reset_Handler+0x90>
		cpu_irq_enable();
  401b90:	2201      	movs	r2, #1
  401b92:	4b0c      	ldr	r3, [pc, #48]	; (401bc4 <Reset_Handler+0xb8>)
  401b94:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  401b96:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  401b9a:	b662      	cpsie	i
        __libc_init_array();
  401b9c:	4b0b      	ldr	r3, [pc, #44]	; (401bcc <Reset_Handler+0xc0>)
  401b9e:	4798      	blx	r3
        main();
  401ba0:	4b0b      	ldr	r3, [pc, #44]	; (401bd0 <Reset_Handler+0xc4>)
  401ba2:	4798      	blx	r3
  401ba4:	e7fe      	b.n	401ba4 <Reset_Handler+0x98>
  401ba6:	bf00      	nop
  401ba8:	20400000 	.word	0x20400000
  401bac:	004124b0 	.word	0x004124b0
  401bb0:	204009c8 	.word	0x204009c8
  401bb4:	2040c820 	.word	0x2040c820
  401bb8:	204009c8 	.word	0x204009c8
  401bbc:	e000ed00 	.word	0xe000ed00
  401bc0:	00400000 	.word	0x00400000
  401bc4:	2040000a 	.word	0x2040000a
  401bc8:	e000ed88 	.word	0xe000ed88
  401bcc:	004040e1 	.word	0x004040e1
  401bd0:	00403fd9 	.word	0x00403fd9

00401bd4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  401bd4:	4b3b      	ldr	r3, [pc, #236]	; (401cc4 <SystemCoreClockUpdate+0xf0>)
  401bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bd8:	f003 0303 	and.w	r3, r3, #3
  401bdc:	2b01      	cmp	r3, #1
  401bde:	d01d      	beq.n	401c1c <SystemCoreClockUpdate+0x48>
  401be0:	b183      	cbz	r3, 401c04 <SystemCoreClockUpdate+0x30>
  401be2:	2b02      	cmp	r3, #2
  401be4:	d036      	beq.n	401c54 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  401be6:	4b37      	ldr	r3, [pc, #220]	; (401cc4 <SystemCoreClockUpdate+0xf0>)
  401be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401bea:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401bee:	2b70      	cmp	r3, #112	; 0x70
  401bf0:	d05f      	beq.n	401cb2 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  401bf2:	4b34      	ldr	r3, [pc, #208]	; (401cc4 <SystemCoreClockUpdate+0xf0>)
  401bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  401bf6:	4934      	ldr	r1, [pc, #208]	; (401cc8 <SystemCoreClockUpdate+0xf4>)
  401bf8:	f3c2 1202 	ubfx	r2, r2, #4, #3
  401bfc:	680b      	ldr	r3, [r1, #0]
  401bfe:	40d3      	lsrs	r3, r2
  401c00:	600b      	str	r3, [r1, #0]
  401c02:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  401c04:	4b31      	ldr	r3, [pc, #196]	; (401ccc <SystemCoreClockUpdate+0xf8>)
  401c06:	695b      	ldr	r3, [r3, #20]
  401c08:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  401c0c:	bf14      	ite	ne
  401c0e:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  401c12:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  401c16:	4b2c      	ldr	r3, [pc, #176]	; (401cc8 <SystemCoreClockUpdate+0xf4>)
  401c18:	601a      	str	r2, [r3, #0]
  401c1a:	e7e4      	b.n	401be6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401c1c:	4b29      	ldr	r3, [pc, #164]	; (401cc4 <SystemCoreClockUpdate+0xf0>)
  401c1e:	6a1b      	ldr	r3, [r3, #32]
  401c20:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401c24:	d003      	beq.n	401c2e <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  401c26:	4a2a      	ldr	r2, [pc, #168]	; (401cd0 <SystemCoreClockUpdate+0xfc>)
  401c28:	4b27      	ldr	r3, [pc, #156]	; (401cc8 <SystemCoreClockUpdate+0xf4>)
  401c2a:	601a      	str	r2, [r3, #0]
  401c2c:	e7db      	b.n	401be6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401c2e:	4a29      	ldr	r2, [pc, #164]	; (401cd4 <SystemCoreClockUpdate+0x100>)
  401c30:	4b25      	ldr	r3, [pc, #148]	; (401cc8 <SystemCoreClockUpdate+0xf4>)
  401c32:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401c34:	4b23      	ldr	r3, [pc, #140]	; (401cc4 <SystemCoreClockUpdate+0xf0>)
  401c36:	6a1b      	ldr	r3, [r3, #32]
  401c38:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c3c:	2b10      	cmp	r3, #16
  401c3e:	d005      	beq.n	401c4c <SystemCoreClockUpdate+0x78>
  401c40:	2b20      	cmp	r3, #32
  401c42:	d1d0      	bne.n	401be6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  401c44:	4a22      	ldr	r2, [pc, #136]	; (401cd0 <SystemCoreClockUpdate+0xfc>)
  401c46:	4b20      	ldr	r3, [pc, #128]	; (401cc8 <SystemCoreClockUpdate+0xf4>)
  401c48:	601a      	str	r2, [r3, #0]
          break;
  401c4a:	e7cc      	b.n	401be6 <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  401c4c:	4a22      	ldr	r2, [pc, #136]	; (401cd8 <SystemCoreClockUpdate+0x104>)
  401c4e:	4b1e      	ldr	r3, [pc, #120]	; (401cc8 <SystemCoreClockUpdate+0xf4>)
  401c50:	601a      	str	r2, [r3, #0]
          break;
  401c52:	e7c8      	b.n	401be6 <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  401c54:	4b1b      	ldr	r3, [pc, #108]	; (401cc4 <SystemCoreClockUpdate+0xf0>)
  401c56:	6a1b      	ldr	r3, [r3, #32]
  401c58:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  401c5c:	d016      	beq.n	401c8c <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  401c5e:	4a1c      	ldr	r2, [pc, #112]	; (401cd0 <SystemCoreClockUpdate+0xfc>)
  401c60:	4b19      	ldr	r3, [pc, #100]	; (401cc8 <SystemCoreClockUpdate+0xf4>)
  401c62:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  401c64:	4b17      	ldr	r3, [pc, #92]	; (401cc4 <SystemCoreClockUpdate+0xf0>)
  401c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  401c68:	f003 0303 	and.w	r3, r3, #3
  401c6c:	2b02      	cmp	r3, #2
  401c6e:	d1ba      	bne.n	401be6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401c70:	4a14      	ldr	r2, [pc, #80]	; (401cc4 <SystemCoreClockUpdate+0xf0>)
  401c72:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401c74:	6a92      	ldr	r2, [r2, #40]	; 0x28
  401c76:	4814      	ldr	r0, [pc, #80]	; (401cc8 <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  401c78:	f3c1 410a 	ubfx	r1, r1, #16, #11
  401c7c:	6803      	ldr	r3, [r0, #0]
  401c7e:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  401c82:	b2d2      	uxtb	r2, r2
  401c84:	fbb3 f3f2 	udiv	r3, r3, r2
  401c88:	6003      	str	r3, [r0, #0]
  401c8a:	e7ac      	b.n	401be6 <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  401c8c:	4a11      	ldr	r2, [pc, #68]	; (401cd4 <SystemCoreClockUpdate+0x100>)
  401c8e:	4b0e      	ldr	r3, [pc, #56]	; (401cc8 <SystemCoreClockUpdate+0xf4>)
  401c90:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  401c92:	4b0c      	ldr	r3, [pc, #48]	; (401cc4 <SystemCoreClockUpdate+0xf0>)
  401c94:	6a1b      	ldr	r3, [r3, #32]
  401c96:	f003 0370 	and.w	r3, r3, #112	; 0x70
  401c9a:	2b10      	cmp	r3, #16
  401c9c:	d005      	beq.n	401caa <SystemCoreClockUpdate+0xd6>
  401c9e:	2b20      	cmp	r3, #32
  401ca0:	d1e0      	bne.n	401c64 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  401ca2:	4a0b      	ldr	r2, [pc, #44]	; (401cd0 <SystemCoreClockUpdate+0xfc>)
  401ca4:	4b08      	ldr	r3, [pc, #32]	; (401cc8 <SystemCoreClockUpdate+0xf4>)
  401ca6:	601a      	str	r2, [r3, #0]
          break;
  401ca8:	e7dc      	b.n	401c64 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  401caa:	4a0b      	ldr	r2, [pc, #44]	; (401cd8 <SystemCoreClockUpdate+0x104>)
  401cac:	4b06      	ldr	r3, [pc, #24]	; (401cc8 <SystemCoreClockUpdate+0xf4>)
  401cae:	601a      	str	r2, [r3, #0]
          break;
  401cb0:	e7d8      	b.n	401c64 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  401cb2:	4a05      	ldr	r2, [pc, #20]	; (401cc8 <SystemCoreClockUpdate+0xf4>)
  401cb4:	6813      	ldr	r3, [r2, #0]
  401cb6:	4909      	ldr	r1, [pc, #36]	; (401cdc <SystemCoreClockUpdate+0x108>)
  401cb8:	fba1 1303 	umull	r1, r3, r1, r3
  401cbc:	085b      	lsrs	r3, r3, #1
  401cbe:	6013      	str	r3, [r2, #0]
  401cc0:	4770      	bx	lr
  401cc2:	bf00      	nop
  401cc4:	400e0600 	.word	0x400e0600
  401cc8:	2040000c 	.word	0x2040000c
  401ccc:	400e1810 	.word	0x400e1810
  401cd0:	00b71b00 	.word	0x00b71b00
  401cd4:	003d0900 	.word	0x003d0900
  401cd8:	007a1200 	.word	0x007a1200
  401cdc:	aaaaaaab 	.word	0xaaaaaaab

00401ce0 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  401ce0:	4b16      	ldr	r3, [pc, #88]	; (401d3c <system_init_flash+0x5c>)
  401ce2:	4298      	cmp	r0, r3
  401ce4:	d913      	bls.n	401d0e <system_init_flash+0x2e>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  401ce6:	4b16      	ldr	r3, [pc, #88]	; (401d40 <system_init_flash+0x60>)
  401ce8:	4298      	cmp	r0, r3
  401cea:	d915      	bls.n	401d18 <system_init_flash+0x38>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  401cec:	4b15      	ldr	r3, [pc, #84]	; (401d44 <system_init_flash+0x64>)
  401cee:	4298      	cmp	r0, r3
  401cf0:	d916      	bls.n	401d20 <system_init_flash+0x40>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  401cf2:	4b15      	ldr	r3, [pc, #84]	; (401d48 <system_init_flash+0x68>)
  401cf4:	4298      	cmp	r0, r3
  401cf6:	d917      	bls.n	401d28 <system_init_flash+0x48>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  401cf8:	4b14      	ldr	r3, [pc, #80]	; (401d4c <system_init_flash+0x6c>)
  401cfa:	4298      	cmp	r0, r3
  401cfc:	d918      	bls.n	401d30 <system_init_flash+0x50>
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
          }
          else
          {
            if ( ul_clk < CHIP_FREQ_FWS_5 )
  401cfe:	4b14      	ldr	r3, [pc, #80]	; (401d50 <system_init_flash+0x70>)
  401d00:	4298      	cmp	r0, r3
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  401d02:	bf94      	ite	ls
  401d04:	4a13      	ldrls	r2, [pc, #76]	; (401d54 <system_init_flash+0x74>)
            }
            else
            {
              EFC->EEFC_FMR = EEFC_FMR_FWS(6)|EEFC_FMR_CLOE;
  401d06:	4a14      	ldrhi	r2, [pc, #80]	; (401d58 <system_init_flash+0x78>)
  401d08:	4b14      	ldr	r3, [pc, #80]	; (401d5c <system_init_flash+0x7c>)
  401d0a:	601a      	str	r2, [r3, #0]
  401d0c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  401d0e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  401d12:	4b12      	ldr	r3, [pc, #72]	; (401d5c <system_init_flash+0x7c>)
  401d14:	601a      	str	r2, [r3, #0]
  401d16:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  401d18:	4a11      	ldr	r2, [pc, #68]	; (401d60 <system_init_flash+0x80>)
  401d1a:	4b10      	ldr	r3, [pc, #64]	; (401d5c <system_init_flash+0x7c>)
  401d1c:	601a      	str	r2, [r3, #0]
  401d1e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  401d20:	4a10      	ldr	r2, [pc, #64]	; (401d64 <system_init_flash+0x84>)
  401d22:	4b0e      	ldr	r3, [pc, #56]	; (401d5c <system_init_flash+0x7c>)
  401d24:	601a      	str	r2, [r3, #0]
  401d26:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  401d28:	4a0f      	ldr	r2, [pc, #60]	; (401d68 <system_init_flash+0x88>)
  401d2a:	4b0c      	ldr	r3, [pc, #48]	; (401d5c <system_init_flash+0x7c>)
  401d2c:	601a      	str	r2, [r3, #0]
  401d2e:	4770      	bx	lr
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  401d30:	f04f 2204 	mov.w	r2, #67109888	; 0x4000400
  401d34:	4b09      	ldr	r3, [pc, #36]	; (401d5c <system_init_flash+0x7c>)
  401d36:	601a      	str	r2, [r3, #0]
  401d38:	4770      	bx	lr
  401d3a:	bf00      	nop
  401d3c:	015ef3bf 	.word	0x015ef3bf
  401d40:	02bde77f 	.word	0x02bde77f
  401d44:	041cdb3f 	.word	0x041cdb3f
  401d48:	057bceff 	.word	0x057bceff
  401d4c:	06dac2bf 	.word	0x06dac2bf
  401d50:	0839b67f 	.word	0x0839b67f
  401d54:	04000500 	.word	0x04000500
  401d58:	04000600 	.word	0x04000600
  401d5c:	400e0c00 	.word	0x400e0c00
  401d60:	04000100 	.word	0x04000100
  401d64:	04000200 	.word	0x04000200
  401d68:	04000300 	.word	0x04000300

00401d6c <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
  401d6c:	4b0a      	ldr	r3, [pc, #40]	; (401d98 <_sbrk+0x2c>)
  401d6e:	681b      	ldr	r3, [r3, #0]
  401d70:	b153      	cbz	r3, 401d88 <_sbrk+0x1c>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
  401d72:	4b09      	ldr	r3, [pc, #36]	; (401d98 <_sbrk+0x2c>)
  401d74:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
  401d76:	181a      	adds	r2, r3, r0
  401d78:	4908      	ldr	r1, [pc, #32]	; (401d9c <_sbrk+0x30>)
  401d7a:	4291      	cmp	r1, r2
  401d7c:	db08      	blt.n	401d90 <_sbrk+0x24>
		return (caddr_t) -1;	
	}

	heap += incr;
  401d7e:	4610      	mov	r0, r2
  401d80:	4a05      	ldr	r2, [pc, #20]	; (401d98 <_sbrk+0x2c>)
  401d82:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
  401d84:	4618      	mov	r0, r3
  401d86:	4770      	bx	lr
		heap = (unsigned char *)&_end;
  401d88:	4a05      	ldr	r2, [pc, #20]	; (401da0 <_sbrk+0x34>)
  401d8a:	4b03      	ldr	r3, [pc, #12]	; (401d98 <_sbrk+0x2c>)
  401d8c:	601a      	str	r2, [r3, #0]
  401d8e:	e7f0      	b.n	401d72 <_sbrk+0x6>
		return (caddr_t) -1;	
  401d90:	f04f 30ff 	mov.w	r0, #4294967295
}
  401d94:	4770      	bx	lr
  401d96:	bf00      	nop
  401d98:	20400e18 	.word	0x20400e18
  401d9c:	2045fffc 	.word	0x2045fffc
  401da0:	2040ea20 	.word	0x2040ea20

00401da4 <_close>:
}

extern int _close(int file)
{
	return -1;
}
  401da4:	f04f 30ff 	mov.w	r0, #4294967295
  401da8:	4770      	bx	lr

00401daa <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
  401daa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  401dae:	604b      	str	r3, [r1, #4]

	return 0;
}
  401db0:	2000      	movs	r0, #0
  401db2:	4770      	bx	lr

00401db4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
  401db4:	2001      	movs	r0, #1
  401db6:	4770      	bx	lr

00401db8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
  401db8:	2000      	movs	r0, #0
  401dba:	4770      	bx	lr

00401dbc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401dbc:	f100 0308 	add.w	r3, r0, #8
  401dc0:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
  401dc2:	f04f 32ff 	mov.w	r2, #4294967295
  401dc6:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401dc8:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401dca:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
  401dcc:	2300      	movs	r3, #0
  401dce:	6003      	str	r3, [r0, #0]
  401dd0:	4770      	bx	lr

00401dd2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
  401dd2:	2300      	movs	r3, #0
  401dd4:	6103      	str	r3, [r0, #16]
  401dd6:	4770      	bx	lr

00401dd8 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
  401dd8:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
  401dda:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
  401ddc:	689a      	ldr	r2, [r3, #8]
  401dde:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
  401de0:	689a      	ldr	r2, [r3, #8]
  401de2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
  401de4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401de6:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401de8:	6803      	ldr	r3, [r0, #0]
  401dea:	3301      	adds	r3, #1
  401dec:	6003      	str	r3, [r0, #0]
  401dee:	4770      	bx	lr

00401df0 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
  401df0:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
  401df2:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
  401df4:	f1b5 3fff 	cmp.w	r5, #4294967295
  401df8:	d002      	beq.n	401e00 <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401dfa:	f100 0208 	add.w	r2, r0, #8
  401dfe:	e002      	b.n	401e06 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
  401e00:	6902      	ldr	r2, [r0, #16]
  401e02:	e004      	b.n	401e0e <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
  401e04:	461a      	mov	r2, r3
  401e06:	6853      	ldr	r3, [r2, #4]
  401e08:	681c      	ldr	r4, [r3, #0]
  401e0a:	42a5      	cmp	r5, r4
  401e0c:	d2fa      	bcs.n	401e04 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
  401e0e:	6853      	ldr	r3, [r2, #4]
  401e10:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
  401e12:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
  401e14:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
  401e16:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
  401e18:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
  401e1a:	6803      	ldr	r3, [r0, #0]
  401e1c:	3301      	adds	r3, #1
  401e1e:	6003      	str	r3, [r0, #0]
}
  401e20:	bc30      	pop	{r4, r5}
  401e22:	4770      	bx	lr

00401e24 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
  401e24:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
  401e26:	6842      	ldr	r2, [r0, #4]
  401e28:	6881      	ldr	r1, [r0, #8]
  401e2a:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
  401e2c:	6882      	ldr	r2, [r0, #8]
  401e2e:	6841      	ldr	r1, [r0, #4]
  401e30:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
  401e32:	685a      	ldr	r2, [r3, #4]
  401e34:	4290      	cmp	r0, r2
  401e36:	d005      	beq.n	401e44 <uxListRemove+0x20>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
  401e38:	2200      	movs	r2, #0
  401e3a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
  401e3c:	6818      	ldr	r0, [r3, #0]
  401e3e:	3801      	subs	r0, #1
  401e40:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
  401e42:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
  401e44:	6882      	ldr	r2, [r0, #8]
  401e46:	605a      	str	r2, [r3, #4]
  401e48:	e7f6      	b.n	401e38 <uxListRemove+0x14>
	...

00401e4c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
  401e4c:	4b0d      	ldr	r3, [pc, #52]	; (401e84 <prvTaskExitError+0x38>)
  401e4e:	681b      	ldr	r3, [r3, #0]
  401e50:	f1b3 3fff 	cmp.w	r3, #4294967295
  401e54:	d00a      	beq.n	401e6c <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
  401e56:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e5a:	b672      	cpsid	i
  401e5c:	f383 8811 	msr	BASEPRI, r3
  401e60:	f3bf 8f6f 	isb	sy
  401e64:	f3bf 8f4f 	dsb	sy
  401e68:	b662      	cpsie	i
  401e6a:	e7fe      	b.n	401e6a <prvTaskExitError+0x1e>
  401e6c:	f04f 0380 	mov.w	r3, #128	; 0x80
  401e70:	b672      	cpsid	i
  401e72:	f383 8811 	msr	BASEPRI, r3
  401e76:	f3bf 8f6f 	isb	sy
  401e7a:	f3bf 8f4f 	dsb	sy
  401e7e:	b662      	cpsie	i
  401e80:	e7fe      	b.n	401e80 <prvTaskExitError+0x34>
  401e82:	bf00      	nop
  401e84:	20400010 	.word	0x20400010

00401e88 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
  401e88:	4806      	ldr	r0, [pc, #24]	; (401ea4 <prvPortStartFirstTask+0x1c>)
  401e8a:	6800      	ldr	r0, [r0, #0]
  401e8c:	6800      	ldr	r0, [r0, #0]
  401e8e:	f380 8808 	msr	MSP, r0
  401e92:	b662      	cpsie	i
  401e94:	b661      	cpsie	f
  401e96:	f3bf 8f4f 	dsb	sy
  401e9a:	f3bf 8f6f 	isb	sy
  401e9e:	df00      	svc	0
  401ea0:	bf00      	nop
  401ea2:	0000      	.short	0x0000
  401ea4:	e000ed08 	.word	0xe000ed08

00401ea8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
  401ea8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 401eb8 <vPortEnableVFP+0x10>
  401eac:	6801      	ldr	r1, [r0, #0]
  401eae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401eb2:	6001      	str	r1, [r0, #0]
  401eb4:	4770      	bx	lr
  401eb6:	0000      	.short	0x0000
  401eb8:	e000ed88 	.word	0xe000ed88

00401ebc <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
  401ebc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
  401ec0:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
  401ec4:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
  401ec8:	4b05      	ldr	r3, [pc, #20]	; (401ee0 <pxPortInitialiseStack+0x24>)
  401eca:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
  401ece:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
  401ed2:	f06f 0302 	mvn.w	r3, #2
  401ed6:	f840 3c24 	str.w	r3, [r0, #-36]
}
  401eda:	3844      	subs	r0, #68	; 0x44
  401edc:	4770      	bx	lr
  401ede:	bf00      	nop
  401ee0:	00401e4d 	.word	0x00401e4d

00401ee4 <SVC_Handler>:
	__asm volatile (
  401ee4:	4b06      	ldr	r3, [pc, #24]	; (401f00 <pxCurrentTCBConst2>)
  401ee6:	6819      	ldr	r1, [r3, #0]
  401ee8:	6808      	ldr	r0, [r1, #0]
  401eea:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401eee:	f380 8809 	msr	PSP, r0
  401ef2:	f3bf 8f6f 	isb	sy
  401ef6:	f04f 0000 	mov.w	r0, #0
  401efa:	f380 8811 	msr	BASEPRI, r0
  401efe:	4770      	bx	lr

00401f00 <pxCurrentTCBConst2>:
  401f00:	2040c62c 	.word	0x2040c62c
  401f04:	4770      	bx	lr
  401f06:	bf00      	nop

00401f08 <vPortEnterCritical>:
  401f08:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f0c:	b672      	cpsid	i
  401f0e:	f383 8811 	msr	BASEPRI, r3
  401f12:	f3bf 8f6f 	isb	sy
  401f16:	f3bf 8f4f 	dsb	sy
  401f1a:	b662      	cpsie	i
	uxCriticalNesting++;
  401f1c:	4a0b      	ldr	r2, [pc, #44]	; (401f4c <vPortEnterCritical+0x44>)
  401f1e:	6813      	ldr	r3, [r2, #0]
  401f20:	3301      	adds	r3, #1
  401f22:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
  401f24:	2b01      	cmp	r3, #1
  401f26:	d10f      	bne.n	401f48 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
  401f28:	4b09      	ldr	r3, [pc, #36]	; (401f50 <vPortEnterCritical+0x48>)
  401f2a:	681b      	ldr	r3, [r3, #0]
  401f2c:	f013 0fff 	tst.w	r3, #255	; 0xff
  401f30:	d00a      	beq.n	401f48 <vPortEnterCritical+0x40>
  401f32:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f36:	b672      	cpsid	i
  401f38:	f383 8811 	msr	BASEPRI, r3
  401f3c:	f3bf 8f6f 	isb	sy
  401f40:	f3bf 8f4f 	dsb	sy
  401f44:	b662      	cpsie	i
  401f46:	e7fe      	b.n	401f46 <vPortEnterCritical+0x3e>
  401f48:	4770      	bx	lr
  401f4a:	bf00      	nop
  401f4c:	20400010 	.word	0x20400010
  401f50:	e000ed04 	.word	0xe000ed04

00401f54 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
  401f54:	4b0a      	ldr	r3, [pc, #40]	; (401f80 <vPortExitCritical+0x2c>)
  401f56:	681b      	ldr	r3, [r3, #0]
  401f58:	b953      	cbnz	r3, 401f70 <vPortExitCritical+0x1c>
  401f5a:	f04f 0380 	mov.w	r3, #128	; 0x80
  401f5e:	b672      	cpsid	i
  401f60:	f383 8811 	msr	BASEPRI, r3
  401f64:	f3bf 8f6f 	isb	sy
  401f68:	f3bf 8f4f 	dsb	sy
  401f6c:	b662      	cpsie	i
  401f6e:	e7fe      	b.n	401f6e <vPortExitCritical+0x1a>
	uxCriticalNesting--;
  401f70:	3b01      	subs	r3, #1
  401f72:	4a03      	ldr	r2, [pc, #12]	; (401f80 <vPortExitCritical+0x2c>)
  401f74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
  401f76:	b90b      	cbnz	r3, 401f7c <vPortExitCritical+0x28>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
  401f78:	f383 8811 	msr	BASEPRI, r3
  401f7c:	4770      	bx	lr
  401f7e:	bf00      	nop
  401f80:	20400010 	.word	0x20400010

00401f84 <PendSV_Handler>:
	__asm volatile
  401f84:	f3ef 8009 	mrs	r0, PSP
  401f88:	f3bf 8f6f 	isb	sy
  401f8c:	4b15      	ldr	r3, [pc, #84]	; (401fe4 <pxCurrentTCBConst>)
  401f8e:	681a      	ldr	r2, [r3, #0]
  401f90:	f01e 0f10 	tst.w	lr, #16
  401f94:	bf08      	it	eq
  401f96:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
  401f9a:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401f9e:	6010      	str	r0, [r2, #0]
  401fa0:	f84d 3d04 	str.w	r3, [sp, #-4]!
  401fa4:	f04f 0080 	mov.w	r0, #128	; 0x80
  401fa8:	b672      	cpsid	i
  401faa:	f380 8811 	msr	BASEPRI, r0
  401fae:	f3bf 8f4f 	dsb	sy
  401fb2:	f3bf 8f6f 	isb	sy
  401fb6:	b662      	cpsie	i
  401fb8:	f001 f8aa 	bl	403110 <vTaskSwitchContext>
  401fbc:	f04f 0000 	mov.w	r0, #0
  401fc0:	f380 8811 	msr	BASEPRI, r0
  401fc4:	bc08      	pop	{r3}
  401fc6:	6819      	ldr	r1, [r3, #0]
  401fc8:	6808      	ldr	r0, [r1, #0]
  401fca:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  401fce:	f01e 0f10 	tst.w	lr, #16
  401fd2:	bf08      	it	eq
  401fd4:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
  401fd8:	f380 8809 	msr	PSP, r0
  401fdc:	f3bf 8f6f 	isb	sy
  401fe0:	4770      	bx	lr
  401fe2:	bf00      	nop

00401fe4 <pxCurrentTCBConst>:
  401fe4:	2040c62c 	.word	0x2040c62c
  401fe8:	4770      	bx	lr
  401fea:	bf00      	nop

00401fec <SysTick_Handler>:
{
  401fec:	b508      	push	{r3, lr}
	__asm volatile
  401fee:	f3ef 8311 	mrs	r3, BASEPRI
  401ff2:	f04f 0280 	mov.w	r2, #128	; 0x80
  401ff6:	b672      	cpsid	i
  401ff8:	f382 8811 	msr	BASEPRI, r2
  401ffc:	f3bf 8f6f 	isb	sy
  402000:	f3bf 8f4f 	dsb	sy
  402004:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
  402006:	4b05      	ldr	r3, [pc, #20]	; (40201c <SysTick_Handler+0x30>)
  402008:	4798      	blx	r3
  40200a:	b118      	cbz	r0, 402014 <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
  40200c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402010:	4b03      	ldr	r3, [pc, #12]	; (402020 <SysTick_Handler+0x34>)
  402012:	601a      	str	r2, [r3, #0]
	__asm volatile
  402014:	2300      	movs	r3, #0
  402016:	f383 8811 	msr	BASEPRI, r3
  40201a:	bd08      	pop	{r3, pc}
  40201c:	00402d7d 	.word	0x00402d7d
  402020:	e000ed04 	.word	0xe000ed04

00402024 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
  402024:	4a03      	ldr	r2, [pc, #12]	; (402034 <vPortSetupTimerInterrupt+0x10>)
  402026:	4b04      	ldr	r3, [pc, #16]	; (402038 <vPortSetupTimerInterrupt+0x14>)
  402028:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
  40202a:	2207      	movs	r2, #7
  40202c:	3b04      	subs	r3, #4
  40202e:	601a      	str	r2, [r3, #0]
  402030:	4770      	bx	lr
  402032:	bf00      	nop
  402034:	0003a97f 	.word	0x0003a97f
  402038:	e000e014 	.word	0xe000e014

0040203c <xPortStartScheduler>:
{
  40203c:	b500      	push	{lr}
  40203e:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
  402040:	4b25      	ldr	r3, [pc, #148]	; (4020d8 <xPortStartScheduler+0x9c>)
  402042:	781a      	ldrb	r2, [r3, #0]
  402044:	b2d2      	uxtb	r2, r2
  402046:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
  402048:	22ff      	movs	r2, #255	; 0xff
  40204a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
  40204c:	781b      	ldrb	r3, [r3, #0]
  40204e:	b2db      	uxtb	r3, r3
  402050:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
  402054:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402058:	f003 0380 	and.w	r3, r3, #128	; 0x80
  40205c:	4a1f      	ldr	r2, [pc, #124]	; (4020dc <xPortStartScheduler+0xa0>)
  40205e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
  402060:	2207      	movs	r2, #7
  402062:	4b1f      	ldr	r3, [pc, #124]	; (4020e0 <xPortStartScheduler+0xa4>)
  402064:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  402066:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40206a:	f013 0f80 	tst.w	r3, #128	; 0x80
  40206e:	d010      	beq.n	402092 <xPortStartScheduler+0x56>
  402070:	2206      	movs	r2, #6
  402072:	e000      	b.n	402076 <xPortStartScheduler+0x3a>
  402074:	460a      	mov	r2, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
  402076:	f89d 3003 	ldrb.w	r3, [sp, #3]
  40207a:	005b      	lsls	r3, r3, #1
  40207c:	b2db      	uxtb	r3, r3
  40207e:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
  402082:	f89d 3003 	ldrb.w	r3, [sp, #3]
  402086:	1e51      	subs	r1, r2, #1
  402088:	f013 0f80 	tst.w	r3, #128	; 0x80
  40208c:	d1f2      	bne.n	402074 <xPortStartScheduler+0x38>
  40208e:	4b14      	ldr	r3, [pc, #80]	; (4020e0 <xPortStartScheduler+0xa4>)
  402090:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  402092:	4a13      	ldr	r2, [pc, #76]	; (4020e0 <xPortStartScheduler+0xa4>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
  402094:	6813      	ldr	r3, [r2, #0]
  402096:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
  402098:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  40209c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
  40209e:	9b01      	ldr	r3, [sp, #4]
  4020a0:	b2db      	uxtb	r3, r3
  4020a2:	4a0d      	ldr	r2, [pc, #52]	; (4020d8 <xPortStartScheduler+0x9c>)
  4020a4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
  4020a6:	4b0f      	ldr	r3, [pc, #60]	; (4020e4 <xPortStartScheduler+0xa8>)
  4020a8:	681a      	ldr	r2, [r3, #0]
  4020aa:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
  4020ae:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
  4020b0:	681a      	ldr	r2, [r3, #0]
  4020b2:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
  4020b6:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
  4020b8:	4b0b      	ldr	r3, [pc, #44]	; (4020e8 <xPortStartScheduler+0xac>)
  4020ba:	4798      	blx	r3
	uxCriticalNesting = 0;
  4020bc:	2200      	movs	r2, #0
  4020be:	4b0b      	ldr	r3, [pc, #44]	; (4020ec <xPortStartScheduler+0xb0>)
  4020c0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
  4020c2:	4b0b      	ldr	r3, [pc, #44]	; (4020f0 <xPortStartScheduler+0xb4>)
  4020c4:	4798      	blx	r3
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
  4020c6:	4a0b      	ldr	r2, [pc, #44]	; (4020f4 <xPortStartScheduler+0xb8>)
  4020c8:	6813      	ldr	r3, [r2, #0]
  4020ca:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
  4020ce:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
  4020d0:	4b09      	ldr	r3, [pc, #36]	; (4020f8 <xPortStartScheduler+0xbc>)
  4020d2:	4798      	blx	r3
	prvTaskExitError();
  4020d4:	4b09      	ldr	r3, [pc, #36]	; (4020fc <xPortStartScheduler+0xc0>)
  4020d6:	4798      	blx	r3
  4020d8:	e000e400 	.word	0xe000e400
  4020dc:	20400e1c 	.word	0x20400e1c
  4020e0:	20400e20 	.word	0x20400e20
  4020e4:	e000ed20 	.word	0xe000ed20
  4020e8:	00402025 	.word	0x00402025
  4020ec:	20400010 	.word	0x20400010
  4020f0:	00401ea9 	.word	0x00401ea9
  4020f4:	e000ef34 	.word	0xe000ef34
  4020f8:	00401e89 	.word	0x00401e89
  4020fc:	00401e4d 	.word	0x00401e4d

00402100 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
  402100:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
  402104:	2b0f      	cmp	r3, #15
  402106:	d911      	bls.n	40212c <vPortValidateInterruptPriority+0x2c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
  402108:	4a12      	ldr	r2, [pc, #72]	; (402154 <vPortValidateInterruptPriority+0x54>)
  40210a:	5c9b      	ldrb	r3, [r3, r2]
  40210c:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
  40210e:	4a12      	ldr	r2, [pc, #72]	; (402158 <vPortValidateInterruptPriority+0x58>)
  402110:	7812      	ldrb	r2, [r2, #0]
  402112:	429a      	cmp	r2, r3
  402114:	d90a      	bls.n	40212c <vPortValidateInterruptPriority+0x2c>
	__asm volatile
  402116:	f04f 0380 	mov.w	r3, #128	; 0x80
  40211a:	b672      	cpsid	i
  40211c:	f383 8811 	msr	BASEPRI, r3
  402120:	f3bf 8f6f 	isb	sy
  402124:	f3bf 8f4f 	dsb	sy
  402128:	b662      	cpsie	i
  40212a:	e7fe      	b.n	40212a <vPortValidateInterruptPriority+0x2a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
  40212c:	4b0b      	ldr	r3, [pc, #44]	; (40215c <vPortValidateInterruptPriority+0x5c>)
  40212e:	681b      	ldr	r3, [r3, #0]
  402130:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  402134:	4a0a      	ldr	r2, [pc, #40]	; (402160 <vPortValidateInterruptPriority+0x60>)
  402136:	6812      	ldr	r2, [r2, #0]
  402138:	4293      	cmp	r3, r2
  40213a:	d90a      	bls.n	402152 <vPortValidateInterruptPriority+0x52>
  40213c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402140:	b672      	cpsid	i
  402142:	f383 8811 	msr	BASEPRI, r3
  402146:	f3bf 8f6f 	isb	sy
  40214a:	f3bf 8f4f 	dsb	sy
  40214e:	b662      	cpsie	i
  402150:	e7fe      	b.n	402150 <vPortValidateInterruptPriority+0x50>
  402152:	4770      	bx	lr
  402154:	e000e3f0 	.word	0xe000e3f0
  402158:	20400e1c 	.word	0x20400e1c
  40215c:	e000ed0c 	.word	0xe000ed0c
  402160:	20400e20 	.word	0x20400e20

00402164 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
  402164:	b538      	push	{r3, r4, r5, lr}
  402166:	4604      	mov	r4, r0
void *pvReturn = NULL;
static uint8_t *pucAlignedHeap = NULL;

	/* Ensure that blocks are always aligned to the required number of bytes. */
	#if portBYTE_ALIGNMENT != 1
		if( xWantedSize & portBYTE_ALIGNMENT_MASK )
  402168:	f010 0f07 	tst.w	r0, #7
  40216c:	d002      	beq.n	402174 <pvPortMalloc+0x10>
		{
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
  40216e:	f020 0407 	bic.w	r4, r0, #7
  402172:	3408      	adds	r4, #8
		}
	#endif

	vTaskSuspendAll();
  402174:	4b11      	ldr	r3, [pc, #68]	; (4021bc <pvPortMalloc+0x58>)
  402176:	4798      	blx	r3
	{
		if( pucAlignedHeap == NULL )
  402178:	4b11      	ldr	r3, [pc, #68]	; (4021c0 <pvPortMalloc+0x5c>)
  40217a:	681b      	ldr	r3, [r3, #0]
  40217c:	b193      	cbz	r3, 4021a4 <pvPortMalloc+0x40>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
  40217e:	4b11      	ldr	r3, [pc, #68]	; (4021c4 <pvPortMalloc+0x60>)
  402180:	681b      	ldr	r3, [r3, #0]
  402182:	441c      	add	r4, r3
  402184:	42a3      	cmp	r3, r4
  402186:	d213      	bcs.n	4021b0 <pvPortMalloc+0x4c>
  402188:	f24b 72f7 	movw	r2, #47095	; 0xb7f7
  40218c:	4294      	cmp	r4, r2
  40218e:	d80f      	bhi.n	4021b0 <pvPortMalloc+0x4c>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
  402190:	4a0b      	ldr	r2, [pc, #44]	; (4021c0 <pvPortMalloc+0x5c>)
  402192:	6815      	ldr	r5, [r2, #0]
  402194:	441d      	add	r5, r3
			xNextFreeByte += xWantedSize;
  402196:	4b0b      	ldr	r3, [pc, #44]	; (4021c4 <pvPortMalloc+0x60>)
  402198:	601c      	str	r4, [r3, #0]
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
  40219a:	4b0b      	ldr	r3, [pc, #44]	; (4021c8 <pvPortMalloc+0x64>)
  40219c:	4798      	blx	r3

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
  40219e:	b14d      	cbz	r5, 4021b4 <pvPortMalloc+0x50>
		}
	}
	#endif

	return pvReturn;
}
  4021a0:	4628      	mov	r0, r5
  4021a2:	bd38      	pop	{r3, r4, r5, pc}
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
  4021a4:	4b09      	ldr	r3, [pc, #36]	; (4021cc <pvPortMalloc+0x68>)
  4021a6:	f023 0307 	bic.w	r3, r3, #7
  4021aa:	4a05      	ldr	r2, [pc, #20]	; (4021c0 <pvPortMalloc+0x5c>)
  4021ac:	6013      	str	r3, [r2, #0]
  4021ae:	e7e6      	b.n	40217e <pvPortMalloc+0x1a>
	( void ) xTaskResumeAll();
  4021b0:	4b05      	ldr	r3, [pc, #20]	; (4021c8 <pvPortMalloc+0x64>)
  4021b2:	4798      	blx	r3
			vApplicationMallocFailedHook();
  4021b4:	4b06      	ldr	r3, [pc, #24]	; (4021d0 <pvPortMalloc+0x6c>)
  4021b6:	4798      	blx	r3
  4021b8:	2500      	movs	r5, #0
	return pvReturn;
  4021ba:	e7f1      	b.n	4021a0 <pvPortMalloc+0x3c>
  4021bc:	00402d61 	.word	0x00402d61
  4021c0:	20400e24 	.word	0x20400e24
  4021c4:	2040c628 	.word	0x2040c628
  4021c8:	00402ec9 	.word	0x00402ec9
  4021cc:	20400e30 	.word	0x20400e30
  4021d0:	00403c13 	.word	0x00403c13

004021d4 <vPortFree>:
	heap_4.c for alternative implementations, and the memory management pages of
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
  4021d4:	b150      	cbz	r0, 4021ec <vPortFree+0x18>
  4021d6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4021da:	b672      	cpsid	i
  4021dc:	f383 8811 	msr	BASEPRI, r3
  4021e0:	f3bf 8f6f 	isb	sy
  4021e4:	f3bf 8f4f 	dsb	sy
  4021e8:	b662      	cpsie	i
  4021ea:	e7fe      	b.n	4021ea <vPortFree+0x16>
  4021ec:	4770      	bx	lr
	...

004021f0 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
  4021f0:	b538      	push	{r3, r4, r5, lr}
  4021f2:	4604      	mov	r4, r0
  4021f4:	4615      	mov	r5, r2
BaseType_t xReturn = pdFALSE;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
  4021f6:	6c02      	ldr	r2, [r0, #64]	; 0x40
  4021f8:	b95a      	cbnz	r2, 402212 <prvCopyDataToQueue+0x22>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  4021fa:	6803      	ldr	r3, [r0, #0]
  4021fc:	2b00      	cmp	r3, #0
  4021fe:	d12e      	bne.n	40225e <prvCopyDataToQueue+0x6e>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
  402200:	6840      	ldr	r0, [r0, #4]
  402202:	4b1b      	ldr	r3, [pc, #108]	; (402270 <prvCopyDataToQueue+0x80>)
  402204:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
  402206:	2300      	movs	r3, #0
  402208:	6063      	str	r3, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	++( pxQueue->uxMessagesWaiting );
  40220a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  40220c:	3301      	adds	r3, #1
  40220e:	63a3      	str	r3, [r4, #56]	; 0x38

	return xReturn;
}
  402210:	bd38      	pop	{r3, r4, r5, pc}
	else if( xPosition == queueSEND_TO_BACK )
  402212:	b96d      	cbnz	r5, 402230 <prvCopyDataToQueue+0x40>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
  402214:	6880      	ldr	r0, [r0, #8]
  402216:	4b17      	ldr	r3, [pc, #92]	; (402274 <prvCopyDataToQueue+0x84>)
  402218:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
  40221a:	68a3      	ldr	r3, [r4, #8]
  40221c:	6c22      	ldr	r2, [r4, #64]	; 0x40
  40221e:	4413      	add	r3, r2
  402220:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  402222:	6862      	ldr	r2, [r4, #4]
  402224:	4293      	cmp	r3, r2
  402226:	d31c      	bcc.n	402262 <prvCopyDataToQueue+0x72>
			pxQueue->pcWriteTo = pxQueue->pcHead;
  402228:	6823      	ldr	r3, [r4, #0]
  40222a:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
  40222c:	2000      	movs	r0, #0
  40222e:	e7ec      	b.n	40220a <prvCopyDataToQueue+0x1a>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402230:	68c0      	ldr	r0, [r0, #12]
  402232:	4b10      	ldr	r3, [pc, #64]	; (402274 <prvCopyDataToQueue+0x84>)
  402234:	4798      	blx	r3
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
  402236:	6c23      	ldr	r3, [r4, #64]	; 0x40
  402238:	425b      	negs	r3, r3
  40223a:	68e2      	ldr	r2, [r4, #12]
  40223c:	441a      	add	r2, r3
  40223e:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
  402240:	6821      	ldr	r1, [r4, #0]
  402242:	428a      	cmp	r2, r1
  402244:	d202      	bcs.n	40224c <prvCopyDataToQueue+0x5c>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
  402246:	6862      	ldr	r2, [r4, #4]
  402248:	4413      	add	r3, r2
  40224a:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
  40224c:	2d02      	cmp	r5, #2
  40224e:	d10a      	bne.n	402266 <prvCopyDataToQueue+0x76>
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  402250:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402252:	b153      	cbz	r3, 40226a <prvCopyDataToQueue+0x7a>
				--( pxQueue->uxMessagesWaiting );
  402254:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402256:	3b01      	subs	r3, #1
  402258:	63a3      	str	r3, [r4, #56]	; 0x38
BaseType_t xReturn = pdFALSE;
  40225a:	2000      	movs	r0, #0
  40225c:	e7d5      	b.n	40220a <prvCopyDataToQueue+0x1a>
  40225e:	2000      	movs	r0, #0
  402260:	e7d3      	b.n	40220a <prvCopyDataToQueue+0x1a>
  402262:	2000      	movs	r0, #0
  402264:	e7d1      	b.n	40220a <prvCopyDataToQueue+0x1a>
  402266:	2000      	movs	r0, #0
  402268:	e7cf      	b.n	40220a <prvCopyDataToQueue+0x1a>
  40226a:	2000      	movs	r0, #0
  40226c:	e7cd      	b.n	40220a <prvCopyDataToQueue+0x1a>
  40226e:	bf00      	nop
  402270:	00403511 	.word	0x00403511
  402274:	004046c9 	.word	0x004046c9

00402278 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

	static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue, const BaseType_t xCopyPosition )
	{
  402278:	b530      	push	{r4, r5, lr}
  40227a:	b083      	sub	sp, #12
  40227c:	9001      	str	r0, [sp, #4]
	Queue_t *pxQueueSetContainer = pxQueue->pxQueueSetContainer;
  40227e:	6d44      	ldr	r4, [r0, #84]	; 0x54
	BaseType_t xReturn = pdFALSE;

		/* This function must be called form a critical section. */

		configASSERT( pxQueueSetContainer );
  402280:	b174      	cbz	r4, 4022a0 <prvNotifyQueueSetContainer+0x28>
		configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
  402282:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  402284:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  402286:	429a      	cmp	r2, r3
  402288:	d315      	bcc.n	4022b6 <prvNotifyQueueSetContainer+0x3e>
  40228a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40228e:	b672      	cpsid	i
  402290:	f383 8811 	msr	BASEPRI, r3
  402294:	f3bf 8f6f 	isb	sy
  402298:	f3bf 8f4f 	dsb	sy
  40229c:	b662      	cpsie	i
  40229e:	e7fe      	b.n	40229e <prvNotifyQueueSetContainer+0x26>
  4022a0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4022a4:	b672      	cpsid	i
  4022a6:	f383 8811 	msr	BASEPRI, r3
  4022aa:	f3bf 8f6f 	isb	sy
  4022ae:	f3bf 8f4f 	dsb	sy
  4022b2:	b662      	cpsie	i
  4022b4:	e7fe      	b.n	4022b4 <prvNotifyQueueSetContainer+0x3c>

		if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
  4022b6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4022b8:	4293      	cmp	r3, r2
  4022ba:	d803      	bhi.n	4022c4 <prvNotifyQueueSetContainer+0x4c>
	BaseType_t xReturn = pdFALSE;
  4022bc:	2500      	movs	r5, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4022be:	4628      	mov	r0, r5
  4022c0:	b003      	add	sp, #12
  4022c2:	bd30      	pop	{r4, r5, pc}
  4022c4:	460a      	mov	r2, r1
			xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, xCopyPosition );
  4022c6:	a901      	add	r1, sp, #4
  4022c8:	4620      	mov	r0, r4
  4022ca:	4b0b      	ldr	r3, [pc, #44]	; (4022f8 <prvNotifyQueueSetContainer+0x80>)
  4022cc:	4798      	blx	r3
  4022ce:	4605      	mov	r5, r0
			if( pxQueueSetContainer->xTxLock == queueUNLOCKED )
  4022d0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4022d2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4022d6:	d10a      	bne.n	4022ee <prvNotifyQueueSetContainer+0x76>
				if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
  4022d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4022da:	2b00      	cmp	r3, #0
  4022dc:	d0ef      	beq.n	4022be <prvNotifyQueueSetContainer+0x46>
					if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
  4022de:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4022e2:	4b06      	ldr	r3, [pc, #24]	; (4022fc <prvNotifyQueueSetContainer+0x84>)
  4022e4:	4798      	blx	r3
  4022e6:	2800      	cmp	r0, #0
						xReturn = pdTRUE;
  4022e8:	bf18      	it	ne
  4022ea:	2501      	movne	r5, #1
  4022ec:	e7e7      	b.n	4022be <prvNotifyQueueSetContainer+0x46>
				( pxQueueSetContainer->xTxLock )++;
  4022ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4022f0:	3301      	adds	r3, #1
  4022f2:	64a3      	str	r3, [r4, #72]	; 0x48
  4022f4:	e7e3      	b.n	4022be <prvNotifyQueueSetContainer+0x46>
  4022f6:	bf00      	nop
  4022f8:	004021f1 	.word	0x004021f1
  4022fc:	004032e5 	.word	0x004032e5

00402300 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
  402300:	6c02      	ldr	r2, [r0, #64]	; 0x40
  402302:	b172      	cbz	r2, 402322 <prvCopyDataFromQueue+0x22>
{
  402304:	b510      	push	{r4, lr}
  402306:	4603      	mov	r3, r0
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
  402308:	68c4      	ldr	r4, [r0, #12]
  40230a:	4414      	add	r4, r2
  40230c:	60c4      	str	r4, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
  40230e:	6840      	ldr	r0, [r0, #4]
  402310:	4284      	cmp	r4, r0
  402312:	d301      	bcc.n	402318 <prvCopyDataFromQueue+0x18>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
  402314:	6818      	ldr	r0, [r3, #0]
  402316:	60d8      	str	r0, [r3, #12]
  402318:	4608      	mov	r0, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
  40231a:	68d9      	ldr	r1, [r3, #12]
  40231c:	4b01      	ldr	r3, [pc, #4]	; (402324 <prvCopyDataFromQueue+0x24>)
  40231e:	4798      	blx	r3
  402320:	bd10      	pop	{r4, pc}
  402322:	4770      	bx	lr
  402324:	004046c9 	.word	0x004046c9

00402328 <prvUnlockQueue>:
{
  402328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  40232a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
  40232c:	4b22      	ldr	r3, [pc, #136]	; (4023b8 <prvUnlockQueue+0x90>)
  40232e:	4798      	blx	r3
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  402330:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402332:	2b00      	cmp	r3, #0
  402334:	dd1b      	ble.n	40236e <prvUnlockQueue+0x46>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  402336:	4d21      	ldr	r5, [pc, #132]	; (4023bc <prvUnlockQueue+0x94>)
						vTaskMissedYield();
  402338:	4f21      	ldr	r7, [pc, #132]	; (4023c0 <prvUnlockQueue+0x98>)
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40233a:	4e22      	ldr	r6, [pc, #136]	; (4023c4 <prvUnlockQueue+0x9c>)
  40233c:	e00b      	b.n	402356 <prvUnlockQueue+0x2e>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  40233e:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402340:	b1ab      	cbz	r3, 40236e <prvUnlockQueue+0x46>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402342:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402346:	47b0      	blx	r6
  402348:	b978      	cbnz	r0, 40236a <prvUnlockQueue+0x42>
			--( pxQueue->xTxLock );
  40234a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40234c:	3b01      	subs	r3, #1
  40234e:	64a3      	str	r3, [r4, #72]	; 0x48
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
  402350:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402352:	2b00      	cmp	r3, #0
  402354:	dd0b      	ble.n	40236e <prvUnlockQueue+0x46>
				if( pxQueue->pxQueueSetContainer != NULL )
  402356:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402358:	2b00      	cmp	r3, #0
  40235a:	d0f0      	beq.n	40233e <prvUnlockQueue+0x16>
					if( prvNotifyQueueSetContainer( pxQueue, queueSEND_TO_BACK ) == pdTRUE )
  40235c:	2100      	movs	r1, #0
  40235e:	4620      	mov	r0, r4
  402360:	47a8      	blx	r5
  402362:	2801      	cmp	r0, #1
  402364:	d1f1      	bne.n	40234a <prvUnlockQueue+0x22>
						vTaskMissedYield();
  402366:	47b8      	blx	r7
  402368:	e7ef      	b.n	40234a <prvUnlockQueue+0x22>
							vTaskMissedYield();
  40236a:	47b8      	blx	r7
  40236c:	e7ed      	b.n	40234a <prvUnlockQueue+0x22>
		pxQueue->xTxLock = queueUNLOCKED;
  40236e:	f04f 33ff 	mov.w	r3, #4294967295
  402372:	64a3      	str	r3, [r4, #72]	; 0x48
	taskEXIT_CRITICAL();
  402374:	4b14      	ldr	r3, [pc, #80]	; (4023c8 <prvUnlockQueue+0xa0>)
  402376:	4798      	blx	r3
	taskENTER_CRITICAL();
  402378:	4b0f      	ldr	r3, [pc, #60]	; (4023b8 <prvUnlockQueue+0x90>)
  40237a:	4798      	blx	r3
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  40237c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40237e:	2b00      	cmp	r3, #0
  402380:	dd14      	ble.n	4023ac <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402382:	6923      	ldr	r3, [r4, #16]
  402384:	b193      	cbz	r3, 4023ac <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  402386:	f104 0610 	add.w	r6, r4, #16
  40238a:	4d0e      	ldr	r5, [pc, #56]	; (4023c4 <prvUnlockQueue+0x9c>)
					vTaskMissedYield();
  40238c:	4f0c      	ldr	r7, [pc, #48]	; (4023c0 <prvUnlockQueue+0x98>)
  40238e:	e007      	b.n	4023a0 <prvUnlockQueue+0x78>
				--( pxQueue->xRxLock );
  402390:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402392:	3b01      	subs	r3, #1
  402394:	6463      	str	r3, [r4, #68]	; 0x44
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
  402396:	6c63      	ldr	r3, [r4, #68]	; 0x44
  402398:	2b00      	cmp	r3, #0
  40239a:	dd07      	ble.n	4023ac <prvUnlockQueue+0x84>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  40239c:	6923      	ldr	r3, [r4, #16]
  40239e:	b12b      	cbz	r3, 4023ac <prvUnlockQueue+0x84>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
  4023a0:	4630      	mov	r0, r6
  4023a2:	47a8      	blx	r5
  4023a4:	2800      	cmp	r0, #0
  4023a6:	d0f3      	beq.n	402390 <prvUnlockQueue+0x68>
					vTaskMissedYield();
  4023a8:	47b8      	blx	r7
  4023aa:	e7f1      	b.n	402390 <prvUnlockQueue+0x68>
		pxQueue->xRxLock = queueUNLOCKED;
  4023ac:	f04f 33ff 	mov.w	r3, #4294967295
  4023b0:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
  4023b2:	4b05      	ldr	r3, [pc, #20]	; (4023c8 <prvUnlockQueue+0xa0>)
  4023b4:	4798      	blx	r3
  4023b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  4023b8:	00401f09 	.word	0x00401f09
  4023bc:	00402279 	.word	0x00402279
  4023c0:	00403441 	.word	0x00403441
  4023c4:	004032e5 	.word	0x004032e5
  4023c8:	00401f55 	.word	0x00401f55

004023cc <xQueueGenericReset>:
{
  4023cc:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
  4023ce:	b308      	cbz	r0, 402414 <xQueueGenericReset+0x48>
  4023d0:	4604      	mov	r4, r0
  4023d2:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4023d4:	4b1d      	ldr	r3, [pc, #116]	; (40244c <xQueueGenericReset+0x80>)
  4023d6:	4798      	blx	r3
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
  4023d8:	6822      	ldr	r2, [r4, #0]
  4023da:	6c21      	ldr	r1, [r4, #64]	; 0x40
  4023dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4023de:	fb03 f301 	mul.w	r3, r3, r1
  4023e2:	18d0      	adds	r0, r2, r3
  4023e4:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
  4023e6:	2000      	movs	r0, #0
  4023e8:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
  4023ea:	60a2      	str	r2, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
  4023ec:	1a5b      	subs	r3, r3, r1
  4023ee:	4413      	add	r3, r2
  4023f0:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
  4023f2:	f04f 33ff 	mov.w	r3, #4294967295
  4023f6:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
  4023f8:	64a3      	str	r3, [r4, #72]	; 0x48
		if( xNewQueue == pdFALSE )
  4023fa:	b9fd      	cbnz	r5, 40243c <xQueueGenericReset+0x70>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  4023fc:	6923      	ldr	r3, [r4, #16]
  4023fe:	b12b      	cbz	r3, 40240c <xQueueGenericReset+0x40>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  402400:	f104 0010 	add.w	r0, r4, #16
  402404:	4b12      	ldr	r3, [pc, #72]	; (402450 <xQueueGenericReset+0x84>)
  402406:	4798      	blx	r3
  402408:	2801      	cmp	r0, #1
  40240a:	d00e      	beq.n	40242a <xQueueGenericReset+0x5e>
	taskEXIT_CRITICAL();
  40240c:	4b11      	ldr	r3, [pc, #68]	; (402454 <xQueueGenericReset+0x88>)
  40240e:	4798      	blx	r3
}
  402410:	2001      	movs	r0, #1
  402412:	bd38      	pop	{r3, r4, r5, pc}
  402414:	f04f 0380 	mov.w	r3, #128	; 0x80
  402418:	b672      	cpsid	i
  40241a:	f383 8811 	msr	BASEPRI, r3
  40241e:	f3bf 8f6f 	isb	sy
  402422:	f3bf 8f4f 	dsb	sy
  402426:	b662      	cpsie	i
  402428:	e7fe      	b.n	402428 <xQueueGenericReset+0x5c>
					queueYIELD_IF_USING_PREEMPTION();
  40242a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40242e:	4b0a      	ldr	r3, [pc, #40]	; (402458 <xQueueGenericReset+0x8c>)
  402430:	601a      	str	r2, [r3, #0]
  402432:	f3bf 8f4f 	dsb	sy
  402436:	f3bf 8f6f 	isb	sy
  40243a:	e7e7      	b.n	40240c <xQueueGenericReset+0x40>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
  40243c:	f104 0010 	add.w	r0, r4, #16
  402440:	4d06      	ldr	r5, [pc, #24]	; (40245c <xQueueGenericReset+0x90>)
  402442:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
  402444:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402448:	47a8      	blx	r5
  40244a:	e7df      	b.n	40240c <xQueueGenericReset+0x40>
  40244c:	00401f09 	.word	0x00401f09
  402450:	004032e5 	.word	0x004032e5
  402454:	00401f55 	.word	0x00401f55
  402458:	e000ed04 	.word	0xe000ed04
  40245c:	00401dbd 	.word	0x00401dbd

00402460 <xQueueGenericCreate>:
{
  402460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
  402462:	b950      	cbnz	r0, 40247a <xQueueGenericCreate+0x1a>
  402464:	f04f 0380 	mov.w	r3, #128	; 0x80
  402468:	b672      	cpsid	i
  40246a:	f383 8811 	msr	BASEPRI, r3
  40246e:	f3bf 8f6f 	isb	sy
  402472:	f3bf 8f4f 	dsb	sy
  402476:	b662      	cpsie	i
  402478:	e7fe      	b.n	402478 <xQueueGenericCreate+0x18>
  40247a:	4606      	mov	r6, r0
  40247c:	4617      	mov	r7, r2
  40247e:	460d      	mov	r5, r1
	if( uxItemSize == ( UBaseType_t ) 0 )
  402480:	b189      	cbz	r1, 4024a6 <xQueueGenericCreate+0x46>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402482:	fb01 f000 	mul.w	r0, r1, r0
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  402486:	3059      	adds	r0, #89	; 0x59
  402488:	4b12      	ldr	r3, [pc, #72]	; (4024d4 <xQueueGenericCreate+0x74>)
  40248a:	4798      	blx	r3
	if( pxNewQueue != NULL )
  40248c:	4604      	mov	r4, r0
  40248e:	b9e8      	cbnz	r0, 4024cc <xQueueGenericCreate+0x6c>
  402490:	f04f 0380 	mov.w	r3, #128	; 0x80
  402494:	b672      	cpsid	i
  402496:	f383 8811 	msr	BASEPRI, r3
  40249a:	f3bf 8f6f 	isb	sy
  40249e:	f3bf 8f4f 	dsb	sy
  4024a2:	b662      	cpsie	i
  4024a4:	e7fe      	b.n	4024a4 <xQueueGenericCreate+0x44>
	pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
  4024a6:	2058      	movs	r0, #88	; 0x58
  4024a8:	4b0a      	ldr	r3, [pc, #40]	; (4024d4 <xQueueGenericCreate+0x74>)
  4024aa:	4798      	blx	r3
	if( pxNewQueue != NULL )
  4024ac:	4604      	mov	r4, r0
  4024ae:	2800      	cmp	r0, #0
  4024b0:	d0ee      	beq.n	402490 <xQueueGenericCreate+0x30>
			pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
  4024b2:	6020      	str	r0, [r4, #0]
		pxNewQueue->uxLength = uxQueueLength;
  4024b4:	63e6      	str	r6, [r4, #60]	; 0x3c
		pxNewQueue->uxItemSize = uxItemSize;
  4024b6:	6425      	str	r5, [r4, #64]	; 0x40
		( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
  4024b8:	2101      	movs	r1, #1
  4024ba:	4620      	mov	r0, r4
  4024bc:	4b06      	ldr	r3, [pc, #24]	; (4024d8 <xQueueGenericCreate+0x78>)
  4024be:	4798      	blx	r3
			pxNewQueue->ucQueueType = ucQueueType;
  4024c0:	f884 7050 	strb.w	r7, [r4, #80]	; 0x50
			pxNewQueue->pxQueueSetContainer = NULL;
  4024c4:	2300      	movs	r3, #0
  4024c6:	6563      	str	r3, [r4, #84]	; 0x54
}
  4024c8:	4620      	mov	r0, r4
  4024ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			pxNewQueue->pcHead = ( ( int8_t * ) pxNewQueue ) + sizeof( Queue_t );
  4024cc:	f100 0358 	add.w	r3, r0, #88	; 0x58
  4024d0:	6003      	str	r3, [r0, #0]
  4024d2:	e7ef      	b.n	4024b4 <xQueueGenericCreate+0x54>
  4024d4:	00402165 	.word	0x00402165
  4024d8:	004023cd 	.word	0x004023cd

004024dc <xQueueGenericSend>:
{
  4024dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4024e0:	b085      	sub	sp, #20
  4024e2:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4024e4:	b1b8      	cbz	r0, 402516 <xQueueGenericSend+0x3a>
  4024e6:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4024e8:	b301      	cbz	r1, 40252c <xQueueGenericSend+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4024ea:	2b02      	cmp	r3, #2
  4024ec:	d02c      	beq.n	402548 <xQueueGenericSend+0x6c>
  4024ee:	461d      	mov	r5, r3
  4024f0:	4688      	mov	r8, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4024f2:	4b66      	ldr	r3, [pc, #408]	; (40268c <xQueueGenericSend+0x1b0>)
  4024f4:	4798      	blx	r3
  4024f6:	2800      	cmp	r0, #0
  4024f8:	d134      	bne.n	402564 <xQueueGenericSend+0x88>
  4024fa:	9b01      	ldr	r3, [sp, #4]
  4024fc:	2b00      	cmp	r3, #0
  4024fe:	d038      	beq.n	402572 <xQueueGenericSend+0x96>
  402500:	f04f 0380 	mov.w	r3, #128	; 0x80
  402504:	b672      	cpsid	i
  402506:	f383 8811 	msr	BASEPRI, r3
  40250a:	f3bf 8f6f 	isb	sy
  40250e:	f3bf 8f4f 	dsb	sy
  402512:	b662      	cpsie	i
  402514:	e7fe      	b.n	402514 <xQueueGenericSend+0x38>
  402516:	f04f 0380 	mov.w	r3, #128	; 0x80
  40251a:	b672      	cpsid	i
  40251c:	f383 8811 	msr	BASEPRI, r3
  402520:	f3bf 8f6f 	isb	sy
  402524:	f3bf 8f4f 	dsb	sy
  402528:	b662      	cpsie	i
  40252a:	e7fe      	b.n	40252a <xQueueGenericSend+0x4e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  40252c:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40252e:	2a00      	cmp	r2, #0
  402530:	d0db      	beq.n	4024ea <xQueueGenericSend+0xe>
  402532:	f04f 0380 	mov.w	r3, #128	; 0x80
  402536:	b672      	cpsid	i
  402538:	f383 8811 	msr	BASEPRI, r3
  40253c:	f3bf 8f6f 	isb	sy
  402540:	f3bf 8f4f 	dsb	sy
  402544:	b662      	cpsie	i
  402546:	e7fe      	b.n	402546 <xQueueGenericSend+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402548:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  40254a:	2a01      	cmp	r2, #1
  40254c:	d0cf      	beq.n	4024ee <xQueueGenericSend+0x12>
  40254e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402552:	b672      	cpsid	i
  402554:	f383 8811 	msr	BASEPRI, r3
  402558:	f3bf 8f6f 	isb	sy
  40255c:	f3bf 8f4f 	dsb	sy
  402560:	b662      	cpsie	i
  402562:	e7fe      	b.n	402562 <xQueueGenericSend+0x86>
  402564:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
  402566:	4e4a      	ldr	r6, [pc, #296]	; (402690 <xQueueGenericSend+0x1b4>)
					vTaskSetTimeOutState( &xTimeOut );
  402568:	f8df a150 	ldr.w	sl, [pc, #336]	; 4026bc <xQueueGenericSend+0x1e0>
					portYIELD_WITHIN_API();
  40256c:	f8df 912c 	ldr.w	r9, [pc, #300]	; 40269c <xQueueGenericSend+0x1c0>
  402570:	e042      	b.n	4025f8 <xQueueGenericSend+0x11c>
  402572:	2700      	movs	r7, #0
  402574:	e7f7      	b.n	402566 <xQueueGenericSend+0x8a>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402576:	462a      	mov	r2, r5
  402578:	4641      	mov	r1, r8
  40257a:	4620      	mov	r0, r4
  40257c:	4b45      	ldr	r3, [pc, #276]	; (402694 <xQueueGenericSend+0x1b8>)
  40257e:	4798      	blx	r3
					if( pxQueue->pxQueueSetContainer != NULL )
  402580:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402582:	b19b      	cbz	r3, 4025ac <xQueueGenericSend+0xd0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402584:	4629      	mov	r1, r5
  402586:	4620      	mov	r0, r4
  402588:	4b43      	ldr	r3, [pc, #268]	; (402698 <xQueueGenericSend+0x1bc>)
  40258a:	4798      	blx	r3
  40258c:	2801      	cmp	r0, #1
  40258e:	d107      	bne.n	4025a0 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  402590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402594:	4b41      	ldr	r3, [pc, #260]	; (40269c <xQueueGenericSend+0x1c0>)
  402596:	601a      	str	r2, [r3, #0]
  402598:	f3bf 8f4f 	dsb	sy
  40259c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  4025a0:	4b3f      	ldr	r3, [pc, #252]	; (4026a0 <xQueueGenericSend+0x1c4>)
  4025a2:	4798      	blx	r3
				return pdPASS;
  4025a4:	2001      	movs	r0, #1
}
  4025a6:	b005      	add	sp, #20
  4025a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  4025ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4025ae:	b173      	cbz	r3, 4025ce <xQueueGenericSend+0xf2>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
  4025b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
  4025b4:	4b3b      	ldr	r3, [pc, #236]	; (4026a4 <xQueueGenericSend+0x1c8>)
  4025b6:	4798      	blx	r3
  4025b8:	2801      	cmp	r0, #1
  4025ba:	d1f1      	bne.n	4025a0 <xQueueGenericSend+0xc4>
								queueYIELD_IF_USING_PREEMPTION();
  4025bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4025c0:	4b36      	ldr	r3, [pc, #216]	; (40269c <xQueueGenericSend+0x1c0>)
  4025c2:	601a      	str	r2, [r3, #0]
  4025c4:	f3bf 8f4f 	dsb	sy
  4025c8:	f3bf 8f6f 	isb	sy
  4025cc:	e7e8      	b.n	4025a0 <xQueueGenericSend+0xc4>
						else if( xYieldRequired != pdFALSE )
  4025ce:	2800      	cmp	r0, #0
  4025d0:	d0e6      	beq.n	4025a0 <xQueueGenericSend+0xc4>
							queueYIELD_IF_USING_PREEMPTION();
  4025d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  4025d6:	4b31      	ldr	r3, [pc, #196]	; (40269c <xQueueGenericSend+0x1c0>)
  4025d8:	601a      	str	r2, [r3, #0]
  4025da:	f3bf 8f4f 	dsb	sy
  4025de:	f3bf 8f6f 	isb	sy
  4025e2:	e7dd      	b.n	4025a0 <xQueueGenericSend+0xc4>
					taskEXIT_CRITICAL();
  4025e4:	4b2e      	ldr	r3, [pc, #184]	; (4026a0 <xQueueGenericSend+0x1c4>)
  4025e6:	4798      	blx	r3
					return errQUEUE_FULL;
  4025e8:	2000      	movs	r0, #0
  4025ea:	e7dc      	b.n	4025a6 <xQueueGenericSend+0xca>
				prvUnlockQueue( pxQueue );
  4025ec:	4620      	mov	r0, r4
  4025ee:	4b2e      	ldr	r3, [pc, #184]	; (4026a8 <xQueueGenericSend+0x1cc>)
  4025f0:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4025f2:	4b2e      	ldr	r3, [pc, #184]	; (4026ac <xQueueGenericSend+0x1d0>)
  4025f4:	4798      	blx	r3
  4025f6:	2701      	movs	r7, #1
		taskENTER_CRITICAL();
  4025f8:	47b0      	blx	r6
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4025fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4025fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4025fe:	429a      	cmp	r2, r3
  402600:	d3b9      	bcc.n	402576 <xQueueGenericSend+0x9a>
  402602:	2d02      	cmp	r5, #2
  402604:	d0b7      	beq.n	402576 <xQueueGenericSend+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
  402606:	9b01      	ldr	r3, [sp, #4]
  402608:	2b00      	cmp	r3, #0
  40260a:	d0eb      	beq.n	4025e4 <xQueueGenericSend+0x108>
				else if( xEntryTimeSet == pdFALSE )
  40260c:	b90f      	cbnz	r7, 402612 <xQueueGenericSend+0x136>
					vTaskSetTimeOutState( &xTimeOut );
  40260e:	a802      	add	r0, sp, #8
  402610:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  402612:	4b23      	ldr	r3, [pc, #140]	; (4026a0 <xQueueGenericSend+0x1c4>)
  402614:	4798      	blx	r3
		vTaskSuspendAll();
  402616:	4b26      	ldr	r3, [pc, #152]	; (4026b0 <xQueueGenericSend+0x1d4>)
  402618:	4798      	blx	r3
		prvLockQueue( pxQueue );
  40261a:	47b0      	blx	r6
  40261c:	6c63      	ldr	r3, [r4, #68]	; 0x44
  40261e:	f1b3 3fff 	cmp.w	r3, #4294967295
  402622:	d101      	bne.n	402628 <xQueueGenericSend+0x14c>
  402624:	2300      	movs	r3, #0
  402626:	6463      	str	r3, [r4, #68]	; 0x44
  402628:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40262a:	f1b3 3fff 	cmp.w	r3, #4294967295
  40262e:	d101      	bne.n	402634 <xQueueGenericSend+0x158>
  402630:	2300      	movs	r3, #0
  402632:	64a3      	str	r3, [r4, #72]	; 0x48
  402634:	4b1a      	ldr	r3, [pc, #104]	; (4026a0 <xQueueGenericSend+0x1c4>)
  402636:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402638:	a901      	add	r1, sp, #4
  40263a:	a802      	add	r0, sp, #8
  40263c:	4b1d      	ldr	r3, [pc, #116]	; (4026b4 <xQueueGenericSend+0x1d8>)
  40263e:	4798      	blx	r3
  402640:	b9e0      	cbnz	r0, 40267c <xQueueGenericSend+0x1a0>
	taskENTER_CRITICAL();
  402642:	47b0      	blx	r6
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
  402644:	f8d4 b038 	ldr.w	fp, [r4, #56]	; 0x38
  402648:	6be7      	ldr	r7, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
  40264a:	4b15      	ldr	r3, [pc, #84]	; (4026a0 <xQueueGenericSend+0x1c4>)
  40264c:	4798      	blx	r3
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
  40264e:	45bb      	cmp	fp, r7
  402650:	d1cc      	bne.n	4025ec <xQueueGenericSend+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
  402652:	9901      	ldr	r1, [sp, #4]
  402654:	f104 0010 	add.w	r0, r4, #16
  402658:	4b17      	ldr	r3, [pc, #92]	; (4026b8 <xQueueGenericSend+0x1dc>)
  40265a:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40265c:	4620      	mov	r0, r4
  40265e:	4b12      	ldr	r3, [pc, #72]	; (4026a8 <xQueueGenericSend+0x1cc>)
  402660:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402662:	4b12      	ldr	r3, [pc, #72]	; (4026ac <xQueueGenericSend+0x1d0>)
  402664:	4798      	blx	r3
  402666:	2800      	cmp	r0, #0
  402668:	d1c5      	bne.n	4025f6 <xQueueGenericSend+0x11a>
					portYIELD_WITHIN_API();
  40266a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40266e:	f8c9 3000 	str.w	r3, [r9]
  402672:	f3bf 8f4f 	dsb	sy
  402676:	f3bf 8f6f 	isb	sy
  40267a:	e7bc      	b.n	4025f6 <xQueueGenericSend+0x11a>
			prvUnlockQueue( pxQueue );
  40267c:	4620      	mov	r0, r4
  40267e:	4b0a      	ldr	r3, [pc, #40]	; (4026a8 <xQueueGenericSend+0x1cc>)
  402680:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402682:	4b0a      	ldr	r3, [pc, #40]	; (4026ac <xQueueGenericSend+0x1d0>)
  402684:	4798      	blx	r3
			return errQUEUE_FULL;
  402686:	2000      	movs	r0, #0
  402688:	e78d      	b.n	4025a6 <xQueueGenericSend+0xca>
  40268a:	bf00      	nop
  40268c:	0040344d 	.word	0x0040344d
  402690:	00401f09 	.word	0x00401f09
  402694:	004021f1 	.word	0x004021f1
  402698:	00402279 	.word	0x00402279
  40269c:	e000ed04 	.word	0xe000ed04
  4026a0:	00401f55 	.word	0x00401f55
  4026a4:	004032e5 	.word	0x004032e5
  4026a8:	00402329 	.word	0x00402329
  4026ac:	00402ec9 	.word	0x00402ec9
  4026b0:	00402d61 	.word	0x00402d61
  4026b4:	004033ad 	.word	0x004033ad
  4026b8:	004031e1 	.word	0x004031e1
  4026bc:	0040337d 	.word	0x0040337d

004026c0 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
  4026c0:	2800      	cmp	r0, #0
  4026c2:	d036      	beq.n	402732 <xQueueGenericSendFromISR+0x72>
{
  4026c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4026c8:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4026ca:	2900      	cmp	r1, #0
  4026cc:	d03c      	beq.n	402748 <xQueueGenericSendFromISR+0x88>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  4026ce:	2b02      	cmp	r3, #2
  4026d0:	d048      	beq.n	402764 <xQueueGenericSendFromISR+0xa4>
  4026d2:	461e      	mov	r6, r3
  4026d4:	4615      	mov	r5, r2
  4026d6:	4688      	mov	r8, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
  4026d8:	4b35      	ldr	r3, [pc, #212]	; (4027b0 <xQueueGenericSendFromISR+0xf0>)
  4026da:	4798      	blx	r3
	__asm volatile
  4026dc:	f3ef 8711 	mrs	r7, BASEPRI
  4026e0:	f04f 0380 	mov.w	r3, #128	; 0x80
  4026e4:	b672      	cpsid	i
  4026e6:	f383 8811 	msr	BASEPRI, r3
  4026ea:	f3bf 8f6f 	isb	sy
  4026ee:	f3bf 8f4f 	dsb	sy
  4026f2:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
  4026f4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  4026f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  4026f8:	429a      	cmp	r2, r3
  4026fa:	d301      	bcc.n	402700 <xQueueGenericSendFromISR+0x40>
  4026fc:	2e02      	cmp	r6, #2
  4026fe:	d14f      	bne.n	4027a0 <xQueueGenericSendFromISR+0xe0>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
  402700:	4632      	mov	r2, r6
  402702:	4641      	mov	r1, r8
  402704:	4620      	mov	r0, r4
  402706:	4b2b      	ldr	r3, [pc, #172]	; (4027b4 <xQueueGenericSendFromISR+0xf4>)
  402708:	4798      	blx	r3
			if( pxQueue->xTxLock == queueUNLOCKED )
  40270a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  40270c:	f1b3 3fff 	cmp.w	r3, #4294967295
  402710:	d141      	bne.n	402796 <xQueueGenericSendFromISR+0xd6>
					if( pxQueue->pxQueueSetContainer != NULL )
  402712:	6d63      	ldr	r3, [r4, #84]	; 0x54
  402714:	2b00      	cmp	r3, #0
  402716:	d033      	beq.n	402780 <xQueueGenericSendFromISR+0xc0>
						if( prvNotifyQueueSetContainer( pxQueue, xCopyPosition ) == pdTRUE )
  402718:	4631      	mov	r1, r6
  40271a:	4620      	mov	r0, r4
  40271c:	4b26      	ldr	r3, [pc, #152]	; (4027b8 <xQueueGenericSendFromISR+0xf8>)
  40271e:	4798      	blx	r3
							if( pxHigherPriorityTaskWoken != NULL )
  402720:	2d00      	cmp	r5, #0
  402722:	d03f      	beq.n	4027a4 <xQueueGenericSendFromISR+0xe4>
  402724:	2801      	cmp	r0, #1
  402726:	d13d      	bne.n	4027a4 <xQueueGenericSendFromISR+0xe4>
								*pxHigherPriorityTaskWoken = pdTRUE;
  402728:	6028      	str	r0, [r5, #0]
	__asm volatile
  40272a:	f387 8811 	msr	BASEPRI, r7
}
  40272e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
  402732:	f04f 0380 	mov.w	r3, #128	; 0x80
  402736:	b672      	cpsid	i
  402738:	f383 8811 	msr	BASEPRI, r3
  40273c:	f3bf 8f6f 	isb	sy
  402740:	f3bf 8f4f 	dsb	sy
  402744:	b662      	cpsie	i
  402746:	e7fe      	b.n	402746 <xQueueGenericSendFromISR+0x86>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402748:	6c00      	ldr	r0, [r0, #64]	; 0x40
  40274a:	2800      	cmp	r0, #0
  40274c:	d0bf      	beq.n	4026ce <xQueueGenericSendFromISR+0xe>
  40274e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402752:	b672      	cpsid	i
  402754:	f383 8811 	msr	BASEPRI, r3
  402758:	f3bf 8f6f 	isb	sy
  40275c:	f3bf 8f4f 	dsb	sy
  402760:	b662      	cpsie	i
  402762:	e7fe      	b.n	402762 <xQueueGenericSendFromISR+0xa2>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
  402764:	6be0      	ldr	r0, [r4, #60]	; 0x3c
  402766:	2801      	cmp	r0, #1
  402768:	d0b3      	beq.n	4026d2 <xQueueGenericSendFromISR+0x12>
  40276a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40276e:	b672      	cpsid	i
  402770:	f383 8811 	msr	BASEPRI, r3
  402774:	f3bf 8f6f 	isb	sy
  402778:	f3bf 8f4f 	dsb	sy
  40277c:	b662      	cpsie	i
  40277e:	e7fe      	b.n	40277e <xQueueGenericSendFromISR+0xbe>
						if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402780:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402782:	b18b      	cbz	r3, 4027a8 <xQueueGenericSendFromISR+0xe8>
							if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  402784:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402788:	4b0c      	ldr	r3, [pc, #48]	; (4027bc <xQueueGenericSendFromISR+0xfc>)
  40278a:	4798      	blx	r3
								if( pxHigherPriorityTaskWoken != NULL )
  40278c:	b175      	cbz	r5, 4027ac <xQueueGenericSendFromISR+0xec>
  40278e:	b168      	cbz	r0, 4027ac <xQueueGenericSendFromISR+0xec>
									*pxHigherPriorityTaskWoken = pdTRUE;
  402790:	2001      	movs	r0, #1
  402792:	6028      	str	r0, [r5, #0]
  402794:	e7c9      	b.n	40272a <xQueueGenericSendFromISR+0x6a>
				++( pxQueue->xTxLock );
  402796:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  402798:	3301      	adds	r3, #1
  40279a:	64a3      	str	r3, [r4, #72]	; 0x48
			xReturn = pdPASS;
  40279c:	2001      	movs	r0, #1
  40279e:	e7c4      	b.n	40272a <xQueueGenericSendFromISR+0x6a>
			xReturn = errQUEUE_FULL;
  4027a0:	2000      	movs	r0, #0
  4027a2:	e7c2      	b.n	40272a <xQueueGenericSendFromISR+0x6a>
			xReturn = pdPASS;
  4027a4:	2001      	movs	r0, #1
  4027a6:	e7c0      	b.n	40272a <xQueueGenericSendFromISR+0x6a>
  4027a8:	2001      	movs	r0, #1
  4027aa:	e7be      	b.n	40272a <xQueueGenericSendFromISR+0x6a>
  4027ac:	2001      	movs	r0, #1
  4027ae:	e7bc      	b.n	40272a <xQueueGenericSendFromISR+0x6a>
  4027b0:	00402101 	.word	0x00402101
  4027b4:	004021f1 	.word	0x004021f1
  4027b8:	00402279 	.word	0x00402279
  4027bc:	004032e5 	.word	0x004032e5

004027c0 <xQueueGenericReceive>:
{
  4027c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4027c4:	b084      	sub	sp, #16
  4027c6:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
  4027c8:	b198      	cbz	r0, 4027f2 <xQueueGenericReceive+0x32>
  4027ca:	4604      	mov	r4, r0
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  4027cc:	b1e1      	cbz	r1, 402808 <xQueueGenericReceive+0x48>
  4027ce:	4698      	mov	r8, r3
  4027d0:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
  4027d2:	4b61      	ldr	r3, [pc, #388]	; (402958 <xQueueGenericReceive+0x198>)
  4027d4:	4798      	blx	r3
  4027d6:	bb28      	cbnz	r0, 402824 <xQueueGenericReceive+0x64>
  4027d8:	9b01      	ldr	r3, [sp, #4]
  4027da:	b353      	cbz	r3, 402832 <xQueueGenericReceive+0x72>
  4027dc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027e0:	b672      	cpsid	i
  4027e2:	f383 8811 	msr	BASEPRI, r3
  4027e6:	f3bf 8f6f 	isb	sy
  4027ea:	f3bf 8f4f 	dsb	sy
  4027ee:	b662      	cpsie	i
  4027f0:	e7fe      	b.n	4027f0 <xQueueGenericReceive+0x30>
  4027f2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4027f6:	b672      	cpsid	i
  4027f8:	f383 8811 	msr	BASEPRI, r3
  4027fc:	f3bf 8f6f 	isb	sy
  402800:	f3bf 8f4f 	dsb	sy
  402804:	b662      	cpsie	i
  402806:	e7fe      	b.n	402806 <xQueueGenericReceive+0x46>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
  402808:	6c02      	ldr	r2, [r0, #64]	; 0x40
  40280a:	2a00      	cmp	r2, #0
  40280c:	d0df      	beq.n	4027ce <xQueueGenericReceive+0xe>
  40280e:	f04f 0380 	mov.w	r3, #128	; 0x80
  402812:	b672      	cpsid	i
  402814:	f383 8811 	msr	BASEPRI, r3
  402818:	f3bf 8f6f 	isb	sy
  40281c:	f3bf 8f4f 	dsb	sy
  402820:	b662      	cpsie	i
  402822:	e7fe      	b.n	402822 <xQueueGenericReceive+0x62>
  402824:	2600      	movs	r6, #0
		taskENTER_CRITICAL();
  402826:	4d4d      	ldr	r5, [pc, #308]	; (40295c <xQueueGenericReceive+0x19c>)
					vTaskSetTimeOutState( &xTimeOut );
  402828:	f8df a160 	ldr.w	sl, [pc, #352]	; 40298c <xQueueGenericReceive+0x1cc>
					portYIELD_WITHIN_API();
  40282c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 40296c <xQueueGenericReceive+0x1ac>
  402830:	e04b      	b.n	4028ca <xQueueGenericReceive+0x10a>
  402832:	2600      	movs	r6, #0
  402834:	e7f7      	b.n	402826 <xQueueGenericReceive+0x66>
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
  402836:	68e5      	ldr	r5, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
  402838:	4639      	mov	r1, r7
  40283a:	4620      	mov	r0, r4
  40283c:	4b48      	ldr	r3, [pc, #288]	; (402960 <xQueueGenericReceive+0x1a0>)
  40283e:	4798      	blx	r3
				if( xJustPeeking == pdFALSE )
  402840:	f1b8 0f00 	cmp.w	r8, #0
  402844:	d11d      	bne.n	402882 <xQueueGenericReceive+0xc2>
					--( pxQueue->uxMessagesWaiting );
  402846:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  402848:	3b01      	subs	r3, #1
  40284a:	63a3      	str	r3, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40284c:	6823      	ldr	r3, [r4, #0]
  40284e:	b913      	cbnz	r3, 402856 <xQueueGenericReceive+0x96>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
  402850:	4b44      	ldr	r3, [pc, #272]	; (402964 <xQueueGenericReceive+0x1a4>)
  402852:	4798      	blx	r3
  402854:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
  402856:	6923      	ldr	r3, [r4, #16]
  402858:	b16b      	cbz	r3, 402876 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
  40285a:	f104 0010 	add.w	r0, r4, #16
  40285e:	4b42      	ldr	r3, [pc, #264]	; (402968 <xQueueGenericReceive+0x1a8>)
  402860:	4798      	blx	r3
  402862:	2801      	cmp	r0, #1
  402864:	d107      	bne.n	402876 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402866:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40286a:	4b40      	ldr	r3, [pc, #256]	; (40296c <xQueueGenericReceive+0x1ac>)
  40286c:	601a      	str	r2, [r3, #0]
  40286e:	f3bf 8f4f 	dsb	sy
  402872:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
  402876:	4b3e      	ldr	r3, [pc, #248]	; (402970 <xQueueGenericReceive+0x1b0>)
  402878:	4798      	blx	r3
				return pdPASS;
  40287a:	2001      	movs	r0, #1
}
  40287c:	b004      	add	sp, #16
  40287e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
  402882:	60e5      	str	r5, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
  402884:	6a63      	ldr	r3, [r4, #36]	; 0x24
  402886:	2b00      	cmp	r3, #0
  402888:	d0f5      	beq.n	402876 <xQueueGenericReceive+0xb6>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
  40288a:	f104 0024 	add.w	r0, r4, #36	; 0x24
  40288e:	4b36      	ldr	r3, [pc, #216]	; (402968 <xQueueGenericReceive+0x1a8>)
  402890:	4798      	blx	r3
  402892:	2800      	cmp	r0, #0
  402894:	d0ef      	beq.n	402876 <xQueueGenericReceive+0xb6>
							queueYIELD_IF_USING_PREEMPTION();
  402896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  40289a:	4b34      	ldr	r3, [pc, #208]	; (40296c <xQueueGenericReceive+0x1ac>)
  40289c:	601a      	str	r2, [r3, #0]
  40289e:	f3bf 8f4f 	dsb	sy
  4028a2:	f3bf 8f6f 	isb	sy
  4028a6:	e7e6      	b.n	402876 <xQueueGenericReceive+0xb6>
					taskEXIT_CRITICAL();
  4028a8:	4b31      	ldr	r3, [pc, #196]	; (402970 <xQueueGenericReceive+0x1b0>)
  4028aa:	4798      	blx	r3
					return errQUEUE_EMPTY;
  4028ac:	2000      	movs	r0, #0
  4028ae:	e7e5      	b.n	40287c <xQueueGenericReceive+0xbc>
						taskENTER_CRITICAL();
  4028b0:	47a8      	blx	r5
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
  4028b2:	6860      	ldr	r0, [r4, #4]
  4028b4:	4b2f      	ldr	r3, [pc, #188]	; (402974 <xQueueGenericReceive+0x1b4>)
  4028b6:	4798      	blx	r3
						taskEXIT_CRITICAL();
  4028b8:	4b2d      	ldr	r3, [pc, #180]	; (402970 <xQueueGenericReceive+0x1b0>)
  4028ba:	4798      	blx	r3
  4028bc:	e030      	b.n	402920 <xQueueGenericReceive+0x160>
				prvUnlockQueue( pxQueue );
  4028be:	4620      	mov	r0, r4
  4028c0:	4b2d      	ldr	r3, [pc, #180]	; (402978 <xQueueGenericReceive+0x1b8>)
  4028c2:	4798      	blx	r3
				( void ) xTaskResumeAll();
  4028c4:	4b2d      	ldr	r3, [pc, #180]	; (40297c <xQueueGenericReceive+0x1bc>)
  4028c6:	4798      	blx	r3
  4028c8:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
  4028ca:	47a8      	blx	r5
			if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
  4028cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4028ce:	2b00      	cmp	r3, #0
  4028d0:	d1b1      	bne.n	402836 <xQueueGenericReceive+0x76>
				if( xTicksToWait == ( TickType_t ) 0 )
  4028d2:	9b01      	ldr	r3, [sp, #4]
  4028d4:	2b00      	cmp	r3, #0
  4028d6:	d0e7      	beq.n	4028a8 <xQueueGenericReceive+0xe8>
				else if( xEntryTimeSet == pdFALSE )
  4028d8:	b90e      	cbnz	r6, 4028de <xQueueGenericReceive+0x11e>
					vTaskSetTimeOutState( &xTimeOut );
  4028da:	a802      	add	r0, sp, #8
  4028dc:	47d0      	blx	sl
		taskEXIT_CRITICAL();
  4028de:	4b24      	ldr	r3, [pc, #144]	; (402970 <xQueueGenericReceive+0x1b0>)
  4028e0:	4798      	blx	r3
		vTaskSuspendAll();
  4028e2:	4b27      	ldr	r3, [pc, #156]	; (402980 <xQueueGenericReceive+0x1c0>)
  4028e4:	4798      	blx	r3
		prvLockQueue( pxQueue );
  4028e6:	47a8      	blx	r5
  4028e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4028ea:	f1b3 3fff 	cmp.w	r3, #4294967295
  4028ee:	d101      	bne.n	4028f4 <xQueueGenericReceive+0x134>
  4028f0:	2300      	movs	r3, #0
  4028f2:	6463      	str	r3, [r4, #68]	; 0x44
  4028f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4028f6:	f1b3 3fff 	cmp.w	r3, #4294967295
  4028fa:	d101      	bne.n	402900 <xQueueGenericReceive+0x140>
  4028fc:	2300      	movs	r3, #0
  4028fe:	64a3      	str	r3, [r4, #72]	; 0x48
  402900:	4b1b      	ldr	r3, [pc, #108]	; (402970 <xQueueGenericReceive+0x1b0>)
  402902:	4798      	blx	r3
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
  402904:	a901      	add	r1, sp, #4
  402906:	a802      	add	r0, sp, #8
  402908:	4b1e      	ldr	r3, [pc, #120]	; (402984 <xQueueGenericReceive+0x1c4>)
  40290a:	4798      	blx	r3
  40290c:	b9e8      	cbnz	r0, 40294a <xQueueGenericReceive+0x18a>
	taskENTER_CRITICAL();
  40290e:	47a8      	blx	r5
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
  402910:	6ba6      	ldr	r6, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
  402912:	4b17      	ldr	r3, [pc, #92]	; (402970 <xQueueGenericReceive+0x1b0>)
  402914:	4798      	blx	r3
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
  402916:	2e00      	cmp	r6, #0
  402918:	d1d1      	bne.n	4028be <xQueueGenericReceive+0xfe>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
  40291a:	6823      	ldr	r3, [r4, #0]
  40291c:	2b00      	cmp	r3, #0
  40291e:	d0c7      	beq.n	4028b0 <xQueueGenericReceive+0xf0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
  402920:	9901      	ldr	r1, [sp, #4]
  402922:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402926:	4b18      	ldr	r3, [pc, #96]	; (402988 <xQueueGenericReceive+0x1c8>)
  402928:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
  40292a:	4620      	mov	r0, r4
  40292c:	4b12      	ldr	r3, [pc, #72]	; (402978 <xQueueGenericReceive+0x1b8>)
  40292e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  402930:	4b12      	ldr	r3, [pc, #72]	; (40297c <xQueueGenericReceive+0x1bc>)
  402932:	4798      	blx	r3
  402934:	2800      	cmp	r0, #0
  402936:	d1c7      	bne.n	4028c8 <xQueueGenericReceive+0x108>
					portYIELD_WITHIN_API();
  402938:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  40293c:	f8c9 3000 	str.w	r3, [r9]
  402940:	f3bf 8f4f 	dsb	sy
  402944:	f3bf 8f6f 	isb	sy
  402948:	e7be      	b.n	4028c8 <xQueueGenericReceive+0x108>
			prvUnlockQueue( pxQueue );
  40294a:	4620      	mov	r0, r4
  40294c:	4b0a      	ldr	r3, [pc, #40]	; (402978 <xQueueGenericReceive+0x1b8>)
  40294e:	4798      	blx	r3
			( void ) xTaskResumeAll();
  402950:	4b0a      	ldr	r3, [pc, #40]	; (40297c <xQueueGenericReceive+0x1bc>)
  402952:	4798      	blx	r3
			return errQUEUE_EMPTY;
  402954:	2000      	movs	r0, #0
  402956:	e791      	b.n	40287c <xQueueGenericReceive+0xbc>
  402958:	0040344d 	.word	0x0040344d
  40295c:	00401f09 	.word	0x00401f09
  402960:	00402301 	.word	0x00402301
  402964:	004035cd 	.word	0x004035cd
  402968:	004032e5 	.word	0x004032e5
  40296c:	e000ed04 	.word	0xe000ed04
  402970:	00401f55 	.word	0x00401f55
  402974:	0040346d 	.word	0x0040346d
  402978:	00402329 	.word	0x00402329
  40297c:	00402ec9 	.word	0x00402ec9
  402980:	00402d61 	.word	0x00402d61
  402984:	004033ad 	.word	0x004033ad
  402988:	004031e1 	.word	0x004031e1
  40298c:	0040337d 	.word	0x0040337d

00402990 <vQueueAddToRegistry>:
	{
  402990:	b410      	push	{r4}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
  402992:	4b0b      	ldr	r3, [pc, #44]	; (4029c0 <vQueueAddToRegistry+0x30>)
  402994:	681b      	ldr	r3, [r3, #0]
  402996:	b153      	cbz	r3, 4029ae <vQueueAddToRegistry+0x1e>
  402998:	2301      	movs	r3, #1
  40299a:	4c09      	ldr	r4, [pc, #36]	; (4029c0 <vQueueAddToRegistry+0x30>)
  40299c:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
  4029a0:	b132      	cbz	r2, 4029b0 <vQueueAddToRegistry+0x20>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4029a2:	3301      	adds	r3, #1
  4029a4:	2b08      	cmp	r3, #8
  4029a6:	d1f9      	bne.n	40299c <vQueueAddToRegistry+0xc>
	}
  4029a8:	f85d 4b04 	ldr.w	r4, [sp], #4
  4029ac:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
  4029ae:	2300      	movs	r3, #0
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
  4029b0:	4a03      	ldr	r2, [pc, #12]	; (4029c0 <vQueueAddToRegistry+0x30>)
  4029b2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
  4029b6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
  4029ba:	6058      	str	r0, [r3, #4]
				break;
  4029bc:	e7f4      	b.n	4029a8 <vQueueAddToRegistry+0x18>
  4029be:	bf00      	nop
  4029c0:	2040c7a4 	.word	0x2040c7a4

004029c4 <vQueueWaitForMessageRestricted>:
	{
  4029c4:	b570      	push	{r4, r5, r6, lr}
  4029c6:	4604      	mov	r4, r0
  4029c8:	460d      	mov	r5, r1
  4029ca:	4616      	mov	r6, r2
		prvLockQueue( pxQueue );
  4029cc:	4b0f      	ldr	r3, [pc, #60]	; (402a0c <vQueueWaitForMessageRestricted+0x48>)
  4029ce:	4798      	blx	r3
  4029d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
  4029d2:	f1b3 3fff 	cmp.w	r3, #4294967295
  4029d6:	d00b      	beq.n	4029f0 <vQueueWaitForMessageRestricted+0x2c>
  4029d8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
  4029da:	f1b3 3fff 	cmp.w	r3, #4294967295
  4029de:	d00a      	beq.n	4029f6 <vQueueWaitForMessageRestricted+0x32>
  4029e0:	4b0b      	ldr	r3, [pc, #44]	; (402a10 <vQueueWaitForMessageRestricted+0x4c>)
  4029e2:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
  4029e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  4029e6:	b14b      	cbz	r3, 4029fc <vQueueWaitForMessageRestricted+0x38>
		prvUnlockQueue( pxQueue );
  4029e8:	4620      	mov	r0, r4
  4029ea:	4b0a      	ldr	r3, [pc, #40]	; (402a14 <vQueueWaitForMessageRestricted+0x50>)
  4029ec:	4798      	blx	r3
  4029ee:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
  4029f0:	2300      	movs	r3, #0
  4029f2:	6463      	str	r3, [r4, #68]	; 0x44
  4029f4:	e7f0      	b.n	4029d8 <vQueueWaitForMessageRestricted+0x14>
  4029f6:	2300      	movs	r3, #0
  4029f8:	64a3      	str	r3, [r4, #72]	; 0x48
  4029fa:	e7f1      	b.n	4029e0 <vQueueWaitForMessageRestricted+0x1c>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
  4029fc:	4632      	mov	r2, r6
  4029fe:	4629      	mov	r1, r5
  402a00:	f104 0024 	add.w	r0, r4, #36	; 0x24
  402a04:	4b04      	ldr	r3, [pc, #16]	; (402a18 <vQueueWaitForMessageRestricted+0x54>)
  402a06:	4798      	blx	r3
  402a08:	e7ee      	b.n	4029e8 <vQueueWaitForMessageRestricted+0x24>
  402a0a:	bf00      	nop
  402a0c:	00401f09 	.word	0x00401f09
  402a10:	00401f55 	.word	0x00401f55
  402a14:	00402329 	.word	0x00402329
  402a18:	00403265 	.word	0x00403265

00402a1c <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402a1c:	4b08      	ldr	r3, [pc, #32]	; (402a40 <prvResetNextTaskUnblockTime+0x24>)
  402a1e:	681b      	ldr	r3, [r3, #0]
  402a20:	681b      	ldr	r3, [r3, #0]
  402a22:	b13b      	cbz	r3, 402a34 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402a24:	4b06      	ldr	r3, [pc, #24]	; (402a40 <prvResetNextTaskUnblockTime+0x24>)
  402a26:	681b      	ldr	r3, [r3, #0]
  402a28:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
  402a2a:	68db      	ldr	r3, [r3, #12]
  402a2c:	685a      	ldr	r2, [r3, #4]
  402a2e:	4b05      	ldr	r3, [pc, #20]	; (402a44 <prvResetNextTaskUnblockTime+0x28>)
  402a30:	601a      	str	r2, [r3, #0]
  402a32:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
  402a34:	f04f 32ff 	mov.w	r2, #4294967295
  402a38:	4b02      	ldr	r3, [pc, #8]	; (402a44 <prvResetNextTaskUnblockTime+0x28>)
  402a3a:	601a      	str	r2, [r3, #0]
  402a3c:	4770      	bx	lr
  402a3e:	bf00      	nop
  402a40:	2040c630 	.word	0x2040c630
  402a44:	2040c6dc 	.word	0x2040c6dc

00402a48 <prvAddCurrentTaskToDelayedList>:
{
  402a48:	b510      	push	{r4, lr}
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
  402a4a:	4b0f      	ldr	r3, [pc, #60]	; (402a88 <prvAddCurrentTaskToDelayedList+0x40>)
  402a4c:	681b      	ldr	r3, [r3, #0]
  402a4e:	6058      	str	r0, [r3, #4]
	if( xTimeToWake < xTickCount )
  402a50:	4b0e      	ldr	r3, [pc, #56]	; (402a8c <prvAddCurrentTaskToDelayedList+0x44>)
  402a52:	681b      	ldr	r3, [r3, #0]
  402a54:	4298      	cmp	r0, r3
  402a56:	d30e      	bcc.n	402a76 <prvAddCurrentTaskToDelayedList+0x2e>
  402a58:	4604      	mov	r4, r0
		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402a5a:	4b0d      	ldr	r3, [pc, #52]	; (402a90 <prvAddCurrentTaskToDelayedList+0x48>)
  402a5c:	6818      	ldr	r0, [r3, #0]
  402a5e:	4b0a      	ldr	r3, [pc, #40]	; (402a88 <prvAddCurrentTaskToDelayedList+0x40>)
  402a60:	6819      	ldr	r1, [r3, #0]
  402a62:	3104      	adds	r1, #4
  402a64:	4b0b      	ldr	r3, [pc, #44]	; (402a94 <prvAddCurrentTaskToDelayedList+0x4c>)
  402a66:	4798      	blx	r3
		if( xTimeToWake < xNextTaskUnblockTime )
  402a68:	4b0b      	ldr	r3, [pc, #44]	; (402a98 <prvAddCurrentTaskToDelayedList+0x50>)
  402a6a:	681b      	ldr	r3, [r3, #0]
  402a6c:	429c      	cmp	r4, r3
  402a6e:	d201      	bcs.n	402a74 <prvAddCurrentTaskToDelayedList+0x2c>
			xNextTaskUnblockTime = xTimeToWake;
  402a70:	4b09      	ldr	r3, [pc, #36]	; (402a98 <prvAddCurrentTaskToDelayedList+0x50>)
  402a72:	601c      	str	r4, [r3, #0]
  402a74:	bd10      	pop	{r4, pc}
		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  402a76:	4b09      	ldr	r3, [pc, #36]	; (402a9c <prvAddCurrentTaskToDelayedList+0x54>)
  402a78:	6818      	ldr	r0, [r3, #0]
  402a7a:	4b03      	ldr	r3, [pc, #12]	; (402a88 <prvAddCurrentTaskToDelayedList+0x40>)
  402a7c:	6819      	ldr	r1, [r3, #0]
  402a7e:	3104      	adds	r1, #4
  402a80:	4b04      	ldr	r3, [pc, #16]	; (402a94 <prvAddCurrentTaskToDelayedList+0x4c>)
  402a82:	4798      	blx	r3
  402a84:	bd10      	pop	{r4, pc}
  402a86:	bf00      	nop
  402a88:	2040c62c 	.word	0x2040c62c
  402a8c:	2040c724 	.word	0x2040c724
  402a90:	2040c630 	.word	0x2040c630
  402a94:	00401df1 	.word	0x00401df1
  402a98:	2040c6dc 	.word	0x2040c6dc
  402a9c:	2040c634 	.word	0x2040c634

00402aa0 <xTaskGenericCreate>:
{
  402aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  402aa4:	b083      	sub	sp, #12
  402aa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  402aa8:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
  402aac:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	configASSERT( pxTaskCode );
  402aae:	b160      	cbz	r0, 402aca <xTaskGenericCreate+0x2a>
	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
  402ab0:	2d04      	cmp	r5, #4
  402ab2:	d915      	bls.n	402ae0 <xTaskGenericCreate+0x40>
  402ab4:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ab8:	b672      	cpsid	i
  402aba:	f383 8811 	msr	BASEPRI, r3
  402abe:	f3bf 8f6f 	isb	sy
  402ac2:	f3bf 8f4f 	dsb	sy
  402ac6:	b662      	cpsie	i
  402ac8:	e7fe      	b.n	402ac8 <xTaskGenericCreate+0x28>
  402aca:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ace:	b672      	cpsid	i
  402ad0:	f383 8811 	msr	BASEPRI, r3
  402ad4:	f3bf 8f6f 	isb	sy
  402ad8:	f3bf 8f4f 	dsb	sy
  402adc:	b662      	cpsie	i
  402ade:	e7fe      	b.n	402ade <xTaskGenericCreate+0x3e>
  402ae0:	9001      	str	r0, [sp, #4]
  402ae2:	4698      	mov	r8, r3
  402ae4:	4691      	mov	r9, r2
  402ae6:	460f      	mov	r7, r1
		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402ae8:	b936      	cbnz	r6, 402af8 <xTaskGenericCreate+0x58>
  402aea:	0090      	lsls	r0, r2, #2
  402aec:	4b62      	ldr	r3, [pc, #392]	; (402c78 <xTaskGenericCreate+0x1d8>)
  402aee:	4798      	blx	r3
		if( pxStack != NULL )
  402af0:	4606      	mov	r6, r0
  402af2:	2800      	cmp	r0, #0
  402af4:	f000 809e 	beq.w	402c34 <xTaskGenericCreate+0x194>
			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
  402af8:	2058      	movs	r0, #88	; 0x58
  402afa:	4b5f      	ldr	r3, [pc, #380]	; (402c78 <xTaskGenericCreate+0x1d8>)
  402afc:	4798      	blx	r3
			if( pxNewTCB != NULL )
  402afe:	4604      	mov	r4, r0
  402b00:	2800      	cmp	r0, #0
  402b02:	f000 8094 	beq.w	402c2e <xTaskGenericCreate+0x18e>
				pxNewTCB->pxStack = pxStack;
  402b06:	6306      	str	r6, [r0, #48]	; 0x30
			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
  402b08:	ea4f 0289 	mov.w	r2, r9, lsl #2
  402b0c:	21a5      	movs	r1, #165	; 0xa5
  402b0e:	4630      	mov	r0, r6
  402b10:	4b5a      	ldr	r3, [pc, #360]	; (402c7c <xTaskGenericCreate+0x1dc>)
  402b12:	4798      	blx	r3
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
  402b14:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
  402b18:	444e      	add	r6, r9
  402b1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
  402b1c:	eb03 0386 	add.w	r3, r3, r6, lsl #2
			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
  402b20:	f023 0607 	bic.w	r6, r3, #7
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402b24:	783b      	ldrb	r3, [r7, #0]
  402b26:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
  402b2a:	783b      	ldrb	r3, [r7, #0]
  402b2c:	2b00      	cmp	r3, #0
  402b2e:	f040 8084 	bne.w	402c3a <xTaskGenericCreate+0x19a>
	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
  402b32:	2700      	movs	r7, #0
  402b34:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
	pxTCB->uxPriority = uxPriority;
  402b38:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxTCB->uxBasePriority = uxPriority;
  402b3a:	64a5      	str	r5, [r4, #72]	; 0x48
		pxTCB->uxMutexesHeld = 0;
  402b3c:	64e7      	str	r7, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
  402b3e:	f104 0904 	add.w	r9, r4, #4
  402b42:	4648      	mov	r0, r9
  402b44:	f8df b184 	ldr.w	fp, [pc, #388]	; 402ccc <xTaskGenericCreate+0x22c>
  402b48:	47d8      	blx	fp
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
  402b4a:	f104 0018 	add.w	r0, r4, #24
  402b4e:	47d8      	blx	fp
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
  402b50:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  402b52:	f1c5 0305 	rsb	r3, r5, #5
  402b56:	61a3      	str	r3, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
  402b58:	6264      	str	r4, [r4, #36]	; 0x24
		pxTCB->ulNotifiedValue = 0;
  402b5a:	6527      	str	r7, [r4, #80]	; 0x50
		pxTCB->eNotifyState = eNotWaitingNotification;
  402b5c:	f884 7054 	strb.w	r7, [r4, #84]	; 0x54
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
  402b60:	4642      	mov	r2, r8
  402b62:	9901      	ldr	r1, [sp, #4]
  402b64:	4630      	mov	r0, r6
  402b66:	4b46      	ldr	r3, [pc, #280]	; (402c80 <xTaskGenericCreate+0x1e0>)
  402b68:	4798      	blx	r3
  402b6a:	6020      	str	r0, [r4, #0]
		if( ( void * ) pxCreatedTask != NULL )
  402b6c:	f1ba 0f00 	cmp.w	sl, #0
  402b70:	d001      	beq.n	402b76 <xTaskGenericCreate+0xd6>
			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
  402b72:	f8ca 4000 	str.w	r4, [sl]
		taskENTER_CRITICAL();
  402b76:	4b43      	ldr	r3, [pc, #268]	; (402c84 <xTaskGenericCreate+0x1e4>)
  402b78:	4798      	blx	r3
			uxCurrentNumberOfTasks++;
  402b7a:	4a43      	ldr	r2, [pc, #268]	; (402c88 <xTaskGenericCreate+0x1e8>)
  402b7c:	6813      	ldr	r3, [r2, #0]
  402b7e:	3301      	adds	r3, #1
  402b80:	6013      	str	r3, [r2, #0]
			if( pxCurrentTCB == NULL )
  402b82:	4b42      	ldr	r3, [pc, #264]	; (402c8c <xTaskGenericCreate+0x1ec>)
  402b84:	681b      	ldr	r3, [r3, #0]
  402b86:	2b00      	cmp	r3, #0
  402b88:	d166      	bne.n	402c58 <xTaskGenericCreate+0x1b8>
				pxCurrentTCB =  pxNewTCB;
  402b8a:	4b40      	ldr	r3, [pc, #256]	; (402c8c <xTaskGenericCreate+0x1ec>)
  402b8c:	601c      	str	r4, [r3, #0]
				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
  402b8e:	6813      	ldr	r3, [r2, #0]
  402b90:	2b01      	cmp	r3, #1
  402b92:	d121      	bne.n	402bd8 <xTaskGenericCreate+0x138>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
  402b94:	4f3e      	ldr	r7, [pc, #248]	; (402c90 <xTaskGenericCreate+0x1f0>)
  402b96:	4638      	mov	r0, r7
  402b98:	4e3e      	ldr	r6, [pc, #248]	; (402c94 <xTaskGenericCreate+0x1f4>)
  402b9a:	47b0      	blx	r6
  402b9c:	f107 0014 	add.w	r0, r7, #20
  402ba0:	47b0      	blx	r6
  402ba2:	f107 0028 	add.w	r0, r7, #40	; 0x28
  402ba6:	47b0      	blx	r6
  402ba8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
  402bac:	47b0      	blx	r6
  402bae:	f107 0050 	add.w	r0, r7, #80	; 0x50
  402bb2:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList1 );
  402bb4:	f8df 8118 	ldr.w	r8, [pc, #280]	; 402cd0 <xTaskGenericCreate+0x230>
  402bb8:	4640      	mov	r0, r8
  402bba:	47b0      	blx	r6
	vListInitialise( &xDelayedTaskList2 );
  402bbc:	4f36      	ldr	r7, [pc, #216]	; (402c98 <xTaskGenericCreate+0x1f8>)
  402bbe:	4638      	mov	r0, r7
  402bc0:	47b0      	blx	r6
	vListInitialise( &xPendingReadyList );
  402bc2:	4836      	ldr	r0, [pc, #216]	; (402c9c <xTaskGenericCreate+0x1fc>)
  402bc4:	47b0      	blx	r6
		vListInitialise( &xTasksWaitingTermination );
  402bc6:	4836      	ldr	r0, [pc, #216]	; (402ca0 <xTaskGenericCreate+0x200>)
  402bc8:	47b0      	blx	r6
		vListInitialise( &xSuspendedTaskList );
  402bca:	4836      	ldr	r0, [pc, #216]	; (402ca4 <xTaskGenericCreate+0x204>)
  402bcc:	47b0      	blx	r6
	pxDelayedTaskList = &xDelayedTaskList1;
  402bce:	4b36      	ldr	r3, [pc, #216]	; (402ca8 <xTaskGenericCreate+0x208>)
  402bd0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
  402bd4:	4b35      	ldr	r3, [pc, #212]	; (402cac <xTaskGenericCreate+0x20c>)
  402bd6:	601f      	str	r7, [r3, #0]
			uxTaskNumber++;
  402bd8:	4a35      	ldr	r2, [pc, #212]	; (402cb0 <xTaskGenericCreate+0x210>)
  402bda:	6813      	ldr	r3, [r2, #0]
  402bdc:	3301      	adds	r3, #1
  402bde:	6013      	str	r3, [r2, #0]
				pxNewTCB->uxTCBNumber = uxTaskNumber;
  402be0:	6423      	str	r3, [r4, #64]	; 0x40
			prvAddTaskToReadyList( pxNewTCB );
  402be2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402be4:	4a33      	ldr	r2, [pc, #204]	; (402cb4 <xTaskGenericCreate+0x214>)
  402be6:	6811      	ldr	r1, [r2, #0]
  402be8:	2301      	movs	r3, #1
  402bea:	4083      	lsls	r3, r0
  402bec:	430b      	orrs	r3, r1
  402bee:	6013      	str	r3, [r2, #0]
  402bf0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402bf4:	4649      	mov	r1, r9
  402bf6:	4b26      	ldr	r3, [pc, #152]	; (402c90 <xTaskGenericCreate+0x1f0>)
  402bf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402bfc:	4b2e      	ldr	r3, [pc, #184]	; (402cb8 <xTaskGenericCreate+0x218>)
  402bfe:	4798      	blx	r3
		taskEXIT_CRITICAL();
  402c00:	4b2e      	ldr	r3, [pc, #184]	; (402cbc <xTaskGenericCreate+0x21c>)
  402c02:	4798      	blx	r3
		if( xSchedulerRunning != pdFALSE )
  402c04:	4b2e      	ldr	r3, [pc, #184]	; (402cc0 <xTaskGenericCreate+0x220>)
  402c06:	681b      	ldr	r3, [r3, #0]
  402c08:	2b00      	cmp	r3, #0
  402c0a:	d031      	beq.n	402c70 <xTaskGenericCreate+0x1d0>
			if( pxCurrentTCB->uxPriority < uxPriority )
  402c0c:	4b1f      	ldr	r3, [pc, #124]	; (402c8c <xTaskGenericCreate+0x1ec>)
  402c0e:	681b      	ldr	r3, [r3, #0]
  402c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402c12:	429d      	cmp	r5, r3
  402c14:	d92e      	bls.n	402c74 <xTaskGenericCreate+0x1d4>
				taskYIELD_IF_USING_PREEMPTION();
  402c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402c1a:	4b2a      	ldr	r3, [pc, #168]	; (402cc4 <xTaskGenericCreate+0x224>)
  402c1c:	601a      	str	r2, [r3, #0]
  402c1e:	f3bf 8f4f 	dsb	sy
  402c22:	f3bf 8f6f 	isb	sy
			xReturn = pdPASS;
  402c26:	2001      	movs	r0, #1
}
  402c28:	b003      	add	sp, #12
  402c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				vPortFree( pxStack );
  402c2e:	4630      	mov	r0, r6
  402c30:	4b25      	ldr	r3, [pc, #148]	; (402cc8 <xTaskGenericCreate+0x228>)
  402c32:	4798      	blx	r3
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
  402c34:	f04f 30ff 	mov.w	r0, #4294967295
  402c38:	e7f6      	b.n	402c28 <xTaskGenericCreate+0x188>
  402c3a:	463b      	mov	r3, r7
  402c3c:	f104 0234 	add.w	r2, r4, #52	; 0x34
  402c40:	3709      	adds	r7, #9
		pxTCB->pcTaskName[ x ] = pcName[ x ];
  402c42:	7859      	ldrb	r1, [r3, #1]
  402c44:	f802 1f01 	strb.w	r1, [r2, #1]!
		if( pcName[ x ] == 0x00 )
  402c48:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  402c4c:	2900      	cmp	r1, #0
  402c4e:	f43f af70 	beq.w	402b32 <xTaskGenericCreate+0x92>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
  402c52:	42bb      	cmp	r3, r7
  402c54:	d1f5      	bne.n	402c42 <xTaskGenericCreate+0x1a2>
  402c56:	e76c      	b.n	402b32 <xTaskGenericCreate+0x92>
				if( xSchedulerRunning == pdFALSE )
  402c58:	4b19      	ldr	r3, [pc, #100]	; (402cc0 <xTaskGenericCreate+0x220>)
  402c5a:	681b      	ldr	r3, [r3, #0]
  402c5c:	2b00      	cmp	r3, #0
  402c5e:	d1bb      	bne.n	402bd8 <xTaskGenericCreate+0x138>
					if( pxCurrentTCB->uxPriority <= uxPriority )
  402c60:	4b0a      	ldr	r3, [pc, #40]	; (402c8c <xTaskGenericCreate+0x1ec>)
  402c62:	681b      	ldr	r3, [r3, #0]
  402c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402c66:	429d      	cmp	r5, r3
  402c68:	d3b6      	bcc.n	402bd8 <xTaskGenericCreate+0x138>
						pxCurrentTCB = pxNewTCB;
  402c6a:	4b08      	ldr	r3, [pc, #32]	; (402c8c <xTaskGenericCreate+0x1ec>)
  402c6c:	601c      	str	r4, [r3, #0]
  402c6e:	e7b3      	b.n	402bd8 <xTaskGenericCreate+0x138>
			xReturn = pdPASS;
  402c70:	2001      	movs	r0, #1
  402c72:	e7d9      	b.n	402c28 <xTaskGenericCreate+0x188>
  402c74:	2001      	movs	r0, #1
	return xReturn;
  402c76:	e7d7      	b.n	402c28 <xTaskGenericCreate+0x188>
  402c78:	00402165 	.word	0x00402165
  402c7c:	004047fd 	.word	0x004047fd
  402c80:	00401ebd 	.word	0x00401ebd
  402c84:	00401f09 	.word	0x00401f09
  402c88:	2040c69c 	.word	0x2040c69c
  402c8c:	2040c62c 	.word	0x2040c62c
  402c90:	2040c638 	.word	0x2040c638
  402c94:	00401dbd 	.word	0x00401dbd
  402c98:	2040c6c8 	.word	0x2040c6c8
  402c9c:	2040c6e4 	.word	0x2040c6e4
  402ca0:	2040c710 	.word	0x2040c710
  402ca4:	2040c6fc 	.word	0x2040c6fc
  402ca8:	2040c630 	.word	0x2040c630
  402cac:	2040c634 	.word	0x2040c634
  402cb0:	2040c6a8 	.word	0x2040c6a8
  402cb4:	2040c6b0 	.word	0x2040c6b0
  402cb8:	00401dd9 	.word	0x00401dd9
  402cbc:	00401f55 	.word	0x00401f55
  402cc0:	2040c6f8 	.word	0x2040c6f8
  402cc4:	e000ed04 	.word	0xe000ed04
  402cc8:	004021d5 	.word	0x004021d5
  402ccc:	00401dd3 	.word	0x00401dd3
  402cd0:	2040c6b4 	.word	0x2040c6b4

00402cd4 <vTaskStartScheduler>:
{
  402cd4:	b510      	push	{r4, lr}
  402cd6:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
  402cd8:	2300      	movs	r3, #0
  402cda:	9303      	str	r3, [sp, #12]
  402cdc:	9302      	str	r3, [sp, #8]
  402cde:	9301      	str	r3, [sp, #4]
  402ce0:	9300      	str	r3, [sp, #0]
  402ce2:	2282      	movs	r2, #130	; 0x82
  402ce4:	4916      	ldr	r1, [pc, #88]	; (402d40 <vTaskStartScheduler+0x6c>)
  402ce6:	4817      	ldr	r0, [pc, #92]	; (402d44 <vTaskStartScheduler+0x70>)
  402ce8:	4c17      	ldr	r4, [pc, #92]	; (402d48 <vTaskStartScheduler+0x74>)
  402cea:	47a0      	blx	r4
		if( xReturn == pdPASS )
  402cec:	2801      	cmp	r0, #1
  402cee:	d00b      	beq.n	402d08 <vTaskStartScheduler+0x34>
		configASSERT( xReturn );
  402cf0:	bb20      	cbnz	r0, 402d3c <vTaskStartScheduler+0x68>
  402cf2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402cf6:	b672      	cpsid	i
  402cf8:	f383 8811 	msr	BASEPRI, r3
  402cfc:	f3bf 8f6f 	isb	sy
  402d00:	f3bf 8f4f 	dsb	sy
  402d04:	b662      	cpsie	i
  402d06:	e7fe      	b.n	402d06 <vTaskStartScheduler+0x32>
			xReturn = xTimerCreateTimerTask();
  402d08:	4b10      	ldr	r3, [pc, #64]	; (402d4c <vTaskStartScheduler+0x78>)
  402d0a:	4798      	blx	r3
	if( xReturn == pdPASS )
  402d0c:	2801      	cmp	r0, #1
  402d0e:	d1ef      	bne.n	402cf0 <vTaskStartScheduler+0x1c>
  402d10:	f04f 0380 	mov.w	r3, #128	; 0x80
  402d14:	b672      	cpsid	i
  402d16:	f383 8811 	msr	BASEPRI, r3
  402d1a:	f3bf 8f6f 	isb	sy
  402d1e:	f3bf 8f4f 	dsb	sy
  402d22:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
  402d24:	f04f 32ff 	mov.w	r2, #4294967295
  402d28:	4b09      	ldr	r3, [pc, #36]	; (402d50 <vTaskStartScheduler+0x7c>)
  402d2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
  402d2c:	2201      	movs	r2, #1
  402d2e:	4b09      	ldr	r3, [pc, #36]	; (402d54 <vTaskStartScheduler+0x80>)
  402d30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
  402d32:	2200      	movs	r2, #0
  402d34:	4b08      	ldr	r3, [pc, #32]	; (402d58 <vTaskStartScheduler+0x84>)
  402d36:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
  402d38:	4b08      	ldr	r3, [pc, #32]	; (402d5c <vTaskStartScheduler+0x88>)
  402d3a:	4798      	blx	r3
}
  402d3c:	b004      	add	sp, #16
  402d3e:	bd10      	pop	{r4, pc}
  402d40:	00407058 	.word	0x00407058
  402d44:	00403079 	.word	0x00403079
  402d48:	00402aa1 	.word	0x00402aa1
  402d4c:	004036b9 	.word	0x004036b9
  402d50:	2040c6dc 	.word	0x2040c6dc
  402d54:	2040c6f8 	.word	0x2040c6f8
  402d58:	2040c724 	.word	0x2040c724
  402d5c:	0040203d 	.word	0x0040203d

00402d60 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
  402d60:	4a02      	ldr	r2, [pc, #8]	; (402d6c <vTaskSuspendAll+0xc>)
  402d62:	6813      	ldr	r3, [r2, #0]
  402d64:	3301      	adds	r3, #1
  402d66:	6013      	str	r3, [r2, #0]
  402d68:	4770      	bx	lr
  402d6a:	bf00      	nop
  402d6c:	2040c6a4 	.word	0x2040c6a4

00402d70 <xTaskGetTickCount>:
		xTicks = xTickCount;
  402d70:	4b01      	ldr	r3, [pc, #4]	; (402d78 <xTaskGetTickCount+0x8>)
  402d72:	6818      	ldr	r0, [r3, #0]
}
  402d74:	4770      	bx	lr
  402d76:	bf00      	nop
  402d78:	2040c724 	.word	0x2040c724

00402d7c <xTaskIncrementTick>:
{
  402d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402d80:	4b42      	ldr	r3, [pc, #264]	; (402e8c <xTaskIncrementTick+0x110>)
  402d82:	681b      	ldr	r3, [r3, #0]
  402d84:	2b00      	cmp	r3, #0
  402d86:	d178      	bne.n	402e7a <xTaskIncrementTick+0xfe>
		++xTickCount;
  402d88:	4b41      	ldr	r3, [pc, #260]	; (402e90 <xTaskIncrementTick+0x114>)
  402d8a:	681a      	ldr	r2, [r3, #0]
  402d8c:	3201      	adds	r2, #1
  402d8e:	601a      	str	r2, [r3, #0]
			const TickType_t xConstTickCount = xTickCount;
  402d90:	681e      	ldr	r6, [r3, #0]
			if( xConstTickCount == ( TickType_t ) 0U )
  402d92:	b9d6      	cbnz	r6, 402dca <xTaskIncrementTick+0x4e>
				taskSWITCH_DELAYED_LISTS();
  402d94:	4b3f      	ldr	r3, [pc, #252]	; (402e94 <xTaskIncrementTick+0x118>)
  402d96:	681b      	ldr	r3, [r3, #0]
  402d98:	681b      	ldr	r3, [r3, #0]
  402d9a:	b153      	cbz	r3, 402db2 <xTaskIncrementTick+0x36>
  402d9c:	f04f 0380 	mov.w	r3, #128	; 0x80
  402da0:	b672      	cpsid	i
  402da2:	f383 8811 	msr	BASEPRI, r3
  402da6:	f3bf 8f6f 	isb	sy
  402daa:	f3bf 8f4f 	dsb	sy
  402dae:	b662      	cpsie	i
  402db0:	e7fe      	b.n	402db0 <xTaskIncrementTick+0x34>
  402db2:	4a38      	ldr	r2, [pc, #224]	; (402e94 <xTaskIncrementTick+0x118>)
  402db4:	6811      	ldr	r1, [r2, #0]
  402db6:	4b38      	ldr	r3, [pc, #224]	; (402e98 <xTaskIncrementTick+0x11c>)
  402db8:	6818      	ldr	r0, [r3, #0]
  402dba:	6010      	str	r0, [r2, #0]
  402dbc:	6019      	str	r1, [r3, #0]
  402dbe:	4a37      	ldr	r2, [pc, #220]	; (402e9c <xTaskIncrementTick+0x120>)
  402dc0:	6813      	ldr	r3, [r2, #0]
  402dc2:	3301      	adds	r3, #1
  402dc4:	6013      	str	r3, [r2, #0]
  402dc6:	4b36      	ldr	r3, [pc, #216]	; (402ea0 <xTaskIncrementTick+0x124>)
  402dc8:	4798      	blx	r3
			if( xConstTickCount >= xNextTaskUnblockTime )
  402dca:	4b36      	ldr	r3, [pc, #216]	; (402ea4 <xTaskIncrementTick+0x128>)
  402dcc:	681b      	ldr	r3, [r3, #0]
  402dce:	429e      	cmp	r6, r3
  402dd0:	d218      	bcs.n	402e04 <xTaskIncrementTick+0x88>
BaseType_t xSwitchRequired = pdFALSE;
  402dd2:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
  402dd4:	4b34      	ldr	r3, [pc, #208]	; (402ea8 <xTaskIncrementTick+0x12c>)
  402dd6:	681b      	ldr	r3, [r3, #0]
  402dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402dda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  402dde:	4a33      	ldr	r2, [pc, #204]	; (402eac <xTaskIncrementTick+0x130>)
  402de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
				xSwitchRequired = pdTRUE;
  402de4:	2b02      	cmp	r3, #2
  402de6:	bf28      	it	cs
  402de8:	2401      	movcs	r4, #1
			if( uxPendedTicks == ( UBaseType_t ) 0U )
  402dea:	4b31      	ldr	r3, [pc, #196]	; (402eb0 <xTaskIncrementTick+0x134>)
  402dec:	681b      	ldr	r3, [r3, #0]
  402dee:	b90b      	cbnz	r3, 402df4 <xTaskIncrementTick+0x78>
				vApplicationTickHook();
  402df0:	4b30      	ldr	r3, [pc, #192]	; (402eb4 <xTaskIncrementTick+0x138>)
  402df2:	4798      	blx	r3
		if( xYieldPending != pdFALSE )
  402df4:	4b30      	ldr	r3, [pc, #192]	; (402eb8 <xTaskIncrementTick+0x13c>)
  402df6:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
  402df8:	2b00      	cmp	r3, #0
}
  402dfa:	bf0c      	ite	eq
  402dfc:	4620      	moveq	r0, r4
  402dfe:	2001      	movne	r0, #1
  402e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  402e04:	2400      	movs	r4, #0
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402e06:	f8df 908c 	ldr.w	r9, [pc, #140]	; 402e94 <xTaskIncrementTick+0x118>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402e0a:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 402ec4 <xTaskIncrementTick+0x148>
						prvAddTaskToReadyList( pxTCB );
  402e0e:	4f2b      	ldr	r7, [pc, #172]	; (402ebc <xTaskIncrementTick+0x140>)
  402e10:	e01f      	b.n	402e52 <xTaskIncrementTick+0xd6>
						xNextTaskUnblockTime = portMAX_DELAY;
  402e12:	f04f 32ff 	mov.w	r2, #4294967295
  402e16:	4b23      	ldr	r3, [pc, #140]	; (402ea4 <xTaskIncrementTick+0x128>)
  402e18:	601a      	str	r2, [r3, #0]
						break;
  402e1a:	e7db      	b.n	402dd4 <xTaskIncrementTick+0x58>
							xNextTaskUnblockTime = xItemValue;
  402e1c:	4a21      	ldr	r2, [pc, #132]	; (402ea4 <xTaskIncrementTick+0x128>)
  402e1e:	6013      	str	r3, [r2, #0]
							break;
  402e20:	e7d8      	b.n	402dd4 <xTaskIncrementTick+0x58>
							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402e22:	f105 0018 	add.w	r0, r5, #24
  402e26:	47c0      	blx	r8
						prvAddTaskToReadyList( pxTCB );
  402e28:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
  402e2a:	683a      	ldr	r2, [r7, #0]
  402e2c:	2301      	movs	r3, #1
  402e2e:	4083      	lsls	r3, r0
  402e30:	4313      	orrs	r3, r2
  402e32:	603b      	str	r3, [r7, #0]
  402e34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402e38:	4651      	mov	r1, sl
  402e3a:	4b1c      	ldr	r3, [pc, #112]	; (402eac <xTaskIncrementTick+0x130>)
  402e3c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  402e40:	4b1f      	ldr	r3, [pc, #124]	; (402ec0 <xTaskIncrementTick+0x144>)
  402e42:	4798      	blx	r3
							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402e44:	4b18      	ldr	r3, [pc, #96]	; (402ea8 <xTaskIncrementTick+0x12c>)
  402e46:	681b      	ldr	r3, [r3, #0]
  402e48:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  402e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
								xSwitchRequired = pdTRUE;
  402e4c:	429a      	cmp	r2, r3
  402e4e:	bf28      	it	cs
  402e50:	2401      	movcs	r4, #1
					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
  402e52:	f8d9 3000 	ldr.w	r3, [r9]
  402e56:	681b      	ldr	r3, [r3, #0]
  402e58:	2b00      	cmp	r3, #0
  402e5a:	d0da      	beq.n	402e12 <xTaskIncrementTick+0x96>
						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
  402e5c:	f8d9 3000 	ldr.w	r3, [r9]
  402e60:	68db      	ldr	r3, [r3, #12]
  402e62:	68dd      	ldr	r5, [r3, #12]
						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
  402e64:	686b      	ldr	r3, [r5, #4]
						if( xConstTickCount < xItemValue )
  402e66:	429e      	cmp	r6, r3
  402e68:	d3d8      	bcc.n	402e1c <xTaskIncrementTick+0xa0>
						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402e6a:	f105 0a04 	add.w	sl, r5, #4
  402e6e:	4650      	mov	r0, sl
  402e70:	47c0      	blx	r8
						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
  402e72:	6aab      	ldr	r3, [r5, #40]	; 0x28
  402e74:	2b00      	cmp	r3, #0
  402e76:	d1d4      	bne.n	402e22 <xTaskIncrementTick+0xa6>
  402e78:	e7d6      	b.n	402e28 <xTaskIncrementTick+0xac>
		++uxPendedTicks;
  402e7a:	4a0d      	ldr	r2, [pc, #52]	; (402eb0 <xTaskIncrementTick+0x134>)
  402e7c:	6813      	ldr	r3, [r2, #0]
  402e7e:	3301      	adds	r3, #1
  402e80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
  402e82:	4b0c      	ldr	r3, [pc, #48]	; (402eb4 <xTaskIncrementTick+0x138>)
  402e84:	4798      	blx	r3
BaseType_t xSwitchRequired = pdFALSE;
  402e86:	2400      	movs	r4, #0
  402e88:	e7b4      	b.n	402df4 <xTaskIncrementTick+0x78>
  402e8a:	bf00      	nop
  402e8c:	2040c6a4 	.word	0x2040c6a4
  402e90:	2040c724 	.word	0x2040c724
  402e94:	2040c630 	.word	0x2040c630
  402e98:	2040c634 	.word	0x2040c634
  402e9c:	2040c6e0 	.word	0x2040c6e0
  402ea0:	00402a1d 	.word	0x00402a1d
  402ea4:	2040c6dc 	.word	0x2040c6dc
  402ea8:	2040c62c 	.word	0x2040c62c
  402eac:	2040c638 	.word	0x2040c638
  402eb0:	2040c6a0 	.word	0x2040c6a0
  402eb4:	00403c11 	.word	0x00403c11
  402eb8:	2040c728 	.word	0x2040c728
  402ebc:	2040c6b0 	.word	0x2040c6b0
  402ec0:	00401dd9 	.word	0x00401dd9
  402ec4:	00401e25 	.word	0x00401e25

00402ec8 <xTaskResumeAll>:
{
  402ec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
  402ecc:	4b38      	ldr	r3, [pc, #224]	; (402fb0 <xTaskResumeAll+0xe8>)
  402ece:	681b      	ldr	r3, [r3, #0]
  402ed0:	b953      	cbnz	r3, 402ee8 <xTaskResumeAll+0x20>
  402ed2:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ed6:	b672      	cpsid	i
  402ed8:	f383 8811 	msr	BASEPRI, r3
  402edc:	f3bf 8f6f 	isb	sy
  402ee0:	f3bf 8f4f 	dsb	sy
  402ee4:	b662      	cpsie	i
  402ee6:	e7fe      	b.n	402ee6 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
  402ee8:	4b32      	ldr	r3, [pc, #200]	; (402fb4 <xTaskResumeAll+0xec>)
  402eea:	4798      	blx	r3
		--uxSchedulerSuspended;
  402eec:	4b30      	ldr	r3, [pc, #192]	; (402fb0 <xTaskResumeAll+0xe8>)
  402eee:	681a      	ldr	r2, [r3, #0]
  402ef0:	3a01      	subs	r2, #1
  402ef2:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  402ef4:	681b      	ldr	r3, [r3, #0]
  402ef6:	2b00      	cmp	r3, #0
  402ef8:	d155      	bne.n	402fa6 <xTaskResumeAll+0xde>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
  402efa:	4b2f      	ldr	r3, [pc, #188]	; (402fb8 <xTaskResumeAll+0xf0>)
  402efc:	681b      	ldr	r3, [r3, #0]
  402efe:	2b00      	cmp	r3, #0
  402f00:	d132      	bne.n	402f68 <xTaskResumeAll+0xa0>
BaseType_t xAlreadyYielded = pdFALSE;
  402f02:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  402f04:	4b2d      	ldr	r3, [pc, #180]	; (402fbc <xTaskResumeAll+0xf4>)
  402f06:	4798      	blx	r3
}
  402f08:	4620      	mov	r0, r4
  402f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
  402f0e:	68fb      	ldr	r3, [r7, #12]
  402f10:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402f12:	f104 0018 	add.w	r0, r4, #24
  402f16:	47b0      	blx	r6
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  402f18:	f104 0804 	add.w	r8, r4, #4
  402f1c:	4640      	mov	r0, r8
  402f1e:	47b0      	blx	r6
					prvAddTaskToReadyList( pxTCB );
  402f20:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  402f22:	682a      	ldr	r2, [r5, #0]
  402f24:	2301      	movs	r3, #1
  402f26:	4083      	lsls	r3, r0
  402f28:	4313      	orrs	r3, r2
  402f2a:	602b      	str	r3, [r5, #0]
  402f2c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  402f30:	4641      	mov	r1, r8
  402f32:	eb09 0080 	add.w	r0, r9, r0, lsl #2
  402f36:	4b22      	ldr	r3, [pc, #136]	; (402fc0 <xTaskResumeAll+0xf8>)
  402f38:	4798      	blx	r3
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
  402f3a:	4b22      	ldr	r3, [pc, #136]	; (402fc4 <xTaskResumeAll+0xfc>)
  402f3c:	681b      	ldr	r3, [r3, #0]
  402f3e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  402f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  402f42:	429a      	cmp	r2, r3
  402f44:	d20c      	bcs.n	402f60 <xTaskResumeAll+0x98>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402f46:	683b      	ldr	r3, [r7, #0]
  402f48:	2b00      	cmp	r3, #0
  402f4a:	d1e0      	bne.n	402f0e <xTaskResumeAll+0x46>
				if( uxPendedTicks > ( UBaseType_t ) 0U )
  402f4c:	4b1e      	ldr	r3, [pc, #120]	; (402fc8 <xTaskResumeAll+0x100>)
  402f4e:	681b      	ldr	r3, [r3, #0]
  402f50:	b1db      	cbz	r3, 402f8a <xTaskResumeAll+0xc2>
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402f52:	4b1d      	ldr	r3, [pc, #116]	; (402fc8 <xTaskResumeAll+0x100>)
  402f54:	681b      	ldr	r3, [r3, #0]
  402f56:	b1c3      	cbz	r3, 402f8a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402f58:	4e1c      	ldr	r6, [pc, #112]	; (402fcc <xTaskResumeAll+0x104>)
							xYieldPending = pdTRUE;
  402f5a:	4d1d      	ldr	r5, [pc, #116]	; (402fd0 <xTaskResumeAll+0x108>)
						--uxPendedTicks;
  402f5c:	4c1a      	ldr	r4, [pc, #104]	; (402fc8 <xTaskResumeAll+0x100>)
  402f5e:	e00e      	b.n	402f7e <xTaskResumeAll+0xb6>
						xYieldPending = pdTRUE;
  402f60:	2201      	movs	r2, #1
  402f62:	4b1b      	ldr	r3, [pc, #108]	; (402fd0 <xTaskResumeAll+0x108>)
  402f64:	601a      	str	r2, [r3, #0]
  402f66:	e7ee      	b.n	402f46 <xTaskResumeAll+0x7e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
  402f68:	4f1a      	ldr	r7, [pc, #104]	; (402fd4 <xTaskResumeAll+0x10c>)
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
  402f6a:	4e1b      	ldr	r6, [pc, #108]	; (402fd8 <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
  402f6c:	4d1b      	ldr	r5, [pc, #108]	; (402fdc <xTaskResumeAll+0x114>)
  402f6e:	f8df 9074 	ldr.w	r9, [pc, #116]	; 402fe4 <xTaskResumeAll+0x11c>
  402f72:	e7e8      	b.n	402f46 <xTaskResumeAll+0x7e>
						--uxPendedTicks;
  402f74:	6823      	ldr	r3, [r4, #0]
  402f76:	3b01      	subs	r3, #1
  402f78:	6023      	str	r3, [r4, #0]
					while( uxPendedTicks > ( UBaseType_t ) 0U )
  402f7a:	6823      	ldr	r3, [r4, #0]
  402f7c:	b12b      	cbz	r3, 402f8a <xTaskResumeAll+0xc2>
						if( xTaskIncrementTick() != pdFALSE )
  402f7e:	47b0      	blx	r6
  402f80:	2800      	cmp	r0, #0
  402f82:	d0f7      	beq.n	402f74 <xTaskResumeAll+0xac>
							xYieldPending = pdTRUE;
  402f84:	2301      	movs	r3, #1
  402f86:	602b      	str	r3, [r5, #0]
  402f88:	e7f4      	b.n	402f74 <xTaskResumeAll+0xac>
				if( xYieldPending == pdTRUE )
  402f8a:	4b11      	ldr	r3, [pc, #68]	; (402fd0 <xTaskResumeAll+0x108>)
  402f8c:	681b      	ldr	r3, [r3, #0]
  402f8e:	2b01      	cmp	r3, #1
  402f90:	d10b      	bne.n	402faa <xTaskResumeAll+0xe2>
					taskYIELD_IF_USING_PREEMPTION();
  402f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  402f96:	4b12      	ldr	r3, [pc, #72]	; (402fe0 <xTaskResumeAll+0x118>)
  402f98:	601a      	str	r2, [r3, #0]
  402f9a:	f3bf 8f4f 	dsb	sy
  402f9e:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
  402fa2:	2401      	movs	r4, #1
  402fa4:	e7ae      	b.n	402f04 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
  402fa6:	2400      	movs	r4, #0
  402fa8:	e7ac      	b.n	402f04 <xTaskResumeAll+0x3c>
  402faa:	2400      	movs	r4, #0
  402fac:	e7aa      	b.n	402f04 <xTaskResumeAll+0x3c>
  402fae:	bf00      	nop
  402fb0:	2040c6a4 	.word	0x2040c6a4
  402fb4:	00401f09 	.word	0x00401f09
  402fb8:	2040c69c 	.word	0x2040c69c
  402fbc:	00401f55 	.word	0x00401f55
  402fc0:	00401dd9 	.word	0x00401dd9
  402fc4:	2040c62c 	.word	0x2040c62c
  402fc8:	2040c6a0 	.word	0x2040c6a0
  402fcc:	00402d7d 	.word	0x00402d7d
  402fd0:	2040c728 	.word	0x2040c728
  402fd4:	2040c6e4 	.word	0x2040c6e4
  402fd8:	00401e25 	.word	0x00401e25
  402fdc:	2040c6b0 	.word	0x2040c6b0
  402fe0:	e000ed04 	.word	0xe000ed04
  402fe4:	2040c638 	.word	0x2040c638

00402fe8 <vTaskDelay>:
	{
  402fe8:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
  402fea:	2800      	cmp	r0, #0
  402fec:	d029      	beq.n	403042 <vTaskDelay+0x5a>
  402fee:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
  402ff0:	4b18      	ldr	r3, [pc, #96]	; (403054 <vTaskDelay+0x6c>)
  402ff2:	681b      	ldr	r3, [r3, #0]
  402ff4:	b153      	cbz	r3, 40300c <vTaskDelay+0x24>
  402ff6:	f04f 0380 	mov.w	r3, #128	; 0x80
  402ffa:	b672      	cpsid	i
  402ffc:	f383 8811 	msr	BASEPRI, r3
  403000:	f3bf 8f6f 	isb	sy
  403004:	f3bf 8f4f 	dsb	sy
  403008:	b662      	cpsie	i
  40300a:	e7fe      	b.n	40300a <vTaskDelay+0x22>
			vTaskSuspendAll();
  40300c:	4b12      	ldr	r3, [pc, #72]	; (403058 <vTaskDelay+0x70>)
  40300e:	4798      	blx	r3
				xTimeToWake = xTickCount + xTicksToDelay;
  403010:	4b12      	ldr	r3, [pc, #72]	; (40305c <vTaskDelay+0x74>)
  403012:	681b      	ldr	r3, [r3, #0]
  403014:	441c      	add	r4, r3
				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403016:	4b12      	ldr	r3, [pc, #72]	; (403060 <vTaskDelay+0x78>)
  403018:	6818      	ldr	r0, [r3, #0]
  40301a:	3004      	adds	r0, #4
  40301c:	4b11      	ldr	r3, [pc, #68]	; (403064 <vTaskDelay+0x7c>)
  40301e:	4798      	blx	r3
  403020:	b948      	cbnz	r0, 403036 <vTaskDelay+0x4e>
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403022:	4b0f      	ldr	r3, [pc, #60]	; (403060 <vTaskDelay+0x78>)
  403024:	681a      	ldr	r2, [r3, #0]
  403026:	4910      	ldr	r1, [pc, #64]	; (403068 <vTaskDelay+0x80>)
  403028:	680b      	ldr	r3, [r1, #0]
  40302a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  40302c:	2201      	movs	r2, #1
  40302e:	4082      	lsls	r2, r0
  403030:	ea23 0302 	bic.w	r3, r3, r2
  403034:	600b      	str	r3, [r1, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  403036:	4620      	mov	r0, r4
  403038:	4b0c      	ldr	r3, [pc, #48]	; (40306c <vTaskDelay+0x84>)
  40303a:	4798      	blx	r3
			xAlreadyYielded = xTaskResumeAll();
  40303c:	4b0c      	ldr	r3, [pc, #48]	; (403070 <vTaskDelay+0x88>)
  40303e:	4798      	blx	r3
		if( xAlreadyYielded == pdFALSE )
  403040:	b938      	cbnz	r0, 403052 <vTaskDelay+0x6a>
			portYIELD_WITHIN_API();
  403042:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  403046:	4b0b      	ldr	r3, [pc, #44]	; (403074 <vTaskDelay+0x8c>)
  403048:	601a      	str	r2, [r3, #0]
  40304a:	f3bf 8f4f 	dsb	sy
  40304e:	f3bf 8f6f 	isb	sy
  403052:	bd10      	pop	{r4, pc}
  403054:	2040c6a4 	.word	0x2040c6a4
  403058:	00402d61 	.word	0x00402d61
  40305c:	2040c724 	.word	0x2040c724
  403060:	2040c62c 	.word	0x2040c62c
  403064:	00401e25 	.word	0x00401e25
  403068:	2040c6b0 	.word	0x2040c6b0
  40306c:	00402a49 	.word	0x00402a49
  403070:	00402ec9 	.word	0x00402ec9
  403074:	e000ed04 	.word	0xe000ed04

00403078 <prvIdleTask>:
{
  403078:	b580      	push	{r7, lr}
			vTaskSuspendAll();
  40307a:	f8df 8088 	ldr.w	r8, [pc, #136]	; 403104 <prvIdleTask+0x8c>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  40307e:	4e19      	ldr	r6, [pc, #100]	; (4030e4 <prvIdleTask+0x6c>)
				taskYIELD();
  403080:	f8df 9084 	ldr.w	r9, [pc, #132]	; 403108 <prvIdleTask+0x90>
  403084:	e02a      	b.n	4030dc <prvIdleTask+0x64>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
  403086:	4b18      	ldr	r3, [pc, #96]	; (4030e8 <prvIdleTask+0x70>)
  403088:	681b      	ldr	r3, [r3, #0]
  40308a:	2b01      	cmp	r3, #1
  40308c:	d81e      	bhi.n	4030cc <prvIdleTask+0x54>
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  40308e:	682b      	ldr	r3, [r5, #0]
  403090:	2b00      	cmp	r3, #0
  403092:	d0f8      	beq.n	403086 <prvIdleTask+0xe>
			vTaskSuspendAll();
  403094:	47c0      	blx	r8
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
  403096:	6834      	ldr	r4, [r6, #0]
			( void ) xTaskResumeAll();
  403098:	47b8      	blx	r7
			if( xListIsEmpty == pdFALSE )
  40309a:	2c00      	cmp	r4, #0
  40309c:	d0f7      	beq.n	40308e <prvIdleTask+0x16>
				taskENTER_CRITICAL();
  40309e:	4b13      	ldr	r3, [pc, #76]	; (4030ec <prvIdleTask+0x74>)
  4030a0:	4798      	blx	r3
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
  4030a2:	68f3      	ldr	r3, [r6, #12]
  4030a4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
  4030a6:	1d20      	adds	r0, r4, #4
  4030a8:	4b11      	ldr	r3, [pc, #68]	; (4030f0 <prvIdleTask+0x78>)
  4030aa:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
  4030ac:	4a11      	ldr	r2, [pc, #68]	; (4030f4 <prvIdleTask+0x7c>)
  4030ae:	6813      	ldr	r3, [r2, #0]
  4030b0:	3b01      	subs	r3, #1
  4030b2:	6013      	str	r3, [r2, #0]
					--uxTasksDeleted;
  4030b4:	682b      	ldr	r3, [r5, #0]
  4030b6:	3b01      	subs	r3, #1
  4030b8:	602b      	str	r3, [r5, #0]
				taskEXIT_CRITICAL();
  4030ba:	4b0f      	ldr	r3, [pc, #60]	; (4030f8 <prvIdleTask+0x80>)
  4030bc:	4798      	blx	r3
			vPortFreeAligned( pxTCB->pxStack );
  4030be:	6b20      	ldr	r0, [r4, #48]	; 0x30
  4030c0:	f8df a048 	ldr.w	sl, [pc, #72]	; 40310c <prvIdleTask+0x94>
  4030c4:	47d0      	blx	sl
		vPortFree( pxTCB );
  4030c6:	4620      	mov	r0, r4
  4030c8:	47d0      	blx	sl
  4030ca:	e7e0      	b.n	40308e <prvIdleTask+0x16>
				taskYIELD();
  4030cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  4030d0:	f8c9 3000 	str.w	r3, [r9]
  4030d4:	f3bf 8f4f 	dsb	sy
  4030d8:	f3bf 8f6f 	isb	sy
		while( uxTasksDeleted > ( UBaseType_t ) 0U )
  4030dc:	4d07      	ldr	r5, [pc, #28]	; (4030fc <prvIdleTask+0x84>)
			( void ) xTaskResumeAll();
  4030de:	4f08      	ldr	r7, [pc, #32]	; (403100 <prvIdleTask+0x88>)
  4030e0:	e7d5      	b.n	40308e <prvIdleTask+0x16>
  4030e2:	bf00      	nop
  4030e4:	2040c710 	.word	0x2040c710
  4030e8:	2040c638 	.word	0x2040c638
  4030ec:	00401f09 	.word	0x00401f09
  4030f0:	00401e25 	.word	0x00401e25
  4030f4:	2040c69c 	.word	0x2040c69c
  4030f8:	00401f55 	.word	0x00401f55
  4030fc:	2040c6ac 	.word	0x2040c6ac
  403100:	00402ec9 	.word	0x00402ec9
  403104:	00402d61 	.word	0x00402d61
  403108:	e000ed04 	.word	0xe000ed04
  40310c:	004021d5 	.word	0x004021d5

00403110 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
  403110:	4b2d      	ldr	r3, [pc, #180]	; (4031c8 <vTaskSwitchContext+0xb8>)
  403112:	681b      	ldr	r3, [r3, #0]
  403114:	2b00      	cmp	r3, #0
  403116:	d12c      	bne.n	403172 <vTaskSwitchContext+0x62>
{
  403118:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
  40311a:	2200      	movs	r2, #0
  40311c:	4b2b      	ldr	r3, [pc, #172]	; (4031cc <vTaskSwitchContext+0xbc>)
  40311e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
  403120:	4b2b      	ldr	r3, [pc, #172]	; (4031d0 <vTaskSwitchContext+0xc0>)
  403122:	681b      	ldr	r3, [r3, #0]
  403124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  403126:	681a      	ldr	r2, [r3, #0]
  403128:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  40312c:	d103      	bne.n	403136 <vTaskSwitchContext+0x26>
  40312e:	685a      	ldr	r2, [r3, #4]
  403130:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403134:	d021      	beq.n	40317a <vTaskSwitchContext+0x6a>
  403136:	4b26      	ldr	r3, [pc, #152]	; (4031d0 <vTaskSwitchContext+0xc0>)
  403138:	6818      	ldr	r0, [r3, #0]
  40313a:	6819      	ldr	r1, [r3, #0]
  40313c:	3134      	adds	r1, #52	; 0x34
  40313e:	4b25      	ldr	r3, [pc, #148]	; (4031d4 <vTaskSwitchContext+0xc4>)
  403140:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK();
  403142:	4b25      	ldr	r3, [pc, #148]	; (4031d8 <vTaskSwitchContext+0xc8>)
  403144:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
  403146:	fab3 f383 	clz	r3, r3
  40314a:	b2db      	uxtb	r3, r3
  40314c:	f1c3 031f 	rsb	r3, r3, #31
  403150:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  403154:	4a21      	ldr	r2, [pc, #132]	; (4031dc <vTaskSwitchContext+0xcc>)
  403156:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  40315a:	b9ba      	cbnz	r2, 40318c <vTaskSwitchContext+0x7c>
	__asm volatile
  40315c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403160:	b672      	cpsid	i
  403162:	f383 8811 	msr	BASEPRI, r3
  403166:	f3bf 8f6f 	isb	sy
  40316a:	f3bf 8f4f 	dsb	sy
  40316e:	b662      	cpsie	i
  403170:	e7fe      	b.n	403170 <vTaskSwitchContext+0x60>
		xYieldPending = pdTRUE;
  403172:	2201      	movs	r2, #1
  403174:	4b15      	ldr	r3, [pc, #84]	; (4031cc <vTaskSwitchContext+0xbc>)
  403176:	601a      	str	r2, [r3, #0]
  403178:	4770      	bx	lr
		taskCHECK_FOR_STACK_OVERFLOW();
  40317a:	689a      	ldr	r2, [r3, #8]
  40317c:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
  403180:	d1d9      	bne.n	403136 <vTaskSwitchContext+0x26>
  403182:	68db      	ldr	r3, [r3, #12]
  403184:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
  403188:	d1d5      	bne.n	403136 <vTaskSwitchContext+0x26>
  40318a:	e7da      	b.n	403142 <vTaskSwitchContext+0x32>
		taskSELECT_HIGHEST_PRIORITY_TASK();
  40318c:	4a13      	ldr	r2, [pc, #76]	; (4031dc <vTaskSwitchContext+0xcc>)
  40318e:	0099      	lsls	r1, r3, #2
  403190:	18c8      	adds	r0, r1, r3
  403192:	eb02 0080 	add.w	r0, r2, r0, lsl #2
  403196:	6844      	ldr	r4, [r0, #4]
  403198:	6864      	ldr	r4, [r4, #4]
  40319a:	6044      	str	r4, [r0, #4]
  40319c:	4419      	add	r1, r3
  40319e:	4602      	mov	r2, r0
  4031a0:	3208      	adds	r2, #8
  4031a2:	4294      	cmp	r4, r2
  4031a4:	d009      	beq.n	4031ba <vTaskSwitchContext+0xaa>
  4031a6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  4031aa:	4a0c      	ldr	r2, [pc, #48]	; (4031dc <vTaskSwitchContext+0xcc>)
  4031ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
  4031b0:	685b      	ldr	r3, [r3, #4]
  4031b2:	68da      	ldr	r2, [r3, #12]
  4031b4:	4b06      	ldr	r3, [pc, #24]	; (4031d0 <vTaskSwitchContext+0xc0>)
  4031b6:	601a      	str	r2, [r3, #0]
  4031b8:	bd10      	pop	{r4, pc}
  4031ba:	6860      	ldr	r0, [r4, #4]
  4031bc:	4a07      	ldr	r2, [pc, #28]	; (4031dc <vTaskSwitchContext+0xcc>)
  4031be:	eb02 0281 	add.w	r2, r2, r1, lsl #2
  4031c2:	6050      	str	r0, [r2, #4]
  4031c4:	e7ef      	b.n	4031a6 <vTaskSwitchContext+0x96>
  4031c6:	bf00      	nop
  4031c8:	2040c6a4 	.word	0x2040c6a4
  4031cc:	2040c728 	.word	0x2040c728
  4031d0:	2040c62c 	.word	0x2040c62c
  4031d4:	00403bf9 	.word	0x00403bf9
  4031d8:	2040c6b0 	.word	0x2040c6b0
  4031dc:	2040c638 	.word	0x2040c638

004031e0 <vTaskPlaceOnEventList>:
{
  4031e0:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxEventList );
  4031e2:	b1e0      	cbz	r0, 40321e <vTaskPlaceOnEventList+0x3e>
  4031e4:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  4031e6:	4d17      	ldr	r5, [pc, #92]	; (403244 <vTaskPlaceOnEventList+0x64>)
  4031e8:	6829      	ldr	r1, [r5, #0]
  4031ea:	3118      	adds	r1, #24
  4031ec:	4b16      	ldr	r3, [pc, #88]	; (403248 <vTaskPlaceOnEventList+0x68>)
  4031ee:	4798      	blx	r3
	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4031f0:	6828      	ldr	r0, [r5, #0]
  4031f2:	3004      	adds	r0, #4
  4031f4:	4b15      	ldr	r3, [pc, #84]	; (40324c <vTaskPlaceOnEventList+0x6c>)
  4031f6:	4798      	blx	r3
  4031f8:	b940      	cbnz	r0, 40320c <vTaskPlaceOnEventList+0x2c>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  4031fa:	682a      	ldr	r2, [r5, #0]
  4031fc:	4914      	ldr	r1, [pc, #80]	; (403250 <vTaskPlaceOnEventList+0x70>)
  4031fe:	680b      	ldr	r3, [r1, #0]
  403200:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403202:	2201      	movs	r2, #1
  403204:	4082      	lsls	r2, r0
  403206:	ea23 0302 	bic.w	r3, r3, r2
  40320a:	600b      	str	r3, [r1, #0]
		if( xTicksToWait == portMAX_DELAY )
  40320c:	f1b4 3fff 	cmp.w	r4, #4294967295
  403210:	d010      	beq.n	403234 <vTaskPlaceOnEventList+0x54>
			xTimeToWake = xTickCount + xTicksToWait;
  403212:	4b10      	ldr	r3, [pc, #64]	; (403254 <vTaskPlaceOnEventList+0x74>)
  403214:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
  403216:	4420      	add	r0, r4
  403218:	4b0f      	ldr	r3, [pc, #60]	; (403258 <vTaskPlaceOnEventList+0x78>)
  40321a:	4798      	blx	r3
  40321c:	bd38      	pop	{r3, r4, r5, pc}
  40321e:	f04f 0380 	mov.w	r3, #128	; 0x80
  403222:	b672      	cpsid	i
  403224:	f383 8811 	msr	BASEPRI, r3
  403228:	f3bf 8f6f 	isb	sy
  40322c:	f3bf 8f4f 	dsb	sy
  403230:	b662      	cpsie	i
  403232:	e7fe      	b.n	403232 <vTaskPlaceOnEventList+0x52>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  403234:	4b03      	ldr	r3, [pc, #12]	; (403244 <vTaskPlaceOnEventList+0x64>)
  403236:	6819      	ldr	r1, [r3, #0]
  403238:	3104      	adds	r1, #4
  40323a:	4808      	ldr	r0, [pc, #32]	; (40325c <vTaskPlaceOnEventList+0x7c>)
  40323c:	4b08      	ldr	r3, [pc, #32]	; (403260 <vTaskPlaceOnEventList+0x80>)
  40323e:	4798      	blx	r3
  403240:	bd38      	pop	{r3, r4, r5, pc}
  403242:	bf00      	nop
  403244:	2040c62c 	.word	0x2040c62c
  403248:	00401df1 	.word	0x00401df1
  40324c:	00401e25 	.word	0x00401e25
  403250:	2040c6b0 	.word	0x2040c6b0
  403254:	2040c724 	.word	0x2040c724
  403258:	00402a49 	.word	0x00402a49
  40325c:	2040c6fc 	.word	0x2040c6fc
  403260:	00401dd9 	.word	0x00401dd9

00403264 <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
  403264:	b1e8      	cbz	r0, 4032a2 <vTaskPlaceOnEventListRestricted+0x3e>
	{
  403266:	b570      	push	{r4, r5, r6, lr}
  403268:	4615      	mov	r5, r2
  40326a:	460c      	mov	r4, r1
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
  40326c:	4e16      	ldr	r6, [pc, #88]	; (4032c8 <vTaskPlaceOnEventListRestricted+0x64>)
  40326e:	6831      	ldr	r1, [r6, #0]
  403270:	3118      	adds	r1, #24
  403272:	4b16      	ldr	r3, [pc, #88]	; (4032cc <vTaskPlaceOnEventListRestricted+0x68>)
  403274:	4798      	blx	r3
		if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  403276:	6830      	ldr	r0, [r6, #0]
  403278:	3004      	adds	r0, #4
  40327a:	4b15      	ldr	r3, [pc, #84]	; (4032d0 <vTaskPlaceOnEventListRestricted+0x6c>)
  40327c:	4798      	blx	r3
  40327e:	b940      	cbnz	r0, 403292 <vTaskPlaceOnEventListRestricted+0x2e>
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
  403280:	6832      	ldr	r2, [r6, #0]
  403282:	4914      	ldr	r1, [pc, #80]	; (4032d4 <vTaskPlaceOnEventListRestricted+0x70>)
  403284:	680b      	ldr	r3, [r1, #0]
  403286:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
  403288:	2201      	movs	r2, #1
  40328a:	4082      	lsls	r2, r0
  40328c:	ea23 0302 	bic.w	r3, r3, r2
  403290:	600b      	str	r3, [r1, #0]
			if( xWaitIndefinitely == pdTRUE )
  403292:	2d01      	cmp	r5, #1
  403294:	d010      	beq.n	4032b8 <vTaskPlaceOnEventListRestricted+0x54>
				xTimeToWake = xTickCount + xTicksToWait;
  403296:	4b10      	ldr	r3, [pc, #64]	; (4032d8 <vTaskPlaceOnEventListRestricted+0x74>)
  403298:	6818      	ldr	r0, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTimeToWake );
  40329a:	4420      	add	r0, r4
  40329c:	4b0f      	ldr	r3, [pc, #60]	; (4032dc <vTaskPlaceOnEventListRestricted+0x78>)
  40329e:	4798      	blx	r3
  4032a0:	bd70      	pop	{r4, r5, r6, pc}
  4032a2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4032a6:	b672      	cpsid	i
  4032a8:	f383 8811 	msr	BASEPRI, r3
  4032ac:	f3bf 8f6f 	isb	sy
  4032b0:	f3bf 8f4f 	dsb	sy
  4032b4:	b662      	cpsie	i
  4032b6:	e7fe      	b.n	4032b6 <vTaskPlaceOnEventListRestricted+0x52>
				vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
  4032b8:	4b03      	ldr	r3, [pc, #12]	; (4032c8 <vTaskPlaceOnEventListRestricted+0x64>)
  4032ba:	6819      	ldr	r1, [r3, #0]
  4032bc:	3104      	adds	r1, #4
  4032be:	4808      	ldr	r0, [pc, #32]	; (4032e0 <vTaskPlaceOnEventListRestricted+0x7c>)
  4032c0:	4b02      	ldr	r3, [pc, #8]	; (4032cc <vTaskPlaceOnEventListRestricted+0x68>)
  4032c2:	4798      	blx	r3
  4032c4:	bd70      	pop	{r4, r5, r6, pc}
  4032c6:	bf00      	nop
  4032c8:	2040c62c 	.word	0x2040c62c
  4032cc:	00401dd9 	.word	0x00401dd9
  4032d0:	00401e25 	.word	0x00401e25
  4032d4:	2040c6b0 	.word	0x2040c6b0
  4032d8:	2040c724 	.word	0x2040c724
  4032dc:	00402a49 	.word	0x00402a49
  4032e0:	2040c6fc 	.word	0x2040c6fc

004032e4 <xTaskRemoveFromEventList>:
{
  4032e4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
  4032e6:	68c3      	ldr	r3, [r0, #12]
  4032e8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
  4032ea:	b324      	cbz	r4, 403336 <xTaskRemoveFromEventList+0x52>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
  4032ec:	f104 0518 	add.w	r5, r4, #24
  4032f0:	4628      	mov	r0, r5
  4032f2:	4b1a      	ldr	r3, [pc, #104]	; (40335c <xTaskRemoveFromEventList+0x78>)
  4032f4:	4798      	blx	r3
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  4032f6:	4b1a      	ldr	r3, [pc, #104]	; (403360 <xTaskRemoveFromEventList+0x7c>)
  4032f8:	681b      	ldr	r3, [r3, #0]
  4032fa:	bb3b      	cbnz	r3, 40334c <xTaskRemoveFromEventList+0x68>
		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
  4032fc:	1d25      	adds	r5, r4, #4
  4032fe:	4628      	mov	r0, r5
  403300:	4b16      	ldr	r3, [pc, #88]	; (40335c <xTaskRemoveFromEventList+0x78>)
  403302:	4798      	blx	r3
		prvAddTaskToReadyList( pxUnblockedTCB );
  403304:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
  403306:	4a17      	ldr	r2, [pc, #92]	; (403364 <xTaskRemoveFromEventList+0x80>)
  403308:	6811      	ldr	r1, [r2, #0]
  40330a:	2301      	movs	r3, #1
  40330c:	4083      	lsls	r3, r0
  40330e:	430b      	orrs	r3, r1
  403310:	6013      	str	r3, [r2, #0]
  403312:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  403316:	4629      	mov	r1, r5
  403318:	4b13      	ldr	r3, [pc, #76]	; (403368 <xTaskRemoveFromEventList+0x84>)
  40331a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  40331e:	4b13      	ldr	r3, [pc, #76]	; (40336c <xTaskRemoveFromEventList+0x88>)
  403320:	4798      	blx	r3
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
  403322:	4b13      	ldr	r3, [pc, #76]	; (403370 <xTaskRemoveFromEventList+0x8c>)
  403324:	681b      	ldr	r3, [r3, #0]
  403326:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  403328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  40332a:	429a      	cmp	r2, r3
  40332c:	d913      	bls.n	403356 <xTaskRemoveFromEventList+0x72>
		xYieldPending = pdTRUE;
  40332e:	2001      	movs	r0, #1
  403330:	4b10      	ldr	r3, [pc, #64]	; (403374 <xTaskRemoveFromEventList+0x90>)
  403332:	6018      	str	r0, [r3, #0]
  403334:	bd38      	pop	{r3, r4, r5, pc}
  403336:	f04f 0380 	mov.w	r3, #128	; 0x80
  40333a:	b672      	cpsid	i
  40333c:	f383 8811 	msr	BASEPRI, r3
  403340:	f3bf 8f6f 	isb	sy
  403344:	f3bf 8f4f 	dsb	sy
  403348:	b662      	cpsie	i
  40334a:	e7fe      	b.n	40334a <xTaskRemoveFromEventList+0x66>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
  40334c:	4629      	mov	r1, r5
  40334e:	480a      	ldr	r0, [pc, #40]	; (403378 <xTaskRemoveFromEventList+0x94>)
  403350:	4b06      	ldr	r3, [pc, #24]	; (40336c <xTaskRemoveFromEventList+0x88>)
  403352:	4798      	blx	r3
  403354:	e7e5      	b.n	403322 <xTaskRemoveFromEventList+0x3e>
		xReturn = pdFALSE;
  403356:	2000      	movs	r0, #0
}
  403358:	bd38      	pop	{r3, r4, r5, pc}
  40335a:	bf00      	nop
  40335c:	00401e25 	.word	0x00401e25
  403360:	2040c6a4 	.word	0x2040c6a4
  403364:	2040c6b0 	.word	0x2040c6b0
  403368:	2040c638 	.word	0x2040c638
  40336c:	00401dd9 	.word	0x00401dd9
  403370:	2040c62c 	.word	0x2040c62c
  403374:	2040c728 	.word	0x2040c728
  403378:	2040c6e4 	.word	0x2040c6e4

0040337c <vTaskSetTimeOutState>:
	configASSERT( pxTimeOut );
  40337c:	b130      	cbz	r0, 40338c <vTaskSetTimeOutState+0x10>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
  40337e:	4a09      	ldr	r2, [pc, #36]	; (4033a4 <vTaskSetTimeOutState+0x28>)
  403380:	6812      	ldr	r2, [r2, #0]
  403382:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
  403384:	4a08      	ldr	r2, [pc, #32]	; (4033a8 <vTaskSetTimeOutState+0x2c>)
  403386:	6812      	ldr	r2, [r2, #0]
  403388:	6042      	str	r2, [r0, #4]
  40338a:	4770      	bx	lr
  40338c:	f04f 0380 	mov.w	r3, #128	; 0x80
  403390:	b672      	cpsid	i
  403392:	f383 8811 	msr	BASEPRI, r3
  403396:	f3bf 8f6f 	isb	sy
  40339a:	f3bf 8f4f 	dsb	sy
  40339e:	b662      	cpsie	i
  4033a0:	e7fe      	b.n	4033a0 <vTaskSetTimeOutState+0x24>
  4033a2:	bf00      	nop
  4033a4:	2040c6e0 	.word	0x2040c6e0
  4033a8:	2040c724 	.word	0x2040c724

004033ac <xTaskCheckForTimeOut>:
{
  4033ac:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxTimeOut );
  4033ae:	b1c0      	cbz	r0, 4033e2 <xTaskCheckForTimeOut+0x36>
  4033b0:	4604      	mov	r4, r0
	configASSERT( pxTicksToWait );
  4033b2:	b309      	cbz	r1, 4033f8 <xTaskCheckForTimeOut+0x4c>
  4033b4:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
  4033b6:	4b1d      	ldr	r3, [pc, #116]	; (40342c <xTaskCheckForTimeOut+0x80>)
  4033b8:	4798      	blx	r3
		const TickType_t xConstTickCount = xTickCount;
  4033ba:	4b1d      	ldr	r3, [pc, #116]	; (403430 <xTaskCheckForTimeOut+0x84>)
  4033bc:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
  4033be:	682b      	ldr	r3, [r5, #0]
  4033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
  4033c4:	d02e      	beq.n	403424 <xTaskCheckForTimeOut+0x78>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
  4033c6:	491b      	ldr	r1, [pc, #108]	; (403434 <xTaskCheckForTimeOut+0x88>)
  4033c8:	6809      	ldr	r1, [r1, #0]
  4033ca:	6820      	ldr	r0, [r4, #0]
  4033cc:	4288      	cmp	r0, r1
  4033ce:	d002      	beq.n	4033d6 <xTaskCheckForTimeOut+0x2a>
  4033d0:	6861      	ldr	r1, [r4, #4]
  4033d2:	428a      	cmp	r2, r1
  4033d4:	d228      	bcs.n	403428 <xTaskCheckForTimeOut+0x7c>
		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
  4033d6:	6861      	ldr	r1, [r4, #4]
  4033d8:	1a50      	subs	r0, r2, r1
  4033da:	4283      	cmp	r3, r0
  4033dc:	d817      	bhi.n	40340e <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
  4033de:	2401      	movs	r4, #1
  4033e0:	e01c      	b.n	40341c <xTaskCheckForTimeOut+0x70>
  4033e2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033e6:	b672      	cpsid	i
  4033e8:	f383 8811 	msr	BASEPRI, r3
  4033ec:	f3bf 8f6f 	isb	sy
  4033f0:	f3bf 8f4f 	dsb	sy
  4033f4:	b662      	cpsie	i
  4033f6:	e7fe      	b.n	4033f6 <xTaskCheckForTimeOut+0x4a>
  4033f8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4033fc:	b672      	cpsid	i
  4033fe:	f383 8811 	msr	BASEPRI, r3
  403402:	f3bf 8f6f 	isb	sy
  403406:	f3bf 8f4f 	dsb	sy
  40340a:	b662      	cpsie	i
  40340c:	e7fe      	b.n	40340c <xTaskCheckForTimeOut+0x60>
			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
  40340e:	1a9b      	subs	r3, r3, r2
  403410:	440b      	add	r3, r1
  403412:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
  403414:	4620      	mov	r0, r4
  403416:	4b08      	ldr	r3, [pc, #32]	; (403438 <xTaskCheckForTimeOut+0x8c>)
  403418:	4798      	blx	r3
			xReturn = pdFALSE;
  40341a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
  40341c:	4b07      	ldr	r3, [pc, #28]	; (40343c <xTaskCheckForTimeOut+0x90>)
  40341e:	4798      	blx	r3
}
  403420:	4620      	mov	r0, r4
  403422:	bd38      	pop	{r3, r4, r5, pc}
				xReturn = pdFALSE;
  403424:	2400      	movs	r4, #0
  403426:	e7f9      	b.n	40341c <xTaskCheckForTimeOut+0x70>
			xReturn = pdTRUE;
  403428:	2401      	movs	r4, #1
  40342a:	e7f7      	b.n	40341c <xTaskCheckForTimeOut+0x70>
  40342c:	00401f09 	.word	0x00401f09
  403430:	2040c724 	.word	0x2040c724
  403434:	2040c6e0 	.word	0x2040c6e0
  403438:	0040337d 	.word	0x0040337d
  40343c:	00401f55 	.word	0x00401f55

00403440 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
  403440:	2201      	movs	r2, #1
  403442:	4b01      	ldr	r3, [pc, #4]	; (403448 <vTaskMissedYield+0x8>)
  403444:	601a      	str	r2, [r3, #0]
  403446:	4770      	bx	lr
  403448:	2040c728 	.word	0x2040c728

0040344c <xTaskGetSchedulerState>:

	BaseType_t xTaskGetSchedulerState( void )
	{
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
  40344c:	4b05      	ldr	r3, [pc, #20]	; (403464 <xTaskGetSchedulerState+0x18>)
  40344e:	681b      	ldr	r3, [r3, #0]
  403450:	b133      	cbz	r3, 403460 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
  403452:	4b05      	ldr	r3, [pc, #20]	; (403468 <xTaskGetSchedulerState+0x1c>)
  403454:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
  403456:	2b00      	cmp	r3, #0
  403458:	bf0c      	ite	eq
  40345a:	2002      	moveq	r0, #2
  40345c:	2000      	movne	r0, #0
  40345e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
  403460:	2001      	movs	r0, #1
			}
		}

		return xReturn;
	}
  403462:	4770      	bx	lr
  403464:	2040c6f8 	.word	0x2040c6f8
  403468:	2040c6a4 	.word	0x2040c6a4

0040346c <vTaskPriorityInherit>:
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
  40346c:	2800      	cmp	r0, #0
  40346e:	d044      	beq.n	4034fa <vTaskPriorityInherit+0x8e>
	{
  403470:	b538      	push	{r3, r4, r5, lr}
  403472:	4604      	mov	r4, r0
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
  403474:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  403476:	4921      	ldr	r1, [pc, #132]	; (4034fc <vTaskPriorityInherit+0x90>)
  403478:	6809      	ldr	r1, [r1, #0]
  40347a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40347c:	428a      	cmp	r2, r1
  40347e:	d214      	bcs.n	4034aa <vTaskPriorityInherit+0x3e>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
  403480:	6981      	ldr	r1, [r0, #24]
  403482:	2900      	cmp	r1, #0
  403484:	db05      	blt.n	403492 <vTaskPriorityInherit+0x26>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403486:	491d      	ldr	r1, [pc, #116]	; (4034fc <vTaskPriorityInherit+0x90>)
  403488:	6809      	ldr	r1, [r1, #0]
  40348a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  40348c:	f1c1 0105 	rsb	r1, r1, #5
  403490:	6181      	str	r1, [r0, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
  403492:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  403496:	491a      	ldr	r1, [pc, #104]	; (403500 <vTaskPriorityInherit+0x94>)
  403498:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  40349c:	6961      	ldr	r1, [r4, #20]
  40349e:	4291      	cmp	r1, r2
  4034a0:	d004      	beq.n	4034ac <vTaskPriorityInherit+0x40>
					prvAddTaskToReadyList( pxTCB );
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4034a2:	4a16      	ldr	r2, [pc, #88]	; (4034fc <vTaskPriorityInherit+0x90>)
  4034a4:	6812      	ldr	r2, [r2, #0]
  4034a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
  4034a8:	62e2      	str	r2, [r4, #44]	; 0x2c
  4034aa:	bd38      	pop	{r3, r4, r5, pc}
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  4034ac:	1d25      	adds	r5, r4, #4
  4034ae:	4628      	mov	r0, r5
  4034b0:	4b14      	ldr	r3, [pc, #80]	; (403504 <vTaskPriorityInherit+0x98>)
  4034b2:	4798      	blx	r3
  4034b4:	b970      	cbnz	r0, 4034d4 <vTaskPriorityInherit+0x68>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  4034b6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  4034b8:	eb03 0183 	add.w	r1, r3, r3, lsl #2
  4034bc:	4a10      	ldr	r2, [pc, #64]	; (403500 <vTaskPriorityInherit+0x94>)
  4034be:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
  4034c2:	b93a      	cbnz	r2, 4034d4 <vTaskPriorityInherit+0x68>
  4034c4:	4810      	ldr	r0, [pc, #64]	; (403508 <vTaskPriorityInherit+0x9c>)
  4034c6:	6802      	ldr	r2, [r0, #0]
  4034c8:	2101      	movs	r1, #1
  4034ca:	fa01 f303 	lsl.w	r3, r1, r3
  4034ce:	ea22 0303 	bic.w	r3, r2, r3
  4034d2:	6003      	str	r3, [r0, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
  4034d4:	4b09      	ldr	r3, [pc, #36]	; (4034fc <vTaskPriorityInherit+0x90>)
  4034d6:	681b      	ldr	r3, [r3, #0]
  4034d8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
  4034da:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
  4034dc:	4a0a      	ldr	r2, [pc, #40]	; (403508 <vTaskPriorityInherit+0x9c>)
  4034de:	6811      	ldr	r1, [r2, #0]
  4034e0:	2301      	movs	r3, #1
  4034e2:	4083      	lsls	r3, r0
  4034e4:	430b      	orrs	r3, r1
  4034e6:	6013      	str	r3, [r2, #0]
  4034e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4034ec:	4629      	mov	r1, r5
  4034ee:	4b04      	ldr	r3, [pc, #16]	; (403500 <vTaskPriorityInherit+0x94>)
  4034f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4034f4:	4b05      	ldr	r3, [pc, #20]	; (40350c <vTaskPriorityInherit+0xa0>)
  4034f6:	4798      	blx	r3
  4034f8:	bd38      	pop	{r3, r4, r5, pc}
  4034fa:	4770      	bx	lr
  4034fc:	2040c62c 	.word	0x2040c62c
  403500:	2040c638 	.word	0x2040c638
  403504:	00401e25 	.word	0x00401e25
  403508:	2040c6b0 	.word	0x2040c6b0
  40350c:	00401dd9 	.word	0x00401dd9

00403510 <xTaskPriorityDisinherit>:
	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
	BaseType_t xReturn = pdFALSE;

		if( pxMutexHolder != NULL )
  403510:	2800      	cmp	r0, #0
  403512:	d04d      	beq.n	4035b0 <xTaskPriorityDisinherit+0xa0>
	{
  403514:	b538      	push	{r3, r4, r5, lr}
  403516:	4604      	mov	r4, r0
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
  403518:	4a27      	ldr	r2, [pc, #156]	; (4035b8 <xTaskPriorityDisinherit+0xa8>)
  40351a:	6812      	ldr	r2, [r2, #0]
  40351c:	4290      	cmp	r0, r2
  40351e:	d00a      	beq.n	403536 <xTaskPriorityDisinherit+0x26>
  403520:	f04f 0380 	mov.w	r3, #128	; 0x80
  403524:	b672      	cpsid	i
  403526:	f383 8811 	msr	BASEPRI, r3
  40352a:	f3bf 8f6f 	isb	sy
  40352e:	f3bf 8f4f 	dsb	sy
  403532:	b662      	cpsie	i
  403534:	e7fe      	b.n	403534 <xTaskPriorityDisinherit+0x24>

			configASSERT( pxTCB->uxMutexesHeld );
  403536:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  403538:	b952      	cbnz	r2, 403550 <xTaskPriorityDisinherit+0x40>
  40353a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40353e:	b672      	cpsid	i
  403540:	f383 8811 	msr	BASEPRI, r3
  403544:	f3bf 8f6f 	isb	sy
  403548:	f3bf 8f4f 	dsb	sy
  40354c:	b662      	cpsie	i
  40354e:	e7fe      	b.n	40354e <xTaskPriorityDisinherit+0x3e>
			( pxTCB->uxMutexesHeld )--;
  403550:	3a01      	subs	r2, #1
  403552:	64c2      	str	r2, [r0, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
  403554:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  403556:	6ca1      	ldr	r1, [r4, #72]	; 0x48
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
  403558:	4288      	cmp	r0, r1
  40355a:	d02b      	beq.n	4035b4 <xTaskPriorityDisinherit+0xa4>
  40355c:	bb52      	cbnz	r2, 4035b4 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
  40355e:	1d25      	adds	r5, r4, #4
  403560:	4628      	mov	r0, r5
  403562:	4b16      	ldr	r3, [pc, #88]	; (4035bc <xTaskPriorityDisinherit+0xac>)
  403564:	4798      	blx	r3
  403566:	b968      	cbnz	r0, 403584 <xTaskPriorityDisinherit+0x74>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
  403568:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  40356a:	eb01 0281 	add.w	r2, r1, r1, lsl #2
  40356e:	4b14      	ldr	r3, [pc, #80]	; (4035c0 <xTaskPriorityDisinherit+0xb0>)
  403570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
  403574:	b933      	cbnz	r3, 403584 <xTaskPriorityDisinherit+0x74>
  403576:	4813      	ldr	r0, [pc, #76]	; (4035c4 <xTaskPriorityDisinherit+0xb4>)
  403578:	6803      	ldr	r3, [r0, #0]
  40357a:	2201      	movs	r2, #1
  40357c:	408a      	lsls	r2, r1
  40357e:	ea23 0302 	bic.w	r3, r3, r2
  403582:	6003      	str	r3, [r0, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
  403584:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  403586:	62e0      	str	r0, [r4, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
  403588:	f1c0 0305 	rsb	r3, r0, #5
  40358c:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
  40358e:	4a0d      	ldr	r2, [pc, #52]	; (4035c4 <xTaskPriorityDisinherit+0xb4>)
  403590:	6811      	ldr	r1, [r2, #0]
  403592:	2401      	movs	r4, #1
  403594:	fa04 f300 	lsl.w	r3, r4, r0
  403598:	430b      	orrs	r3, r1
  40359a:	6013      	str	r3, [r2, #0]
  40359c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
  4035a0:	4629      	mov	r1, r5
  4035a2:	4b07      	ldr	r3, [pc, #28]	; (4035c0 <xTaskPriorityDisinherit+0xb0>)
  4035a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
  4035a8:	4b07      	ldr	r3, [pc, #28]	; (4035c8 <xTaskPriorityDisinherit+0xb8>)
  4035aa:	4798      	blx	r3
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
  4035ac:	4620      	mov	r0, r4
  4035ae:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
  4035b0:	2000      	movs	r0, #0
  4035b2:	4770      	bx	lr
  4035b4:	2000      	movs	r0, #0
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
	}
  4035b6:	bd38      	pop	{r3, r4, r5, pc}
  4035b8:	2040c62c 	.word	0x2040c62c
  4035bc:	00401e25 	.word	0x00401e25
  4035c0:	2040c638 	.word	0x2040c638
  4035c4:	2040c6b0 	.word	0x2040c6b0
  4035c8:	00401dd9 	.word	0x00401dd9

004035cc <pvTaskIncrementMutexHeldCount>:

	void *pvTaskIncrementMutexHeldCount( void )
	{
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
  4035cc:	4b05      	ldr	r3, [pc, #20]	; (4035e4 <pvTaskIncrementMutexHeldCount+0x18>)
  4035ce:	681b      	ldr	r3, [r3, #0]
  4035d0:	b123      	cbz	r3, 4035dc <pvTaskIncrementMutexHeldCount+0x10>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
  4035d2:	4b04      	ldr	r3, [pc, #16]	; (4035e4 <pvTaskIncrementMutexHeldCount+0x18>)
  4035d4:	681a      	ldr	r2, [r3, #0]
  4035d6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
  4035d8:	3301      	adds	r3, #1
  4035da:	64d3      	str	r3, [r2, #76]	; 0x4c
		}

		return pxCurrentTCB;
  4035dc:	4b01      	ldr	r3, [pc, #4]	; (4035e4 <pvTaskIncrementMutexHeldCount+0x18>)
  4035de:	6818      	ldr	r0, [r3, #0]
	}
  4035e0:	4770      	bx	lr
  4035e2:	bf00      	nop
  4035e4:	2040c62c 	.word	0x2040c62c

004035e8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
  4035e8:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
  4035ea:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4035ec:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
  4035ee:	4291      	cmp	r1, r2
  4035f0:	d80c      	bhi.n	40360c <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( xTimeNow - xCommandTime ) >= pxTimer->xTimerPeriodInTicks )
  4035f2:	1ad2      	subs	r2, r2, r3
  4035f4:	6983      	ldr	r3, [r0, #24]
  4035f6:	429a      	cmp	r2, r3
  4035f8:	d301      	bcc.n	4035fe <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
  4035fa:	2001      	movs	r0, #1
  4035fc:	bd08      	pop	{r3, pc}
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
  4035fe:	1d01      	adds	r1, r0, #4
  403600:	4b09      	ldr	r3, [pc, #36]	; (403628 <prvInsertTimerInActiveList+0x40>)
  403602:	6818      	ldr	r0, [r3, #0]
  403604:	4b09      	ldr	r3, [pc, #36]	; (40362c <prvInsertTimerInActiveList+0x44>)
  403606:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403608:	2000      	movs	r0, #0
  40360a:	bd08      	pop	{r3, pc}
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
  40360c:	429a      	cmp	r2, r3
  40360e:	d203      	bcs.n	403618 <prvInsertTimerInActiveList+0x30>
  403610:	4299      	cmp	r1, r3
  403612:	d301      	bcc.n	403618 <prvInsertTimerInActiveList+0x30>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
  403614:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
  403616:	bd08      	pop	{r3, pc}
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403618:	1d01      	adds	r1, r0, #4
  40361a:	4b05      	ldr	r3, [pc, #20]	; (403630 <prvInsertTimerInActiveList+0x48>)
  40361c:	6818      	ldr	r0, [r3, #0]
  40361e:	4b03      	ldr	r3, [pc, #12]	; (40362c <prvInsertTimerInActiveList+0x44>)
  403620:	4798      	blx	r3
BaseType_t xProcessTimerNow = pdFALSE;
  403622:	2000      	movs	r0, #0
  403624:	bd08      	pop	{r3, pc}
  403626:	bf00      	nop
  403628:	2040c730 	.word	0x2040c730
  40362c:	00401df1 	.word	0x00401df1
  403630:	2040c72c 	.word	0x2040c72c

00403634 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
  403634:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
  403636:	4b15      	ldr	r3, [pc, #84]	; (40368c <prvCheckForValidListAndQueue+0x58>)
  403638:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
  40363a:	4b15      	ldr	r3, [pc, #84]	; (403690 <prvCheckForValidListAndQueue+0x5c>)
  40363c:	681b      	ldr	r3, [r3, #0]
  40363e:	b113      	cbz	r3, 403646 <prvCheckForValidListAndQueue+0x12>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
  403640:	4b14      	ldr	r3, [pc, #80]	; (403694 <prvCheckForValidListAndQueue+0x60>)
  403642:	4798      	blx	r3
  403644:	bd70      	pop	{r4, r5, r6, pc}
			vListInitialise( &xActiveTimerList1 );
  403646:	4d14      	ldr	r5, [pc, #80]	; (403698 <prvCheckForValidListAndQueue+0x64>)
  403648:	4628      	mov	r0, r5
  40364a:	4e14      	ldr	r6, [pc, #80]	; (40369c <prvCheckForValidListAndQueue+0x68>)
  40364c:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
  40364e:	4c14      	ldr	r4, [pc, #80]	; (4036a0 <prvCheckForValidListAndQueue+0x6c>)
  403650:	4620      	mov	r0, r4
  403652:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
  403654:	4b13      	ldr	r3, [pc, #76]	; (4036a4 <prvCheckForValidListAndQueue+0x70>)
  403656:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
  403658:	4b13      	ldr	r3, [pc, #76]	; (4036a8 <prvCheckForValidListAndQueue+0x74>)
  40365a:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
  40365c:	2200      	movs	r2, #0
  40365e:	2110      	movs	r1, #16
  403660:	2005      	movs	r0, #5
  403662:	4b12      	ldr	r3, [pc, #72]	; (4036ac <prvCheckForValidListAndQueue+0x78>)
  403664:	4798      	blx	r3
  403666:	4b0a      	ldr	r3, [pc, #40]	; (403690 <prvCheckForValidListAndQueue+0x5c>)
  403668:	6018      	str	r0, [r3, #0]
			configASSERT( xTimerQueue );
  40366a:	b118      	cbz	r0, 403674 <prvCheckForValidListAndQueue+0x40>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
  40366c:	4910      	ldr	r1, [pc, #64]	; (4036b0 <prvCheckForValidListAndQueue+0x7c>)
  40366e:	4b11      	ldr	r3, [pc, #68]	; (4036b4 <prvCheckForValidListAndQueue+0x80>)
  403670:	4798      	blx	r3
  403672:	e7e5      	b.n	403640 <prvCheckForValidListAndQueue+0xc>
  403674:	f04f 0380 	mov.w	r3, #128	; 0x80
  403678:	b672      	cpsid	i
  40367a:	f383 8811 	msr	BASEPRI, r3
  40367e:	f3bf 8f6f 	isb	sy
  403682:	f3bf 8f4f 	dsb	sy
  403686:	b662      	cpsie	i
  403688:	e7fe      	b.n	403688 <prvCheckForValidListAndQueue+0x54>
  40368a:	bf00      	nop
  40368c:	00401f09 	.word	0x00401f09
  403690:	2040c760 	.word	0x2040c760
  403694:	00401f55 	.word	0x00401f55
  403698:	2040c734 	.word	0x2040c734
  40369c:	00401dbd 	.word	0x00401dbd
  4036a0:	2040c748 	.word	0x2040c748
  4036a4:	2040c72c 	.word	0x2040c72c
  4036a8:	2040c730 	.word	0x2040c730
  4036ac:	00402461 	.word	0x00402461
  4036b0:	00407060 	.word	0x00407060
  4036b4:	00402991 	.word	0x00402991

004036b8 <xTimerCreateTimerTask>:
{
  4036b8:	b510      	push	{r4, lr}
  4036ba:	b084      	sub	sp, #16
	prvCheckForValidListAndQueue();
  4036bc:	4b0f      	ldr	r3, [pc, #60]	; (4036fc <xTimerCreateTimerTask+0x44>)
  4036be:	4798      	blx	r3
	if( xTimerQueue != NULL )
  4036c0:	4b0f      	ldr	r3, [pc, #60]	; (403700 <xTimerCreateTimerTask+0x48>)
  4036c2:	681b      	ldr	r3, [r3, #0]
  4036c4:	b173      	cbz	r3, 4036e4 <xTimerCreateTimerTask+0x2c>
			xReturn = xTaskCreate( prvTimerTask, "Tmr Svc", ( uint16_t ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
  4036c6:	2300      	movs	r3, #0
  4036c8:	9303      	str	r3, [sp, #12]
  4036ca:	9302      	str	r3, [sp, #8]
  4036cc:	9301      	str	r3, [sp, #4]
  4036ce:	2204      	movs	r2, #4
  4036d0:	9200      	str	r2, [sp, #0]
  4036d2:	f44f 7282 	mov.w	r2, #260	; 0x104
  4036d6:	490b      	ldr	r1, [pc, #44]	; (403704 <xTimerCreateTimerTask+0x4c>)
  4036d8:	480b      	ldr	r0, [pc, #44]	; (403708 <xTimerCreateTimerTask+0x50>)
  4036da:	4c0c      	ldr	r4, [pc, #48]	; (40370c <xTimerCreateTimerTask+0x54>)
  4036dc:	47a0      	blx	r4
	configASSERT( xReturn );
  4036de:	b108      	cbz	r0, 4036e4 <xTimerCreateTimerTask+0x2c>
}
  4036e0:	b004      	add	sp, #16
  4036e2:	bd10      	pop	{r4, pc}
  4036e4:	f04f 0380 	mov.w	r3, #128	; 0x80
  4036e8:	b672      	cpsid	i
  4036ea:	f383 8811 	msr	BASEPRI, r3
  4036ee:	f3bf 8f6f 	isb	sy
  4036f2:	f3bf 8f4f 	dsb	sy
  4036f6:	b662      	cpsie	i
  4036f8:	e7fe      	b.n	4036f8 <xTimerCreateTimerTask+0x40>
  4036fa:	bf00      	nop
  4036fc:	00403635 	.word	0x00403635
  403700:	2040c760 	.word	0x2040c760
  403704:	00407068 	.word	0x00407068
  403708:	00403839 	.word	0x00403839
  40370c:	00402aa1 	.word	0x00402aa1

00403710 <xTimerGenericCommand>:
	configASSERT( xTimer );
  403710:	b1d8      	cbz	r0, 40374a <xTimerGenericCommand+0x3a>
{
  403712:	b530      	push	{r4, r5, lr}
  403714:	b085      	sub	sp, #20
  403716:	4615      	mov	r5, r2
  403718:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
  40371a:	4a15      	ldr	r2, [pc, #84]	; (403770 <xTimerGenericCommand+0x60>)
  40371c:	6810      	ldr	r0, [r2, #0]
  40371e:	b320      	cbz	r0, 40376a <xTimerGenericCommand+0x5a>
  403720:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
  403722:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
  403724:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
  403726:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
  403728:	2905      	cmp	r1, #5
  40372a:	dc19      	bgt.n	403760 <xTimerGenericCommand+0x50>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
  40372c:	4b11      	ldr	r3, [pc, #68]	; (403774 <xTimerGenericCommand+0x64>)
  40372e:	4798      	blx	r3
  403730:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
  403732:	f04f 0300 	mov.w	r3, #0
  403736:	bf0c      	ite	eq
  403738:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
  40373a:	461a      	movne	r2, r3
  40373c:	4669      	mov	r1, sp
  40373e:	480c      	ldr	r0, [pc, #48]	; (403770 <xTimerGenericCommand+0x60>)
  403740:	6800      	ldr	r0, [r0, #0]
  403742:	4c0d      	ldr	r4, [pc, #52]	; (403778 <xTimerGenericCommand+0x68>)
  403744:	47a0      	blx	r4
}
  403746:	b005      	add	sp, #20
  403748:	bd30      	pop	{r4, r5, pc}
  40374a:	f04f 0380 	mov.w	r3, #128	; 0x80
  40374e:	b672      	cpsid	i
  403750:	f383 8811 	msr	BASEPRI, r3
  403754:	f3bf 8f6f 	isb	sy
  403758:	f3bf 8f4f 	dsb	sy
  40375c:	b662      	cpsie	i
  40375e:	e7fe      	b.n	40375e <xTimerGenericCommand+0x4e>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
  403760:	2300      	movs	r3, #0
  403762:	4669      	mov	r1, sp
  403764:	4c05      	ldr	r4, [pc, #20]	; (40377c <xTimerGenericCommand+0x6c>)
  403766:	47a0      	blx	r4
  403768:	e7ed      	b.n	403746 <xTimerGenericCommand+0x36>
BaseType_t xReturn = pdFAIL;
  40376a:	2000      	movs	r0, #0
	return xReturn;
  40376c:	e7eb      	b.n	403746 <xTimerGenericCommand+0x36>
  40376e:	bf00      	nop
  403770:	2040c760 	.word	0x2040c760
  403774:	0040344d 	.word	0x0040344d
  403778:	004024dd 	.word	0x004024dd
  40377c:	004026c1 	.word	0x004026c1

00403780 <prvSampleTimeNow>:
{
  403780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403784:	b082      	sub	sp, #8
  403786:	4680      	mov	r8, r0
	xTimeNow = xTaskGetTickCount();
  403788:	4b24      	ldr	r3, [pc, #144]	; (40381c <prvSampleTimeNow+0x9c>)
  40378a:	4798      	blx	r3
  40378c:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
  40378e:	4b24      	ldr	r3, [pc, #144]	; (403820 <prvSampleTimeNow+0xa0>)
  403790:	681b      	ldr	r3, [r3, #0]
  403792:	4298      	cmp	r0, r3
  403794:	d31b      	bcc.n	4037ce <prvSampleTimeNow+0x4e>
		*pxTimerListsWereSwitched = pdFALSE;
  403796:	2300      	movs	r3, #0
  403798:	f8c8 3000 	str.w	r3, [r8]
	xLastTime = xTimeNow;
  40379c:	4b20      	ldr	r3, [pc, #128]	; (403820 <prvSampleTimeNow+0xa0>)
  40379e:	601f      	str	r7, [r3, #0]
}
  4037a0:	4638      	mov	r0, r7
  4037a2:	b002      	add	sp, #8
  4037a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4037a8:	2100      	movs	r1, #0
  4037aa:	9100      	str	r1, [sp, #0]
  4037ac:	460b      	mov	r3, r1
  4037ae:	4652      	mov	r2, sl
  4037b0:	4620      	mov	r0, r4
  4037b2:	4c1c      	ldr	r4, [pc, #112]	; (403824 <prvSampleTimeNow+0xa4>)
  4037b4:	47a0      	blx	r4
				configASSERT( xResult );
  4037b6:	b960      	cbnz	r0, 4037d2 <prvSampleTimeNow+0x52>
  4037b8:	f04f 0380 	mov.w	r3, #128	; 0x80
  4037bc:	b672      	cpsid	i
  4037be:	f383 8811 	msr	BASEPRI, r3
  4037c2:	f3bf 8f6f 	isb	sy
  4037c6:	f3bf 8f4f 	dsb	sy
  4037ca:	b662      	cpsie	i
  4037cc:	e7fe      	b.n	4037cc <prvSampleTimeNow+0x4c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4037ce:	4d16      	ldr	r5, [pc, #88]	; (403828 <prvSampleTimeNow+0xa8>)
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4037d0:	4e16      	ldr	r6, [pc, #88]	; (40382c <prvSampleTimeNow+0xac>)
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
  4037d2:	682b      	ldr	r3, [r5, #0]
  4037d4:	681a      	ldr	r2, [r3, #0]
  4037d6:	b1c2      	cbz	r2, 40380a <prvSampleTimeNow+0x8a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  4037d8:	68db      	ldr	r3, [r3, #12]
  4037da:	f8d3 a000 	ldr.w	sl, [r3]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  4037de:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  4037e0:	f104 0904 	add.w	r9, r4, #4
  4037e4:	4648      	mov	r0, r9
  4037e6:	47b0      	blx	r6
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4037e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
  4037ea:	4620      	mov	r0, r4
  4037ec:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4037ee:	69e3      	ldr	r3, [r4, #28]
  4037f0:	2b01      	cmp	r3, #1
  4037f2:	d1ee      	bne.n	4037d2 <prvSampleTimeNow+0x52>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
  4037f4:	69a3      	ldr	r3, [r4, #24]
  4037f6:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
  4037f8:	459a      	cmp	sl, r3
  4037fa:	d2d5      	bcs.n	4037a8 <prvSampleTimeNow+0x28>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
  4037fc:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
  4037fe:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
  403800:	4649      	mov	r1, r9
  403802:	6828      	ldr	r0, [r5, #0]
  403804:	4b0a      	ldr	r3, [pc, #40]	; (403830 <prvSampleTimeNow+0xb0>)
  403806:	4798      	blx	r3
  403808:	e7e3      	b.n	4037d2 <prvSampleTimeNow+0x52>
	pxCurrentTimerList = pxOverflowTimerList;
  40380a:	4a0a      	ldr	r2, [pc, #40]	; (403834 <prvSampleTimeNow+0xb4>)
  40380c:	6810      	ldr	r0, [r2, #0]
  40380e:	4906      	ldr	r1, [pc, #24]	; (403828 <prvSampleTimeNow+0xa8>)
  403810:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
  403812:	6013      	str	r3, [r2, #0]
		*pxTimerListsWereSwitched = pdTRUE;
  403814:	2301      	movs	r3, #1
  403816:	f8c8 3000 	str.w	r3, [r8]
  40381a:	e7bf      	b.n	40379c <prvSampleTimeNow+0x1c>
  40381c:	00402d71 	.word	0x00402d71
  403820:	2040c75c 	.word	0x2040c75c
  403824:	00403711 	.word	0x00403711
  403828:	2040c72c 	.word	0x2040c72c
  40382c:	00401e25 	.word	0x00401e25
  403830:	00401df1 	.word	0x00401df1
  403834:	2040c730 	.word	0x2040c730

00403838 <prvTimerTask>:
{
  403838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  40383c:	b088      	sub	sp, #32
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40383e:	4e75      	ldr	r6, [pc, #468]	; (403a14 <prvTimerTask+0x1dc>)
	vTaskSuspendAll();
  403840:	4f75      	ldr	r7, [pc, #468]	; (403a18 <prvTimerTask+0x1e0>)
					portYIELD_WITHIN_API();
  403842:	f8df 91fc 	ldr.w	r9, [pc, #508]	; 403a40 <prvTimerTask+0x208>
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403846:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 403a44 <prvTimerTask+0x20c>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
  40384a:	6833      	ldr	r3, [r6, #0]
	if( *pxListWasEmpty == pdFALSE )
  40384c:	681a      	ldr	r2, [r3, #0]
  40384e:	2a00      	cmp	r2, #0
  403850:	f000 80ce 	beq.w	4039f0 <prvTimerTask+0x1b8>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
  403854:	68db      	ldr	r3, [r3, #12]
  403856:	681c      	ldr	r4, [r3, #0]
	vTaskSuspendAll();
  403858:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40385a:	a804      	add	r0, sp, #16
  40385c:	4b6f      	ldr	r3, [pc, #444]	; (403a1c <prvTimerTask+0x1e4>)
  40385e:	4798      	blx	r3
  403860:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  403862:	9b04      	ldr	r3, [sp, #16]
  403864:	2b00      	cmp	r3, #0
  403866:	d144      	bne.n	4038f2 <prvTimerTask+0xba>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
  403868:	42a0      	cmp	r0, r4
  40386a:	d212      	bcs.n	403892 <prvTimerTask+0x5a>
  40386c:	2200      	movs	r2, #0
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
  40386e:	1b61      	subs	r1, r4, r5
  403870:	4b6b      	ldr	r3, [pc, #428]	; (403a20 <prvTimerTask+0x1e8>)
  403872:	6818      	ldr	r0, [r3, #0]
  403874:	4b6b      	ldr	r3, [pc, #428]	; (403a24 <prvTimerTask+0x1ec>)
  403876:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
  403878:	4b6b      	ldr	r3, [pc, #428]	; (403a28 <prvTimerTask+0x1f0>)
  40387a:	4798      	blx	r3
  40387c:	2800      	cmp	r0, #0
  40387e:	d13a      	bne.n	4038f6 <prvTimerTask+0xbe>
					portYIELD_WITHIN_API();
  403880:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  403884:	f8c9 3000 	str.w	r3, [r9]
  403888:	f3bf 8f4f 	dsb	sy
  40388c:	f3bf 8f6f 	isb	sy
  403890:	e031      	b.n	4038f6 <prvTimerTask+0xbe>
				( void ) xTaskResumeAll();
  403892:	4b65      	ldr	r3, [pc, #404]	; (403a28 <prvTimerTask+0x1f0>)
  403894:	4798      	blx	r3
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
  403896:	6833      	ldr	r3, [r6, #0]
  403898:	68db      	ldr	r3, [r3, #12]
  40389a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  40389e:	f10a 0004 	add.w	r0, sl, #4
  4038a2:	47c0      	blx	r8
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  4038a4:	f8da 301c 	ldr.w	r3, [sl, #28]
  4038a8:	2b01      	cmp	r3, #1
  4038aa:	d004      	beq.n	4038b6 <prvTimerTask+0x7e>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  4038ac:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  4038b0:	4650      	mov	r0, sl
  4038b2:	4798      	blx	r3
  4038b4:	e01f      	b.n	4038f6 <prvTimerTask+0xbe>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
  4038b6:	f8da 1018 	ldr.w	r1, [sl, #24]
  4038ba:	4623      	mov	r3, r4
  4038bc:	462a      	mov	r2, r5
  4038be:	4421      	add	r1, r4
  4038c0:	4650      	mov	r0, sl
  4038c2:	4d5a      	ldr	r5, [pc, #360]	; (403a2c <prvTimerTask+0x1f4>)
  4038c4:	47a8      	blx	r5
  4038c6:	2801      	cmp	r0, #1
  4038c8:	d1f0      	bne.n	4038ac <prvTimerTask+0x74>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
  4038ca:	2100      	movs	r1, #0
  4038cc:	9100      	str	r1, [sp, #0]
  4038ce:	460b      	mov	r3, r1
  4038d0:	4622      	mov	r2, r4
  4038d2:	4650      	mov	r0, sl
  4038d4:	4c56      	ldr	r4, [pc, #344]	; (403a30 <prvTimerTask+0x1f8>)
  4038d6:	47a0      	blx	r4
			configASSERT( xResult );
  4038d8:	2800      	cmp	r0, #0
  4038da:	d1e7      	bne.n	4038ac <prvTimerTask+0x74>
  4038dc:	f04f 0380 	mov.w	r3, #128	; 0x80
  4038e0:	b672      	cpsid	i
  4038e2:	f383 8811 	msr	BASEPRI, r3
  4038e6:	f3bf 8f6f 	isb	sy
  4038ea:	f3bf 8f4f 	dsb	sy
  4038ee:	b662      	cpsie	i
  4038f0:	e7fe      	b.n	4038f0 <prvTimerTask+0xb8>
			( void ) xTaskResumeAll();
  4038f2:	4b4d      	ldr	r3, [pc, #308]	; (403a28 <prvTimerTask+0x1f0>)
  4038f4:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  4038f6:	4d4a      	ldr	r5, [pc, #296]	; (403a20 <prvTimerTask+0x1e8>)
  4038f8:	4c4e      	ldr	r4, [pc, #312]	; (403a34 <prvTimerTask+0x1fc>)
  4038fa:	e006      	b.n	40390a <prvTimerTask+0xd2>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
  4038fc:	9907      	ldr	r1, [sp, #28]
  4038fe:	9806      	ldr	r0, [sp, #24]
  403900:	9b05      	ldr	r3, [sp, #20]
  403902:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
  403904:	9b04      	ldr	r3, [sp, #16]
  403906:	2b00      	cmp	r3, #0
  403908:	da09      	bge.n	40391e <prvTimerTask+0xe6>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
  40390a:	2300      	movs	r3, #0
  40390c:	461a      	mov	r2, r3
  40390e:	a904      	add	r1, sp, #16
  403910:	6828      	ldr	r0, [r5, #0]
  403912:	47a0      	blx	r4
  403914:	2800      	cmp	r0, #0
  403916:	d098      	beq.n	40384a <prvTimerTask+0x12>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
  403918:	9b04      	ldr	r3, [sp, #16]
  40391a:	2b00      	cmp	r3, #0
  40391c:	dbee      	blt.n	4038fc <prvTimerTask+0xc4>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
  40391e:	f8dd a018 	ldr.w	sl, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
  403922:	f8da 3014 	ldr.w	r3, [sl, #20]
  403926:	b113      	cbz	r3, 40392e <prvTimerTask+0xf6>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
  403928:	f10a 0004 	add.w	r0, sl, #4
  40392c:	47c0      	blx	r8
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  40392e:	a803      	add	r0, sp, #12
  403930:	4b3a      	ldr	r3, [pc, #232]	; (403a1c <prvTimerTask+0x1e4>)
  403932:	4798      	blx	r3
			switch( xMessage.xMessageID )
  403934:	9b04      	ldr	r3, [sp, #16]
  403936:	2b09      	cmp	r3, #9
  403938:	d8e7      	bhi.n	40390a <prvTimerTask+0xd2>
  40393a:	a201      	add	r2, pc, #4	; (adr r2, 403940 <prvTimerTask+0x108>)
  40393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
  403940:	00403969 	.word	0x00403969
  403944:	00403969 	.word	0x00403969
  403948:	00403969 	.word	0x00403969
  40394c:	0040390b 	.word	0x0040390b
  403950:	004039bd 	.word	0x004039bd
  403954:	004039e9 	.word	0x004039e9
  403958:	00403969 	.word	0x00403969
  40395c:	00403969 	.word	0x00403969
  403960:	0040390b 	.word	0x0040390b
  403964:	004039bd 	.word	0x004039bd
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) == pdTRUE )
  403968:	9c05      	ldr	r4, [sp, #20]
  40396a:	f8da 1018 	ldr.w	r1, [sl, #24]
  40396e:	4623      	mov	r3, r4
  403970:	4602      	mov	r2, r0
  403972:	4421      	add	r1, r4
  403974:	4650      	mov	r0, sl
  403976:	4c2d      	ldr	r4, [pc, #180]	; (403a2c <prvTimerTask+0x1f4>)
  403978:	47a0      	blx	r4
  40397a:	2801      	cmp	r0, #1
  40397c:	d1bc      	bne.n	4038f8 <prvTimerTask+0xc0>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
  40397e:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
  403982:	4650      	mov	r0, sl
  403984:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
  403986:	f8da 301c 	ldr.w	r3, [sl, #28]
  40398a:	2b01      	cmp	r3, #1
  40398c:	d1b4      	bne.n	4038f8 <prvTimerTask+0xc0>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
  40398e:	f8da 2018 	ldr.w	r2, [sl, #24]
  403992:	2100      	movs	r1, #0
  403994:	9100      	str	r1, [sp, #0]
  403996:	460b      	mov	r3, r1
  403998:	9805      	ldr	r0, [sp, #20]
  40399a:	4402      	add	r2, r0
  40399c:	4650      	mov	r0, sl
  40399e:	4c24      	ldr	r4, [pc, #144]	; (403a30 <prvTimerTask+0x1f8>)
  4039a0:	47a0      	blx	r4
							configASSERT( xResult );
  4039a2:	2800      	cmp	r0, #0
  4039a4:	d1a8      	bne.n	4038f8 <prvTimerTask+0xc0>
  4039a6:	f04f 0380 	mov.w	r3, #128	; 0x80
  4039aa:	b672      	cpsid	i
  4039ac:	f383 8811 	msr	BASEPRI, r3
  4039b0:	f3bf 8f6f 	isb	sy
  4039b4:	f3bf 8f4f 	dsb	sy
  4039b8:	b662      	cpsie	i
  4039ba:	e7fe      	b.n	4039ba <prvTimerTask+0x182>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
  4039bc:	9905      	ldr	r1, [sp, #20]
  4039be:	f8ca 1018 	str.w	r1, [sl, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
  4039c2:	b131      	cbz	r1, 4039d2 <prvTimerTask+0x19a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
  4039c4:	4603      	mov	r3, r0
  4039c6:	4602      	mov	r2, r0
  4039c8:	4401      	add	r1, r0
  4039ca:	4650      	mov	r0, sl
  4039cc:	4c17      	ldr	r4, [pc, #92]	; (403a2c <prvTimerTask+0x1f4>)
  4039ce:	47a0      	blx	r4
  4039d0:	e792      	b.n	4038f8 <prvTimerTask+0xc0>
  4039d2:	f04f 0380 	mov.w	r3, #128	; 0x80
  4039d6:	b672      	cpsid	i
  4039d8:	f383 8811 	msr	BASEPRI, r3
  4039dc:	f3bf 8f6f 	isb	sy
  4039e0:	f3bf 8f4f 	dsb	sy
  4039e4:	b662      	cpsie	i
  4039e6:	e7fe      	b.n	4039e6 <prvTimerTask+0x1ae>
					vPortFree( pxTimer );
  4039e8:	4650      	mov	r0, sl
  4039ea:	4b13      	ldr	r3, [pc, #76]	; (403a38 <prvTimerTask+0x200>)
  4039ec:	4798      	blx	r3
  4039ee:	e783      	b.n	4038f8 <prvTimerTask+0xc0>
	vTaskSuspendAll();
  4039f0:	47b8      	blx	r7
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
  4039f2:	a804      	add	r0, sp, #16
  4039f4:	4b09      	ldr	r3, [pc, #36]	; (403a1c <prvTimerTask+0x1e4>)
  4039f6:	4798      	blx	r3
  4039f8:	4605      	mov	r5, r0
		if( xTimerListsWereSwitched == pdFALSE )
  4039fa:	9b04      	ldr	r3, [sp, #16]
  4039fc:	2b00      	cmp	r3, #0
  4039fe:	f47f af78 	bne.w	4038f2 <prvTimerTask+0xba>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
  403a02:	4b0e      	ldr	r3, [pc, #56]	; (403a3c <prvTimerTask+0x204>)
  403a04:	681b      	ldr	r3, [r3, #0]
  403a06:	681a      	ldr	r2, [r3, #0]
  403a08:	fab2 f282 	clz	r2, r2
  403a0c:	0952      	lsrs	r2, r2, #5
  403a0e:	2400      	movs	r4, #0
  403a10:	e72d      	b.n	40386e <prvTimerTask+0x36>
  403a12:	bf00      	nop
  403a14:	2040c72c 	.word	0x2040c72c
  403a18:	00402d61 	.word	0x00402d61
  403a1c:	00403781 	.word	0x00403781
  403a20:	2040c760 	.word	0x2040c760
  403a24:	004029c5 	.word	0x004029c5
  403a28:	00402ec9 	.word	0x00402ec9
  403a2c:	004035e9 	.word	0x004035e9
  403a30:	00403711 	.word	0x00403711
  403a34:	004027c1 	.word	0x004027c1
  403a38:	004021d5 	.word	0x004021d5
  403a3c:	2040c730 	.word	0x2040c730
  403a40:	e000ed04 	.word	0xe000ed04
  403a44:	00401e25 	.word	0x00401e25

00403a48 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
  403a48:	b5f0      	push	{r4, r5, r6, r7, lr}
  403a4a:	b083      	sub	sp, #12
  403a4c:	4605      	mov	r5, r0
  403a4e:	460c      	mov	r4, r1
	uint32_t val = 0;
  403a50:	2300      	movs	r3, #0
  403a52:	9301      	str	r3, [sp, #4]
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
	}
#else
# ifdef UART0
	if (UART0 == (Uart*)p_usart) {
  403a54:	4b2a      	ldr	r3, [pc, #168]	; (403b00 <usart_serial_getchar+0xb8>)
  403a56:	4298      	cmp	r0, r3
  403a58:	d013      	beq.n	403a82 <usart_serial_getchar+0x3a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART1
	if (UART1 == (Uart*)p_usart) {
  403a5a:	4b2a      	ldr	r3, [pc, #168]	; (403b04 <usart_serial_getchar+0xbc>)
  403a5c:	4298      	cmp	r0, r3
  403a5e:	d018      	beq.n	403a92 <usart_serial_getchar+0x4a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART2
	if (UART2 == (Uart*)p_usart) {
  403a60:	4b29      	ldr	r3, [pc, #164]	; (403b08 <usart_serial_getchar+0xc0>)
  403a62:	4298      	cmp	r0, r3
  403a64:	d01d      	beq.n	403aa2 <usart_serial_getchar+0x5a>
		while (uart_read((Uart*)p_usart, data));
	}
# endif
# ifdef UART3
	if (UART3 == (Uart*)p_usart) {
  403a66:	4b29      	ldr	r3, [pc, #164]	; (403b0c <usart_serial_getchar+0xc4>)
  403a68:	429d      	cmp	r5, r3
  403a6a:	d022      	beq.n	403ab2 <usart_serial_getchar+0x6a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
  403a6c:	4b28      	ldr	r3, [pc, #160]	; (403b10 <usart_serial_getchar+0xc8>)
  403a6e:	429d      	cmp	r5, r3
  403a70:	d027      	beq.n	403ac2 <usart_serial_getchar+0x7a>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
  403a72:	4b28      	ldr	r3, [pc, #160]	; (403b14 <usart_serial_getchar+0xcc>)
  403a74:	429d      	cmp	r5, r3
  403a76:	d02e      	beq.n	403ad6 <usart_serial_getchar+0x8e>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
  403a78:	4b27      	ldr	r3, [pc, #156]	; (403b18 <usart_serial_getchar+0xd0>)
  403a7a:	429d      	cmp	r5, r3
  403a7c:	d035      	beq.n	403aea <usart_serial_getchar+0xa2>
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
  403a7e:	b003      	add	sp, #12
  403a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
		while (uart_read((Uart*)p_usart, data));
  403a82:	461f      	mov	r7, r3
  403a84:	4e25      	ldr	r6, [pc, #148]	; (403b1c <usart_serial_getchar+0xd4>)
  403a86:	4621      	mov	r1, r4
  403a88:	4638      	mov	r0, r7
  403a8a:	47b0      	blx	r6
  403a8c:	2800      	cmp	r0, #0
  403a8e:	d1fa      	bne.n	403a86 <usart_serial_getchar+0x3e>
  403a90:	e7e9      	b.n	403a66 <usart_serial_getchar+0x1e>
		while (uart_read((Uart*)p_usart, data));
  403a92:	461f      	mov	r7, r3
  403a94:	4e21      	ldr	r6, [pc, #132]	; (403b1c <usart_serial_getchar+0xd4>)
  403a96:	4621      	mov	r1, r4
  403a98:	4638      	mov	r0, r7
  403a9a:	47b0      	blx	r6
  403a9c:	2800      	cmp	r0, #0
  403a9e:	d1fa      	bne.n	403a96 <usart_serial_getchar+0x4e>
  403aa0:	e7e4      	b.n	403a6c <usart_serial_getchar+0x24>
		while (uart_read((Uart*)p_usart, data));
  403aa2:	461f      	mov	r7, r3
  403aa4:	4e1d      	ldr	r6, [pc, #116]	; (403b1c <usart_serial_getchar+0xd4>)
  403aa6:	4621      	mov	r1, r4
  403aa8:	4638      	mov	r0, r7
  403aaa:	47b0      	blx	r6
  403aac:	2800      	cmp	r0, #0
  403aae:	d1fa      	bne.n	403aa6 <usart_serial_getchar+0x5e>
  403ab0:	e7df      	b.n	403a72 <usart_serial_getchar+0x2a>
		while (uart_read((Uart*)p_usart, data));
  403ab2:	461f      	mov	r7, r3
  403ab4:	4e19      	ldr	r6, [pc, #100]	; (403b1c <usart_serial_getchar+0xd4>)
  403ab6:	4621      	mov	r1, r4
  403ab8:	4638      	mov	r0, r7
  403aba:	47b0      	blx	r6
  403abc:	2800      	cmp	r0, #0
  403abe:	d1fa      	bne.n	403ab6 <usart_serial_getchar+0x6e>
  403ac0:	e7da      	b.n	403a78 <usart_serial_getchar+0x30>
		while (usart_read(p_usart, &val));
  403ac2:	461e      	mov	r6, r3
  403ac4:	4d16      	ldr	r5, [pc, #88]	; (403b20 <usart_serial_getchar+0xd8>)
  403ac6:	a901      	add	r1, sp, #4
  403ac8:	4630      	mov	r0, r6
  403aca:	47a8      	blx	r5
  403acc:	2800      	cmp	r0, #0
  403ace:	d1fa      	bne.n	403ac6 <usart_serial_getchar+0x7e>
		*data = (uint8_t)(val & 0xFF);
  403ad0:	9b01      	ldr	r3, [sp, #4]
  403ad2:	7023      	strb	r3, [r4, #0]
  403ad4:	e7d3      	b.n	403a7e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403ad6:	461e      	mov	r6, r3
  403ad8:	4d11      	ldr	r5, [pc, #68]	; (403b20 <usart_serial_getchar+0xd8>)
  403ada:	a901      	add	r1, sp, #4
  403adc:	4630      	mov	r0, r6
  403ade:	47a8      	blx	r5
  403ae0:	2800      	cmp	r0, #0
  403ae2:	d1fa      	bne.n	403ada <usart_serial_getchar+0x92>
		*data = (uint8_t)(val & 0xFF);
  403ae4:	9b01      	ldr	r3, [sp, #4]
  403ae6:	7023      	strb	r3, [r4, #0]
  403ae8:	e7c9      	b.n	403a7e <usart_serial_getchar+0x36>
		while (usart_read(p_usart, &val));
  403aea:	461e      	mov	r6, r3
  403aec:	4d0c      	ldr	r5, [pc, #48]	; (403b20 <usart_serial_getchar+0xd8>)
  403aee:	a901      	add	r1, sp, #4
  403af0:	4630      	mov	r0, r6
  403af2:	47a8      	blx	r5
  403af4:	2800      	cmp	r0, #0
  403af6:	d1fa      	bne.n	403aee <usart_serial_getchar+0xa6>
		*data = (uint8_t)(val & 0xFF);
  403af8:	9b01      	ldr	r3, [sp, #4]
  403afa:	7023      	strb	r3, [r4, #0]
}
  403afc:	e7bf      	b.n	403a7e <usart_serial_getchar+0x36>
  403afe:	bf00      	nop
  403b00:	400e0800 	.word	0x400e0800
  403b04:	400e0a00 	.word	0x400e0a00
  403b08:	400e1a00 	.word	0x400e1a00
  403b0c:	400e1c00 	.word	0x400e1c00
  403b10:	40024000 	.word	0x40024000
  403b14:	40028000 	.word	0x40028000
  403b18:	4002c000 	.word	0x4002c000
  403b1c:	004019e7 	.word	0x004019e7
  403b20:	00401af3 	.word	0x00401af3

00403b24 <usart_serial_putchar>:
{
  403b24:	b570      	push	{r4, r5, r6, lr}
  403b26:	460c      	mov	r4, r1
	if (UART0 == (Uart*)p_usart) {
  403b28:	4b2a      	ldr	r3, [pc, #168]	; (403bd4 <usart_serial_putchar+0xb0>)
  403b2a:	4298      	cmp	r0, r3
  403b2c:	d013      	beq.n	403b56 <usart_serial_putchar+0x32>
	if (UART1 == (Uart*)p_usart) {
  403b2e:	4b2a      	ldr	r3, [pc, #168]	; (403bd8 <usart_serial_putchar+0xb4>)
  403b30:	4298      	cmp	r0, r3
  403b32:	d019      	beq.n	403b68 <usart_serial_putchar+0x44>
	if (UART2 == (Uart*)p_usart) {
  403b34:	4b29      	ldr	r3, [pc, #164]	; (403bdc <usart_serial_putchar+0xb8>)
  403b36:	4298      	cmp	r0, r3
  403b38:	d01f      	beq.n	403b7a <usart_serial_putchar+0x56>
	if (UART3 == (Uart*)p_usart) {
  403b3a:	4b29      	ldr	r3, [pc, #164]	; (403be0 <usart_serial_putchar+0xbc>)
  403b3c:	4298      	cmp	r0, r3
  403b3e:	d025      	beq.n	403b8c <usart_serial_putchar+0x68>
	if (USART0 == p_usart) {
  403b40:	4b28      	ldr	r3, [pc, #160]	; (403be4 <usart_serial_putchar+0xc0>)
  403b42:	4298      	cmp	r0, r3
  403b44:	d02b      	beq.n	403b9e <usart_serial_putchar+0x7a>
	if (USART1 == p_usart) {
  403b46:	4b28      	ldr	r3, [pc, #160]	; (403be8 <usart_serial_putchar+0xc4>)
  403b48:	4298      	cmp	r0, r3
  403b4a:	d031      	beq.n	403bb0 <usart_serial_putchar+0x8c>
	if (USART2 == p_usart) {
  403b4c:	4b27      	ldr	r3, [pc, #156]	; (403bec <usart_serial_putchar+0xc8>)
  403b4e:	4298      	cmp	r0, r3
  403b50:	d037      	beq.n	403bc2 <usart_serial_putchar+0x9e>
	return 0;
  403b52:	2000      	movs	r0, #0
}
  403b54:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403b56:	461e      	mov	r6, r3
  403b58:	4d25      	ldr	r5, [pc, #148]	; (403bf0 <usart_serial_putchar+0xcc>)
  403b5a:	4621      	mov	r1, r4
  403b5c:	4630      	mov	r0, r6
  403b5e:	47a8      	blx	r5
  403b60:	2800      	cmp	r0, #0
  403b62:	d1fa      	bne.n	403b5a <usart_serial_putchar+0x36>
		return 1;
  403b64:	2001      	movs	r0, #1
  403b66:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403b68:	461e      	mov	r6, r3
  403b6a:	4d21      	ldr	r5, [pc, #132]	; (403bf0 <usart_serial_putchar+0xcc>)
  403b6c:	4621      	mov	r1, r4
  403b6e:	4630      	mov	r0, r6
  403b70:	47a8      	blx	r5
  403b72:	2800      	cmp	r0, #0
  403b74:	d1fa      	bne.n	403b6c <usart_serial_putchar+0x48>
		return 1;
  403b76:	2001      	movs	r0, #1
  403b78:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403b7a:	461e      	mov	r6, r3
  403b7c:	4d1c      	ldr	r5, [pc, #112]	; (403bf0 <usart_serial_putchar+0xcc>)
  403b7e:	4621      	mov	r1, r4
  403b80:	4630      	mov	r0, r6
  403b82:	47a8      	blx	r5
  403b84:	2800      	cmp	r0, #0
  403b86:	d1fa      	bne.n	403b7e <usart_serial_putchar+0x5a>
		return 1;
  403b88:	2001      	movs	r0, #1
  403b8a:	bd70      	pop	{r4, r5, r6, pc}
		while (uart_write((Uart*)p_usart, c)!=0);
  403b8c:	461e      	mov	r6, r3
  403b8e:	4d18      	ldr	r5, [pc, #96]	; (403bf0 <usart_serial_putchar+0xcc>)
  403b90:	4621      	mov	r1, r4
  403b92:	4630      	mov	r0, r6
  403b94:	47a8      	blx	r5
  403b96:	2800      	cmp	r0, #0
  403b98:	d1fa      	bne.n	403b90 <usart_serial_putchar+0x6c>
		return 1;
  403b9a:	2001      	movs	r0, #1
  403b9c:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403b9e:	461e      	mov	r6, r3
  403ba0:	4d14      	ldr	r5, [pc, #80]	; (403bf4 <usart_serial_putchar+0xd0>)
  403ba2:	4621      	mov	r1, r4
  403ba4:	4630      	mov	r0, r6
  403ba6:	47a8      	blx	r5
  403ba8:	2800      	cmp	r0, #0
  403baa:	d1fa      	bne.n	403ba2 <usart_serial_putchar+0x7e>
		return 1;
  403bac:	2001      	movs	r0, #1
  403bae:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403bb0:	461e      	mov	r6, r3
  403bb2:	4d10      	ldr	r5, [pc, #64]	; (403bf4 <usart_serial_putchar+0xd0>)
  403bb4:	4621      	mov	r1, r4
  403bb6:	4630      	mov	r0, r6
  403bb8:	47a8      	blx	r5
  403bba:	2800      	cmp	r0, #0
  403bbc:	d1fa      	bne.n	403bb4 <usart_serial_putchar+0x90>
		return 1;
  403bbe:	2001      	movs	r0, #1
  403bc0:	bd70      	pop	{r4, r5, r6, pc}
		while (usart_write(p_usart, c)!=0);
  403bc2:	461e      	mov	r6, r3
  403bc4:	4d0b      	ldr	r5, [pc, #44]	; (403bf4 <usart_serial_putchar+0xd0>)
  403bc6:	4621      	mov	r1, r4
  403bc8:	4630      	mov	r0, r6
  403bca:	47a8      	blx	r5
  403bcc:	2800      	cmp	r0, #0
  403bce:	d1fa      	bne.n	403bc6 <usart_serial_putchar+0xa2>
		return 1;
  403bd0:	2001      	movs	r0, #1
  403bd2:	bd70      	pop	{r4, r5, r6, pc}
  403bd4:	400e0800 	.word	0x400e0800
  403bd8:	400e0a00 	.word	0x400e0a00
  403bdc:	400e1a00 	.word	0x400e1a00
  403be0:	400e1c00 	.word	0x400e1c00
  403be4:	40024000 	.word	0x40024000
  403be8:	40028000 	.word	0x40028000
  403bec:	4002c000 	.word	0x4002c000
  403bf0:	004019d5 	.word	0x004019d5
  403bf4:	00401add 	.word	0x00401add

00403bf8 <vApplicationStackOverflowHook>:
/**
 * \brief Called if stack overflow during execution
 */
extern void vApplicationStackOverflowHook(xTaskHandle *pxTask,
		signed char *pcTaskName)
{
  403bf8:	b508      	push	{r3, lr}
	printf("stack overflow %x %s\r\n", pxTask, (portCHAR *)pcTaskName);
  403bfa:	460a      	mov	r2, r1
  403bfc:	4601      	mov	r1, r0
  403bfe:	4802      	ldr	r0, [pc, #8]	; (403c08 <vApplicationStackOverflowHook+0x10>)
  403c00:	4b02      	ldr	r3, [pc, #8]	; (403c0c <vApplicationStackOverflowHook+0x14>)
  403c02:	4798      	blx	r3
  403c04:	e7fe      	b.n	403c04 <vApplicationStackOverflowHook+0xc>
  403c06:	bf00      	nop
  403c08:	00412304 	.word	0x00412304
  403c0c:	00404131 	.word	0x00404131

00403c10 <vApplicationTickHook>:

/**
 * \brief This function is called by FreeRTOS each tick
 */
extern void vApplicationTickHook(void)
{
  403c10:	4770      	bx	lr

00403c12 <vApplicationMallocFailedHook>:
  403c12:	f04f 0380 	mov.w	r3, #128	; 0x80
  403c16:	b672      	cpsid	i
  403c18:	f383 8811 	msr	BASEPRI, r3
  403c1c:	f3bf 8f6f 	isb	sy
  403c20:	f3bf 8f4f 	dsb	sy
  403c24:	b662      	cpsie	i
  403c26:	e7fe      	b.n	403c26 <vApplicationMallocFailedHook+0x14>

00403c28 <draw_screen>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

void draw_screen(void) {
  403c28:	b510      	push	{r4, lr}
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_WHITE));
  403c2a:	4806      	ldr	r0, [pc, #24]	; (403c44 <draw_screen+0x1c>)
  403c2c:	4b06      	ldr	r3, [pc, #24]	; (403c48 <draw_screen+0x20>)
  403c2e:	4798      	blx	r3
	ili9488_draw_filled_rectangle(0, 0, ILI9488_LCD_WIDTH-1, ILI9488_LCD_HEIGHT-1);
  403c30:	f240 13df 	movw	r3, #479	; 0x1df
  403c34:	f240 123f 	movw	r2, #319	; 0x13f
  403c38:	2100      	movs	r1, #0
  403c3a:	4608      	mov	r0, r1
  403c3c:	4c03      	ldr	r4, [pc, #12]	; (403c4c <draw_screen+0x24>)
  403c3e:	47a0      	blx	r4
  403c40:	bd10      	pop	{r4, pc}
  403c42:	bf00      	nop
  403c44:	00fcfcfc 	.word	0x00fcfcfc
  403c48:	00400dbd 	.word	0x00400dbd
  403c4c:	0040100d 	.word	0x0040100d

00403c50 <draw_lines>:
}

void draw_lines(void){
  403c50:	b510      	push	{r4, lr}
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  403c52:	2000      	movs	r0, #0
  403c54:	4b04      	ldr	r3, [pc, #16]	; (403c68 <draw_lines+0x18>)
  403c56:	4798      	blx	r3
	ili9488_draw_filled_rectangle(0,160,320,165);
  403c58:	23a5      	movs	r3, #165	; 0xa5
  403c5a:	f44f 72a0 	mov.w	r2, #320	; 0x140
  403c5e:	21a0      	movs	r1, #160	; 0xa0
  403c60:	2000      	movs	r0, #0
  403c62:	4c02      	ldr	r4, [pc, #8]	; (403c6c <draw_lines+0x1c>)
  403c64:	47a0      	blx	r4
  403c66:	bd10      	pop	{r4, pc}
  403c68:	00400dbd 	.word	0x00400dbd
  403c6c:	0040100d 	.word	0x0040100d

00403c70 <draw_icons>:
}

void draw_icons(void) {
  403c70:	b510      	push	{r4, lr}
  403c72:	b082      	sub	sp, #8
	ili9488_draw_pixmap(210,380,ar.width, ar.height, ar.data);
  403c74:	4b0c      	ldr	r3, [pc, #48]	; (403ca8 <draw_icons+0x38>)
  403c76:	9300      	str	r3, [sp, #0]
  403c78:	2346      	movs	r3, #70	; 0x46
  403c7a:	2258      	movs	r2, #88	; 0x58
  403c7c:	f44f 71be 	mov.w	r1, #380	; 0x17c
  403c80:	20d2      	movs	r0, #210	; 0xd2
  403c82:	4c0a      	ldr	r4, [pc, #40]	; (403cac <draw_icons+0x3c>)
  403c84:	47a0      	blx	r4
	ili9488_draw_pixmap(20,380,termometro.width, termometro.height, termometro.data);
  403c86:	4b0a      	ldr	r3, [pc, #40]	; (403cb0 <draw_icons+0x40>)
  403c88:	9300      	str	r3, [sp, #0]
  403c8a:	234f      	movs	r3, #79	; 0x4f
  403c8c:	2236      	movs	r2, #54	; 0x36
  403c8e:	f44f 71be 	mov.w	r1, #380	; 0x17c
  403c92:	2014      	movs	r0, #20
  403c94:	47a0      	blx	r4
	ili9488_draw_pixmap(210,20,soneca.width, soneca.height, soneca.data);
  403c96:	4b07      	ldr	r3, [pc, #28]	; (403cb4 <draw_icons+0x44>)
  403c98:	9300      	str	r3, [sp, #0]
  403c9a:	2345      	movs	r3, #69	; 0x45
  403c9c:	461a      	mov	r2, r3
  403c9e:	2114      	movs	r1, #20
  403ca0:	20d2      	movs	r0, #210	; 0xd2
  403ca2:	47a0      	blx	r4
	
}
  403ca4:	b002      	add	sp, #8
  403ca6:	bd10      	pop	{r4, pc}
  403ca8:	004070d0 	.word	0x004070d0
  403cac:	004010c9 	.word	0x004010c9
  403cb0:	0040f0cc 	.word	0x0040f0cc
  403cb4:	0040b900 	.word	0x0040b900

00403cb8 <draw_button>:

void draw_button(uint32_t clicked) {
  403cb8:	b538      	push	{r3, r4, r5, lr}
	static uint32_t last_state = 255; // undefined
	if(clicked == last_state) return;
  403cba:	4b13      	ldr	r3, [pc, #76]	; (403d08 <draw_button+0x50>)
  403cbc:	681b      	ldr	r3, [r3, #0]
  403cbe:	4283      	cmp	r3, r0
  403cc0:	d016      	beq.n	403cf0 <draw_button+0x38>
  403cc2:	4604      	mov	r4, r0
	
	ili9488_set_foreground_color(COLOR_CONVERT(COLOR_BLACK));
  403cc4:	2000      	movs	r0, #0
  403cc6:	4b11      	ldr	r3, [pc, #68]	; (403d0c <draw_button+0x54>)
  403cc8:	4798      	blx	r3
	ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2, BUTTON_Y-BUTTON_H/2, BUTTON_X+BUTTON_W/2, BUTTON_Y+BUTTON_H/2);
  403cca:	f240 133b 	movw	r3, #315	; 0x13b
  403cce:	22dc      	movs	r2, #220	; 0xdc
  403cd0:	21a5      	movs	r1, #165	; 0xa5
  403cd2:	2064      	movs	r0, #100	; 0x64
  403cd4:	4d0e      	ldr	r5, [pc, #56]	; (403d10 <draw_button+0x58>)
  403cd6:	47a8      	blx	r5
	if(clicked) {
  403cd8:	b15c      	cbz	r4, 403cf2 <draw_button+0x3a>
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_TOMATO));
  403cda:	480e      	ldr	r0, [pc, #56]	; (403d14 <draw_button+0x5c>)
  403cdc:	4b0b      	ldr	r3, [pc, #44]	; (403d0c <draw_button+0x54>)
  403cde:	4798      	blx	r3
		ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y+BUTTON_H/2-BUTTON_BORDER);
  403ce0:	f240 1339 	movw	r3, #313	; 0x139
  403ce4:	22da      	movs	r2, #218	; 0xda
  403ce6:	21f2      	movs	r1, #242	; 0xf2
  403ce8:	2066      	movs	r0, #102	; 0x66
  403cea:	47a8      	blx	r5
	} else {
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
		ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
	}
	last_state = clicked;
  403cec:	4b06      	ldr	r3, [pc, #24]	; (403d08 <draw_button+0x50>)
  403cee:	601c      	str	r4, [r3, #0]
  403cf0:	bd38      	pop	{r3, r4, r5, pc}
		ili9488_set_foreground_color(COLOR_CONVERT(COLOR_GREEN));
  403cf2:	f44f 407c 	mov.w	r0, #64512	; 0xfc00
  403cf6:	4b05      	ldr	r3, [pc, #20]	; (403d0c <draw_button+0x54>)
  403cf8:	4798      	blx	r3
		ili9488_draw_filled_rectangle(BUTTON_X-BUTTON_W/2+BUTTON_BORDER, BUTTON_Y-BUTTON_H/2+BUTTON_BORDER, BUTTON_X+BUTTON_W/2-BUTTON_BORDER, BUTTON_Y-BUTTON_BORDER);
  403cfa:	23ee      	movs	r3, #238	; 0xee
  403cfc:	22da      	movs	r2, #218	; 0xda
  403cfe:	21a7      	movs	r1, #167	; 0xa7
  403d00:	2066      	movs	r0, #102	; 0x66
  403d02:	4d03      	ldr	r5, [pc, #12]	; (403d10 <draw_button+0x58>)
  403d04:	47a8      	blx	r5
  403d06:	e7f1      	b.n	403cec <draw_button+0x34>
  403d08:	20400014 	.word	0x20400014
  403d0c:	00400dbd 	.word	0x00400dbd
  403d10:	0040100d 	.word	0x0040100d
  403d14:	00fc6044 	.word	0x00fc6044

00403d18 <update_screen>:
	// saida: 0 - 320
	return ILI9488_LCD_HEIGHT*touch_x/4096;
}

void update_screen(uint32_t tx, uint32_t ty) {
	if(tx >= BUTTON_X-BUTTON_W/2 && tx <= BUTTON_X + BUTTON_W/2) {
  403d18:	3864      	subs	r0, #100	; 0x64
  403d1a:	2878      	cmp	r0, #120	; 0x78
  403d1c:	d810      	bhi.n	403d40 <update_screen+0x28>
void update_screen(uint32_t tx, uint32_t ty) {
  403d1e:	b508      	push	{r3, lr}
		if(ty >= BUTTON_Y-BUTTON_H/2 && ty <= BUTTON_Y) {
  403d20:	f1a1 03a5 	sub.w	r3, r1, #165	; 0xa5
  403d24:	2b4b      	cmp	r3, #75	; 0x4b
  403d26:	d903      	bls.n	403d30 <update_screen+0x18>
			draw_button(1);
		} else if(ty > BUTTON_Y && ty < BUTTON_Y + BUTTON_H/2) {
  403d28:	39f1      	subs	r1, #241	; 0xf1
  403d2a:	2949      	cmp	r1, #73	; 0x49
  403d2c:	d904      	bls.n	403d38 <update_screen+0x20>
  403d2e:	bd08      	pop	{r3, pc}
			draw_button(1);
  403d30:	2001      	movs	r0, #1
  403d32:	4b04      	ldr	r3, [pc, #16]	; (403d44 <update_screen+0x2c>)
  403d34:	4798      	blx	r3
  403d36:	bd08      	pop	{r3, pc}
			draw_button(0);
  403d38:	2000      	movs	r0, #0
  403d3a:	4b02      	ldr	r3, [pc, #8]	; (403d44 <update_screen+0x2c>)
  403d3c:	4798      	blx	r3
		}
	}
}
  403d3e:	e7f6      	b.n	403d2e <update_screen+0x16>
  403d40:	4770      	bx	lr
  403d42:	bf00      	nop
  403d44:	00403cb9 	.word	0x00403cb9

00403d48 <task_lcd>:
      }
     vTaskDelay(100);
	}
}

void task_lcd(void){
  403d48:	b500      	push	{lr}
  403d4a:	b083      	sub	sp, #12
  xQueueTouch = xQueueCreate( 10, sizeof( touchData ) );
  403d4c:	2200      	movs	r2, #0
  403d4e:	2108      	movs	r1, #8
  403d50:	200a      	movs	r0, #10
  403d52:	4b15      	ldr	r3, [pc, #84]	; (403da8 <task_lcd+0x60>)
  403d54:	4798      	blx	r3
  403d56:	4b15      	ldr	r3, [pc, #84]	; (403dac <task_lcd+0x64>)
  403d58:	6018      	str	r0, [r3, #0]
	g_ili9488_display_opt.ul_width = ILI9488_LCD_WIDTH;
  403d5a:	4815      	ldr	r0, [pc, #84]	; (403db0 <task_lcd+0x68>)
  403d5c:	f44f 73a0 	mov.w	r3, #320	; 0x140
  403d60:	6003      	str	r3, [r0, #0]
	g_ili9488_display_opt.ul_height = ILI9488_LCD_HEIGHT;
  403d62:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  403d66:	6043      	str	r3, [r0, #4]
	g_ili9488_display_opt.foreground_color = COLOR_CONVERT(COLOR_WHITE);
  403d68:	4b12      	ldr	r3, [pc, #72]	; (403db4 <task_lcd+0x6c>)
  403d6a:	6083      	str	r3, [r0, #8]
	g_ili9488_display_opt.background_color = COLOR_CONVERT(COLOR_WHITE);
  403d6c:	60c3      	str	r3, [r0, #12]
	ili9488_init(&g_ili9488_display_opt);
  403d6e:	4b12      	ldr	r3, [pc, #72]	; (403db8 <task_lcd+0x70>)
  403d70:	4798      	blx	r3
	configure_lcd();
  
  draw_screen();
  403d72:	4b12      	ldr	r3, [pc, #72]	; (403dbc <task_lcd+0x74>)
  403d74:	4798      	blx	r3
  draw_lines();
  403d76:	4b12      	ldr	r3, [pc, #72]	; (403dc0 <task_lcd+0x78>)
  403d78:	4798      	blx	r3
  draw_icons();
  403d7a:	4b12      	ldr	r3, [pc, #72]	; (403dc4 <task_lcd+0x7c>)
  403d7c:	4798      	blx	r3
  touchData touch;
    
  while (true) {  
     if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  403d7e:	4d0b      	ldr	r5, [pc, #44]	; (403dac <task_lcd+0x64>)
  403d80:	4c11      	ldr	r4, [pc, #68]	; (403dc8 <task_lcd+0x80>)
       update_screen(touch.x, touch.y);
  403d82:	4e12      	ldr	r6, [pc, #72]	; (403dcc <task_lcd+0x84>)
     if (xQueueReceive( xQueueTouch, &(touch), ( TickType_t )  500 / portTICK_PERIOD_MS)) {
  403d84:	2300      	movs	r3, #0
  403d86:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  403d8a:	4669      	mov	r1, sp
  403d8c:	6828      	ldr	r0, [r5, #0]
  403d8e:	47a0      	blx	r4
  403d90:	2800      	cmp	r0, #0
  403d92:	d0f7      	beq.n	403d84 <task_lcd+0x3c>
       update_screen(touch.x, touch.y);
  403d94:	9901      	ldr	r1, [sp, #4]
  403d96:	9800      	ldr	r0, [sp, #0]
  403d98:	47b0      	blx	r6
       printf("x:%d y:%d\n", touch.x, touch.y);
  403d9a:	9a01      	ldr	r2, [sp, #4]
  403d9c:	9900      	ldr	r1, [sp, #0]
  403d9e:	480c      	ldr	r0, [pc, #48]	; (403dd0 <task_lcd+0x88>)
  403da0:	4b0c      	ldr	r3, [pc, #48]	; (403dd4 <task_lcd+0x8c>)
  403da2:	4798      	blx	r3
  403da4:	e7ee      	b.n	403d84 <task_lcd+0x3c>
  403da6:	bf00      	nop
  403da8:	00402461 	.word	0x00402461
  403dac:	2040c7f4 	.word	0x2040c7f4
  403db0:	2040c7e4 	.word	0x2040c7e4
  403db4:	00fcfcfc 	.word	0x00fcfcfc
  403db8:	00400e49 	.word	0x00400e49
  403dbc:	00403c29 	.word	0x00403c29
  403dc0:	00403c51 	.word	0x00403c51
  403dc4:	00403c71 	.word	0x00403c71
  403dc8:	004027c1 	.word	0x004027c1
  403dcc:	00403d19 	.word	0x00403d19
  403dd0:	004122f8 	.word	0x004122f8
  403dd4:	00404131 	.word	0x00404131

00403dd8 <mxt_handler>:
{
  403dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  403ddc:	b084      	sub	sp, #16
  403dde:	4605      	mov	r5, r0
  403de0:	4689      	mov	r9, r1
  403de2:	4690      	mov	r8, r2
  uint first = 0;
  403de4:	f04f 0a00 	mov.w	sl, #0
	uint8_t i = 0; /* Iterator */
  403de8:	4654      	mov	r4, sl
		if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  403dea:	4f15      	ldr	r7, [pc, #84]	; (403e40 <mxt_handler+0x68>)
	} while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  403dec:	4e15      	ldr	r6, [pc, #84]	; (403e44 <mxt_handler+0x6c>)
  403dee:	e008      	b.n	403e02 <mxt_handler+0x2a>
		i++;
  403df0:	3401      	adds	r4, #1
  403df2:	b2e4      	uxtb	r4, r4
  403df4:	f04f 0a01 	mov.w	sl, #1
	} while ((mxt_is_message_pending(device)) & (i < MAX_ENTRIES));
  403df8:	4628      	mov	r0, r5
  403dfa:	47b0      	blx	r6
  403dfc:	2c02      	cmp	r4, #2
  403dfe:	d81b      	bhi.n	403e38 <mxt_handler+0x60>
  403e00:	b1d0      	cbz	r0, 403e38 <mxt_handler+0x60>
		if (mxt_read_touch_event(device, &touch_event) != STATUS_OK) {
  403e02:	a901      	add	r1, sp, #4
  403e04:	4628      	mov	r0, r5
  403e06:	47b8      	blx	r7
  403e08:	2800      	cmp	r0, #0
  403e0a:	d1f5      	bne.n	403df8 <mxt_handler+0x20>
    if(first == 0 ){
  403e0c:	f1ba 0f00 	cmp.w	sl, #0
  403e10:	d1ee      	bne.n	403df0 <mxt_handler+0x18>
      *x = convert_axis_system_x(touch_event.y);
  403e12:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	return ILI9488_LCD_WIDTH - ILI9488_LCD_WIDTH*touch_y/4096;
  403e16:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  403e1a:	f3c3 1393 	ubfx	r3, r3, #6, #20
  403e1e:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
      *x = convert_axis_system_x(touch_event.y);
  403e22:	f8c9 3000 	str.w	r3, [r9]
      *y = convert_axis_system_y(touch_event.x);
  403e26:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	return ILI9488_LCD_HEIGHT*touch_x/4096;
  403e2a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  403e2e:	f3c3 13d3 	ubfx	r3, r3, #7, #20
      *y = convert_axis_system_y(touch_event.x);
  403e32:	f8c8 3000 	str.w	r3, [r8]
  403e36:	e7db      	b.n	403df0 <mxt_handler+0x18>
}
  403e38:	b004      	add	sp, #16
  403e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  403e3e:	bf00      	nop
  403e40:	004005dd 	.word	0x004005dd
  403e44:	0040056d 	.word	0x0040056d

00403e48 <task_mxt>:
void task_mxt(void){
  403e48:	b580      	push	{r7, lr}
  403e4a:	b0a6      	sub	sp, #152	; 0x98
	uint8_t t8_object[] = {
  403e4c:	4c51      	ldr	r4, [pc, #324]	; (403f94 <task_mxt+0x14c>)
  403e4e:	ab04      	add	r3, sp, #16
  403e50:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
  403e54:	c303      	stmia	r3!, {r0, r1}
  403e56:	801a      	strh	r2, [r3, #0]
	uint8_t t9_object[] = {
  403e58:	ad13      	add	r5, sp, #76	; 0x4c
  403e5a:	f104 060c 	add.w	r6, r4, #12
  403e5e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403e62:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
  403e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403e66:	6833      	ldr	r3, [r6, #0]
  403e68:	602b      	str	r3, [r5, #0]
	uint8_t t46_object[] = {
  403e6a:	ab01      	add	r3, sp, #4
  403e6c:	f104 0230 	add.w	r2, r4, #48	; 0x30
  403e70:	ca07      	ldmia	r2, {r0, r1, r2}
  403e72:	c303      	stmia	r3!, {r0, r1}
  403e74:	701a      	strb	r2, [r3, #0]
	uint8_t t56_object[] = {
  403e76:	ad0a      	add	r5, sp, #40	; 0x28
  403e78:	343c      	adds	r4, #60	; 0x3c
  403e7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  403e7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403e7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  403e80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
  403e82:	6823      	ldr	r3, [r4, #0]
  403e84:	702b      	strb	r3, [r5, #0]
	twihs_master_options_t twi_opt = {
  403e86:	2400      	movs	r4, #0
  403e88:	9409      	str	r4, [sp, #36]	; 0x24
  403e8a:	4b43      	ldr	r3, [pc, #268]	; (403f98 <task_mxt+0x150>)
  403e8c:	9308      	str	r3, [sp, #32]
  403e8e:	264a      	movs	r6, #74	; 0x4a
  403e90:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
typedef twihs_packet_t twihs_package_t;

static inline uint32_t twihs_master_setup(twihs_master_t p_twihs,
		twihs_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
  403e94:	4b41      	ldr	r3, [pc, #260]	; (403f9c <task_mxt+0x154>)
  403e96:	9307      	str	r3, [sp, #28]
  403e98:	2013      	movs	r0, #19
  403e9a:	4b41      	ldr	r3, [pc, #260]	; (403fa0 <task_mxt+0x158>)
  403e9c:	4798      	blx	r3
#endif		
	} else {
		// Do Nothing
	}
#endif
	return (twihs_master_init(p_twihs, p_opt));
  403e9e:	4d41      	ldr	r5, [pc, #260]	; (403fa4 <task_mxt+0x15c>)
  403ea0:	a907      	add	r1, sp, #28
  403ea2:	4628      	mov	r0, r5
  403ea4:	4b40      	ldr	r3, [pc, #256]	; (403fa8 <task_mxt+0x160>)
  403ea6:	4798      	blx	r3
	status = mxt_init_device(device, MAXTOUCH_TWI_INTERFACE,
  403ea8:	2302      	movs	r3, #2
  403eaa:	4632      	mov	r2, r6
  403eac:	4629      	mov	r1, r5
  403eae:	a81e      	add	r0, sp, #120	; 0x78
  403eb0:	4d3e      	ldr	r5, [pc, #248]	; (403fac <task_mxt+0x164>)
  403eb2:	47a8      	blx	r5
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403eb4:	4622      	mov	r2, r4
  403eb6:	2106      	movs	r1, #6
  403eb8:	a81e      	add	r0, sp, #120	; 0x78
  403eba:	4d3d      	ldr	r5, [pc, #244]	; (403fb0 <task_mxt+0x168>)
  403ebc:	47a8      	blx	r5
  403ebe:	2201      	movs	r2, #1
  403ec0:	4601      	mov	r1, r0
  403ec2:	a81e      	add	r0, sp, #120	; 0x78
  403ec4:	4e3b      	ldr	r6, [pc, #236]	; (403fb4 <task_mxt+0x16c>)
  403ec6:	47b0      	blx	r6
	delay_ms(MXT_RESET_TIME);
  403ec8:	483b      	ldr	r0, [pc, #236]	; (403fb8 <task_mxt+0x170>)
  403eca:	4b3c      	ldr	r3, [pc, #240]	; (403fbc <task_mxt+0x174>)
  403ecc:	4798      	blx	r3
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403ece:	4622      	mov	r2, r4
  403ed0:	2107      	movs	r1, #7
  403ed2:	a81e      	add	r0, sp, #120	; 0x78
  403ed4:	47a8      	blx	r5
  403ed6:	2220      	movs	r2, #32
  403ed8:	4601      	mov	r1, r0
  403eda:	a81e      	add	r0, sp, #120	; 0x78
  403edc:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403ede:	4622      	mov	r2, r4
  403ee0:	2107      	movs	r1, #7
  403ee2:	a81e      	add	r0, sp, #120	; 0x78
  403ee4:	47a8      	blx	r5
  403ee6:	1c41      	adds	r1, r0, #1
  403ee8:	2210      	movs	r2, #16
  403eea:	b289      	uxth	r1, r1
  403eec:	a81e      	add	r0, sp, #120	; 0x78
  403eee:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403ef0:	4622      	mov	r2, r4
  403ef2:	2107      	movs	r1, #7
  403ef4:	a81e      	add	r0, sp, #120	; 0x78
  403ef6:	47a8      	blx	r5
  403ef8:	1c81      	adds	r1, r0, #2
  403efa:	224b      	movs	r2, #75	; 0x4b
  403efc:	b289      	uxth	r1, r1
  403efe:	a81e      	add	r0, sp, #120	; 0x78
  403f00:	47b0      	blx	r6
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403f02:	4622      	mov	r2, r4
  403f04:	2107      	movs	r1, #7
  403f06:	a81e      	add	r0, sp, #120	; 0x78
  403f08:	47a8      	blx	r5
  403f0a:	1cc1      	adds	r1, r0, #3
  403f0c:	2284      	movs	r2, #132	; 0x84
  403f0e:	b289      	uxth	r1, r1
  403f10:	a81e      	add	r0, sp, #120	; 0x78
  403f12:	47b0      	blx	r6
	mxt_write_config_object(device, mxt_get_object_address(device,
  403f14:	4622      	mov	r2, r4
  403f16:	2108      	movs	r1, #8
  403f18:	a81e      	add	r0, sp, #120	; 0x78
  403f1a:	47a8      	blx	r5
  403f1c:	aa04      	add	r2, sp, #16
  403f1e:	4601      	mov	r1, r0
  403f20:	a81e      	add	r0, sp, #120	; 0x78
  403f22:	4f27      	ldr	r7, [pc, #156]	; (403fc0 <task_mxt+0x178>)
  403f24:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  403f26:	4622      	mov	r2, r4
  403f28:	2109      	movs	r1, #9
  403f2a:	a81e      	add	r0, sp, #120	; 0x78
  403f2c:	47a8      	blx	r5
  403f2e:	aa13      	add	r2, sp, #76	; 0x4c
  403f30:	4601      	mov	r1, r0
  403f32:	a81e      	add	r0, sp, #120	; 0x78
  403f34:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  403f36:	4622      	mov	r2, r4
  403f38:	212e      	movs	r1, #46	; 0x2e
  403f3a:	a81e      	add	r0, sp, #120	; 0x78
  403f3c:	47a8      	blx	r5
  403f3e:	aa01      	add	r2, sp, #4
  403f40:	4601      	mov	r1, r0
  403f42:	a81e      	add	r0, sp, #120	; 0x78
  403f44:	47b8      	blx	r7
	mxt_write_config_object(device, mxt_get_object_address(device,
  403f46:	4622      	mov	r2, r4
  403f48:	2138      	movs	r1, #56	; 0x38
  403f4a:	a81e      	add	r0, sp, #120	; 0x78
  403f4c:	47a8      	blx	r5
  403f4e:	aa0a      	add	r2, sp, #40	; 0x28
  403f50:	4601      	mov	r1, r0
  403f52:	a81e      	add	r0, sp, #120	; 0x78
  403f54:	47b8      	blx	r7
	mxt_write_config_reg(device, mxt_get_object_address(device,
  403f56:	4622      	mov	r2, r4
  403f58:	2106      	movs	r1, #6
  403f5a:	a81e      	add	r0, sp, #120	; 0x78
  403f5c:	47a8      	blx	r5
  403f5e:	1c81      	adds	r1, r0, #2
  403f60:	2201      	movs	r2, #1
  403f62:	b289      	uxth	r1, r1
  403f64:	a81e      	add	r0, sp, #120	; 0x78
  403f66:	47b0      	blx	r6
		  if (mxt_is_message_pending(&device)) {
  403f68:	4c16      	ldr	r4, [pc, #88]	; (403fc4 <task_mxt+0x17c>)
		  	mxt_handler(&device, &touch.x, &touch.y);
  403f6a:	4f17      	ldr	r7, [pc, #92]	; (403fc8 <task_mxt+0x180>)
        xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  403f6c:	4e17      	ldr	r6, [pc, #92]	; (403fcc <task_mxt+0x184>)
  403f6e:	e002      	b.n	403f76 <task_mxt+0x12e>
     vTaskDelay(100);
  403f70:	2064      	movs	r0, #100	; 0x64
  403f72:	4b17      	ldr	r3, [pc, #92]	; (403fd0 <task_mxt+0x188>)
  403f74:	4798      	blx	r3
		  if (mxt_is_message_pending(&device)) {
  403f76:	a81e      	add	r0, sp, #120	; 0x78
  403f78:	47a0      	blx	r4
  403f7a:	2800      	cmp	r0, #0
  403f7c:	d0f8      	beq.n	403f70 <task_mxt+0x128>
		  	mxt_handler(&device, &touch.x, &touch.y);
  403f7e:	aa1d      	add	r2, sp, #116	; 0x74
  403f80:	a91c      	add	r1, sp, #112	; 0x70
  403f82:	a81e      	add	r0, sp, #120	; 0x78
  403f84:	47b8      	blx	r7
        xQueueSend( xQueueTouch, &touch, 0);           /* send mesage to queue */
  403f86:	2300      	movs	r3, #0
  403f88:	461a      	mov	r2, r3
  403f8a:	a91c      	add	r1, sp, #112	; 0x70
  403f8c:	6830      	ldr	r0, [r6, #0]
  403f8e:	4d11      	ldr	r5, [pc, #68]	; (403fd4 <task_mxt+0x18c>)
  403f90:	47a8      	blx	r5
  403f92:	e7ed      	b.n	403f70 <task_mxt+0x128>
  403f94:	00407070 	.word	0x00407070
  403f98:	00061a80 	.word	0x00061a80
  403f9c:	08f0d180 	.word	0x08f0d180
  403fa0:	00401609 	.word	0x00401609
  403fa4:	40018000 	.word	0x40018000
  403fa8:	00401855 	.word	0x00401855
  403fac:	004001d5 	.word	0x004001d5
  403fb0:	0040046d 	.word	0x0040046d
  403fb4:	00400525 	.word	0x00400525
  403fb8:	003228d8 	.word	0x003228d8
  403fbc:	20400001 	.word	0x20400001
  403fc0:	004004ad 	.word	0x004004ad
  403fc4:	0040056d 	.word	0x0040056d
  403fc8:	00403dd9 	.word	0x00403dd9
  403fcc:	2040c7f4 	.word	0x2040c7f4
  403fd0:	00402fe9 	.word	0x00402fe9
  403fd4:	004024dd 	.word	0x004024dd

00403fd8 <main>:
/************************************************************************/
/* main                                                                 */
/************************************************************************/

int main(void)
{
  403fd8:	b500      	push	{lr}
  403fda:	b08b      	sub	sp, #44	; 0x2c
		.charlength   = USART_SERIAL_CHAR_LENGTH,
		.paritytype   = USART_SERIAL_PARITY,
		.stopbits     = USART_SERIAL_STOP_BIT
	};

	sysclk_init(); /* Initialize system clocks */
  403fdc:	4b29      	ldr	r3, [pc, #164]	; (404084 <main+0xac>)
  403fde:	4798      	blx	r3
	board_init();  /* Initialize board */
  403fe0:	4b29      	ldr	r3, [pc, #164]	; (404088 <main+0xb0>)
  403fe2:	4798      	blx	r3
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
  403fe4:	4d29      	ldr	r5, [pc, #164]	; (40408c <main+0xb4>)
  403fe6:	4b2a      	ldr	r3, [pc, #168]	; (404090 <main+0xb8>)
  403fe8:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
  403fea:	4a2a      	ldr	r2, [pc, #168]	; (404094 <main+0xbc>)
  403fec:	4b2a      	ldr	r3, [pc, #168]	; (404098 <main+0xc0>)
  403fee:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
  403ff0:	4a2a      	ldr	r2, [pc, #168]	; (40409c <main+0xc4>)
  403ff2:	4b2b      	ldr	r3, [pc, #172]	; (4040a0 <main+0xc8>)
  403ff4:	601a      	str	r2, [r3, #0]
	usart_settings.baudrate = opt->baudrate;
  403ff6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  403ffa:	9304      	str	r3, [sp, #16]
	usart_settings.char_length = opt->charlength;
  403ffc:	23c0      	movs	r3, #192	; 0xc0
  403ffe:	9305      	str	r3, [sp, #20]
	usart_settings.parity_type = opt->paritytype;
  404000:	f44f 6300 	mov.w	r3, #2048	; 0x800
  404004:	9306      	str	r3, [sp, #24]
	usart_settings.stop_bits= opt->stopbits;
  404006:	2400      	movs	r4, #0
  404008:	9407      	str	r4, [sp, #28]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
  40400a:	9408      	str	r4, [sp, #32]
  40400c:	200e      	movs	r0, #14
  40400e:	4b25      	ldr	r3, [pc, #148]	; (4040a4 <main+0xcc>)
  404010:	4798      	blx	r3
		usart_init_rs232(p_usart, &usart_settings,
  404012:	4a25      	ldr	r2, [pc, #148]	; (4040a8 <main+0xd0>)
  404014:	a904      	add	r1, sp, #16
  404016:	4628      	mov	r0, r5
  404018:	4b24      	ldr	r3, [pc, #144]	; (4040ac <main+0xd4>)
  40401a:	4798      	blx	r3
		usart_enable_tx(p_usart);
  40401c:	4628      	mov	r0, r5
  40401e:	4b24      	ldr	r3, [pc, #144]	; (4040b0 <main+0xd8>)
  404020:	4798      	blx	r3
		usart_enable_rx(p_usart);
  404022:	4628      	mov	r0, r5
  404024:	4b23      	ldr	r3, [pc, #140]	; (4040b4 <main+0xdc>)
  404026:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
  404028:	4e23      	ldr	r6, [pc, #140]	; (4040b8 <main+0xe0>)
  40402a:	6833      	ldr	r3, [r6, #0]
  40402c:	4621      	mov	r1, r4
  40402e:	6898      	ldr	r0, [r3, #8]
  404030:	4d22      	ldr	r5, [pc, #136]	; (4040bc <main+0xe4>)
  404032:	47a8      	blx	r5
	setbuf(stdin, NULL);
  404034:	6833      	ldr	r3, [r6, #0]
  404036:	4621      	mov	r1, r4
  404038:	6858      	ldr	r0, [r3, #4]
  40403a:	47a8      	blx	r5
	
	/* Initialize stdio on USART */
	stdio_serial_init(USART_SERIAL_EXAMPLE, &usart_serial_options);
		
  /* Create task to handler touch */
  if (xTaskCreate(task_mxt, "mxt", TASK_MXT_STACK_SIZE, NULL, TASK_MXT_STACK_PRIORITY, NULL) != pdPASS) {
  40403c:	9403      	str	r4, [sp, #12]
  40403e:	9402      	str	r4, [sp, #8]
  404040:	9401      	str	r4, [sp, #4]
  404042:	9400      	str	r4, [sp, #0]
  404044:	4623      	mov	r3, r4
  404046:	f44f 7200 	mov.w	r2, #512	; 0x200
  40404a:	491d      	ldr	r1, [pc, #116]	; (4040c0 <main+0xe8>)
  40404c:	481d      	ldr	r0, [pc, #116]	; (4040c4 <main+0xec>)
  40404e:	4c1e      	ldr	r4, [pc, #120]	; (4040c8 <main+0xf0>)
  404050:	47a0      	blx	r4
  404052:	2801      	cmp	r0, #1
  404054:	d002      	beq.n	40405c <main+0x84>
    printf("Failed to create test led task\r\n");
  404056:	481d      	ldr	r0, [pc, #116]	; (4040cc <main+0xf4>)
  404058:	4b1d      	ldr	r3, [pc, #116]	; (4040d0 <main+0xf8>)
  40405a:	4798      	blx	r3
  }
  
  /* Create task to handler LCD */
  if (xTaskCreate(task_lcd, "lcd", TASK_LCD_STACK_SIZE, NULL, TASK_LCD_STACK_PRIORITY, NULL) != pdPASS) {
  40405c:	2300      	movs	r3, #0
  40405e:	9303      	str	r3, [sp, #12]
  404060:	9302      	str	r3, [sp, #8]
  404062:	9301      	str	r3, [sp, #4]
  404064:	9300      	str	r3, [sp, #0]
  404066:	f44f 7200 	mov.w	r2, #512	; 0x200
  40406a:	491a      	ldr	r1, [pc, #104]	; (4040d4 <main+0xfc>)
  40406c:	481a      	ldr	r0, [pc, #104]	; (4040d8 <main+0x100>)
  40406e:	4c16      	ldr	r4, [pc, #88]	; (4040c8 <main+0xf0>)
  404070:	47a0      	blx	r4
  404072:	2801      	cmp	r0, #1
  404074:	d002      	beq.n	40407c <main+0xa4>
    printf("Failed to create test led task\r\n");
  404076:	4815      	ldr	r0, [pc, #84]	; (4040cc <main+0xf4>)
  404078:	4b15      	ldr	r3, [pc, #84]	; (4040d0 <main+0xf8>)
  40407a:	4798      	blx	r3
  }

  /* Start the scheduler. */
  vTaskStartScheduler();
  40407c:	4b17      	ldr	r3, [pc, #92]	; (4040dc <main+0x104>)
  40407e:	4798      	blx	r3
  404080:	e7fe      	b.n	404080 <main+0xa8>
  404082:	bf00      	nop
  404084:	0040064d 	.word	0x0040064d
  404088:	004008dd 	.word	0x004008dd
  40408c:	40028000 	.word	0x40028000
  404090:	2040c7a0 	.word	0x2040c7a0
  404094:	00403b25 	.word	0x00403b25
  404098:	2040c79c 	.word	0x2040c79c
  40409c:	00403a49 	.word	0x00403a49
  4040a0:	2040c798 	.word	0x2040c798
  4040a4:	00401609 	.word	0x00401609
  4040a8:	08f0d180 	.word	0x08f0d180
  4040ac:	00401a7d 	.word	0x00401a7d
  4040b0:	00401ad1 	.word	0x00401ad1
  4040b4:	00401ad7 	.word	0x00401ad7
  4040b8:	20400018 	.word	0x20400018
  4040bc:	004048d5 	.word	0x004048d5
  4040c0:	004122cc 	.word	0x004122cc
  4040c4:	00403e49 	.word	0x00403e49
  4040c8:	00402aa1 	.word	0x00402aa1
  4040cc:	004122d0 	.word	0x004122d0
  4040d0:	00404131 	.word	0x00404131
  4040d4:	004122f4 	.word	0x004122f4
  4040d8:	00403d49 	.word	0x00403d49
  4040dc:	00402cd5 	.word	0x00402cd5

004040e0 <__libc_init_array>:
  4040e0:	b570      	push	{r4, r5, r6, lr}
  4040e2:	4e0f      	ldr	r6, [pc, #60]	; (404120 <__libc_init_array+0x40>)
  4040e4:	4d0f      	ldr	r5, [pc, #60]	; (404124 <__libc_init_array+0x44>)
  4040e6:	1b76      	subs	r6, r6, r5
  4040e8:	10b6      	asrs	r6, r6, #2
  4040ea:	bf18      	it	ne
  4040ec:	2400      	movne	r4, #0
  4040ee:	d005      	beq.n	4040fc <__libc_init_array+0x1c>
  4040f0:	3401      	adds	r4, #1
  4040f2:	f855 3b04 	ldr.w	r3, [r5], #4
  4040f6:	4798      	blx	r3
  4040f8:	42a6      	cmp	r6, r4
  4040fa:	d1f9      	bne.n	4040f0 <__libc_init_array+0x10>
  4040fc:	4e0a      	ldr	r6, [pc, #40]	; (404128 <__libc_init_array+0x48>)
  4040fe:	4d0b      	ldr	r5, [pc, #44]	; (40412c <__libc_init_array+0x4c>)
  404100:	1b76      	subs	r6, r6, r5
  404102:	f00e f9bf 	bl	412484 <_init>
  404106:	10b6      	asrs	r6, r6, #2
  404108:	bf18      	it	ne
  40410a:	2400      	movne	r4, #0
  40410c:	d006      	beq.n	40411c <__libc_init_array+0x3c>
  40410e:	3401      	adds	r4, #1
  404110:	f855 3b04 	ldr.w	r3, [r5], #4
  404114:	4798      	blx	r3
  404116:	42a6      	cmp	r6, r4
  404118:	d1f9      	bne.n	40410e <__libc_init_array+0x2e>
  40411a:	bd70      	pop	{r4, r5, r6, pc}
  40411c:	bd70      	pop	{r4, r5, r6, pc}
  40411e:	bf00      	nop
  404120:	00412490 	.word	0x00412490
  404124:	00412490 	.word	0x00412490
  404128:	00412498 	.word	0x00412498
  40412c:	00412490 	.word	0x00412490

00404130 <iprintf>:
  404130:	b40f      	push	{r0, r1, r2, r3}
  404132:	b500      	push	{lr}
  404134:	4907      	ldr	r1, [pc, #28]	; (404154 <iprintf+0x24>)
  404136:	b083      	sub	sp, #12
  404138:	ab04      	add	r3, sp, #16
  40413a:	6808      	ldr	r0, [r1, #0]
  40413c:	f853 2b04 	ldr.w	r2, [r3], #4
  404140:	6881      	ldr	r1, [r0, #8]
  404142:	9301      	str	r3, [sp, #4]
  404144:	f000 fd4a 	bl	404bdc <_vfiprintf_r>
  404148:	b003      	add	sp, #12
  40414a:	f85d eb04 	ldr.w	lr, [sp], #4
  40414e:	b004      	add	sp, #16
  404150:	4770      	bx	lr
  404152:	bf00      	nop
  404154:	20400018 	.word	0x20400018

00404158 <malloc>:
  404158:	4b02      	ldr	r3, [pc, #8]	; (404164 <malloc+0xc>)
  40415a:	4601      	mov	r1, r0
  40415c:	6818      	ldr	r0, [r3, #0]
  40415e:	f000 b803 	b.w	404168 <_malloc_r>
  404162:	bf00      	nop
  404164:	20400018 	.word	0x20400018

00404168 <_malloc_r>:
  404168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  40416c:	f101 060b 	add.w	r6, r1, #11
  404170:	2e16      	cmp	r6, #22
  404172:	b083      	sub	sp, #12
  404174:	4605      	mov	r5, r0
  404176:	f240 809e 	bls.w	4042b6 <_malloc_r+0x14e>
  40417a:	f036 0607 	bics.w	r6, r6, #7
  40417e:	f100 80bd 	bmi.w	4042fc <_malloc_r+0x194>
  404182:	42b1      	cmp	r1, r6
  404184:	f200 80ba 	bhi.w	4042fc <_malloc_r+0x194>
  404188:	f000 fb86 	bl	404898 <__malloc_lock>
  40418c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
  404190:	f0c0 8293 	bcc.w	4046ba <_malloc_r+0x552>
  404194:	0a73      	lsrs	r3, r6, #9
  404196:	f000 80b8 	beq.w	40430a <_malloc_r+0x1a2>
  40419a:	2b04      	cmp	r3, #4
  40419c:	f200 8179 	bhi.w	404492 <_malloc_r+0x32a>
  4041a0:	09b3      	lsrs	r3, r6, #6
  4041a2:	f103 0039 	add.w	r0, r3, #57	; 0x39
  4041a6:	f103 0e38 	add.w	lr, r3, #56	; 0x38
  4041aa:	00c3      	lsls	r3, r0, #3
  4041ac:	4fbf      	ldr	r7, [pc, #764]	; (4044ac <_malloc_r+0x344>)
  4041ae:	443b      	add	r3, r7
  4041b0:	f1a3 0108 	sub.w	r1, r3, #8
  4041b4:	685c      	ldr	r4, [r3, #4]
  4041b6:	42a1      	cmp	r1, r4
  4041b8:	d106      	bne.n	4041c8 <_malloc_r+0x60>
  4041ba:	e00c      	b.n	4041d6 <_malloc_r+0x6e>
  4041bc:	2a00      	cmp	r2, #0
  4041be:	f280 80aa 	bge.w	404316 <_malloc_r+0x1ae>
  4041c2:	68e4      	ldr	r4, [r4, #12]
  4041c4:	42a1      	cmp	r1, r4
  4041c6:	d006      	beq.n	4041d6 <_malloc_r+0x6e>
  4041c8:	6863      	ldr	r3, [r4, #4]
  4041ca:	f023 0303 	bic.w	r3, r3, #3
  4041ce:	1b9a      	subs	r2, r3, r6
  4041d0:	2a0f      	cmp	r2, #15
  4041d2:	ddf3      	ble.n	4041bc <_malloc_r+0x54>
  4041d4:	4670      	mov	r0, lr
  4041d6:	693c      	ldr	r4, [r7, #16]
  4041d8:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 4044c0 <_malloc_r+0x358>
  4041dc:	4574      	cmp	r4, lr
  4041de:	f000 81ab 	beq.w	404538 <_malloc_r+0x3d0>
  4041e2:	6863      	ldr	r3, [r4, #4]
  4041e4:	f023 0303 	bic.w	r3, r3, #3
  4041e8:	1b9a      	subs	r2, r3, r6
  4041ea:	2a0f      	cmp	r2, #15
  4041ec:	f300 8190 	bgt.w	404510 <_malloc_r+0x3a8>
  4041f0:	2a00      	cmp	r2, #0
  4041f2:	f8c7 e014 	str.w	lr, [r7, #20]
  4041f6:	f8c7 e010 	str.w	lr, [r7, #16]
  4041fa:	f280 809d 	bge.w	404338 <_malloc_r+0x1d0>
  4041fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  404202:	f080 8161 	bcs.w	4044c8 <_malloc_r+0x360>
  404206:	08db      	lsrs	r3, r3, #3
  404208:	f103 0c01 	add.w	ip, r3, #1
  40420c:	1099      	asrs	r1, r3, #2
  40420e:	687a      	ldr	r2, [r7, #4]
  404210:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
  404214:	f8c4 8008 	str.w	r8, [r4, #8]
  404218:	2301      	movs	r3, #1
  40421a:	408b      	lsls	r3, r1
  40421c:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
  404220:	4313      	orrs	r3, r2
  404222:	3908      	subs	r1, #8
  404224:	60e1      	str	r1, [r4, #12]
  404226:	607b      	str	r3, [r7, #4]
  404228:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
  40422c:	f8c8 400c 	str.w	r4, [r8, #12]
  404230:	1082      	asrs	r2, r0, #2
  404232:	2401      	movs	r4, #1
  404234:	4094      	lsls	r4, r2
  404236:	429c      	cmp	r4, r3
  404238:	f200 808b 	bhi.w	404352 <_malloc_r+0x1ea>
  40423c:	421c      	tst	r4, r3
  40423e:	d106      	bne.n	40424e <_malloc_r+0xe6>
  404240:	f020 0003 	bic.w	r0, r0, #3
  404244:	0064      	lsls	r4, r4, #1
  404246:	421c      	tst	r4, r3
  404248:	f100 0004 	add.w	r0, r0, #4
  40424c:	d0fa      	beq.n	404244 <_malloc_r+0xdc>
  40424e:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
  404252:	46cc      	mov	ip, r9
  404254:	4680      	mov	r8, r0
  404256:	f8dc 300c 	ldr.w	r3, [ip, #12]
  40425a:	459c      	cmp	ip, r3
  40425c:	d107      	bne.n	40426e <_malloc_r+0x106>
  40425e:	e16d      	b.n	40453c <_malloc_r+0x3d4>
  404260:	2a00      	cmp	r2, #0
  404262:	f280 817b 	bge.w	40455c <_malloc_r+0x3f4>
  404266:	68db      	ldr	r3, [r3, #12]
  404268:	459c      	cmp	ip, r3
  40426a:	f000 8167 	beq.w	40453c <_malloc_r+0x3d4>
  40426e:	6859      	ldr	r1, [r3, #4]
  404270:	f021 0103 	bic.w	r1, r1, #3
  404274:	1b8a      	subs	r2, r1, r6
  404276:	2a0f      	cmp	r2, #15
  404278:	ddf2      	ble.n	404260 <_malloc_r+0xf8>
  40427a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
  40427e:	f8d3 8008 	ldr.w	r8, [r3, #8]
  404282:	9300      	str	r3, [sp, #0]
  404284:	199c      	adds	r4, r3, r6
  404286:	4628      	mov	r0, r5
  404288:	f046 0601 	orr.w	r6, r6, #1
  40428c:	f042 0501 	orr.w	r5, r2, #1
  404290:	605e      	str	r6, [r3, #4]
  404292:	f8c8 c00c 	str.w	ip, [r8, #12]
  404296:	f8cc 8008 	str.w	r8, [ip, #8]
  40429a:	617c      	str	r4, [r7, #20]
  40429c:	613c      	str	r4, [r7, #16]
  40429e:	f8c4 e00c 	str.w	lr, [r4, #12]
  4042a2:	f8c4 e008 	str.w	lr, [r4, #8]
  4042a6:	6065      	str	r5, [r4, #4]
  4042a8:	505a      	str	r2, [r3, r1]
  4042aa:	f000 fafb 	bl	4048a4 <__malloc_unlock>
  4042ae:	9b00      	ldr	r3, [sp, #0]
  4042b0:	f103 0408 	add.w	r4, r3, #8
  4042b4:	e01e      	b.n	4042f4 <_malloc_r+0x18c>
  4042b6:	2910      	cmp	r1, #16
  4042b8:	d820      	bhi.n	4042fc <_malloc_r+0x194>
  4042ba:	f000 faed 	bl	404898 <__malloc_lock>
  4042be:	2610      	movs	r6, #16
  4042c0:	2318      	movs	r3, #24
  4042c2:	2002      	movs	r0, #2
  4042c4:	4f79      	ldr	r7, [pc, #484]	; (4044ac <_malloc_r+0x344>)
  4042c6:	443b      	add	r3, r7
  4042c8:	f1a3 0208 	sub.w	r2, r3, #8
  4042cc:	685c      	ldr	r4, [r3, #4]
  4042ce:	4294      	cmp	r4, r2
  4042d0:	f000 813d 	beq.w	40454e <_malloc_r+0x3e6>
  4042d4:	6863      	ldr	r3, [r4, #4]
  4042d6:	68e1      	ldr	r1, [r4, #12]
  4042d8:	68a6      	ldr	r6, [r4, #8]
  4042da:	f023 0303 	bic.w	r3, r3, #3
  4042de:	4423      	add	r3, r4
  4042e0:	4628      	mov	r0, r5
  4042e2:	685a      	ldr	r2, [r3, #4]
  4042e4:	60f1      	str	r1, [r6, #12]
  4042e6:	f042 0201 	orr.w	r2, r2, #1
  4042ea:	608e      	str	r6, [r1, #8]
  4042ec:	605a      	str	r2, [r3, #4]
  4042ee:	f000 fad9 	bl	4048a4 <__malloc_unlock>
  4042f2:	3408      	adds	r4, #8
  4042f4:	4620      	mov	r0, r4
  4042f6:	b003      	add	sp, #12
  4042f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4042fc:	2400      	movs	r4, #0
  4042fe:	230c      	movs	r3, #12
  404300:	4620      	mov	r0, r4
  404302:	602b      	str	r3, [r5, #0]
  404304:	b003      	add	sp, #12
  404306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  40430a:	2040      	movs	r0, #64	; 0x40
  40430c:	f44f 7300 	mov.w	r3, #512	; 0x200
  404310:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
  404314:	e74a      	b.n	4041ac <_malloc_r+0x44>
  404316:	4423      	add	r3, r4
  404318:	68e1      	ldr	r1, [r4, #12]
  40431a:	685a      	ldr	r2, [r3, #4]
  40431c:	68a6      	ldr	r6, [r4, #8]
  40431e:	f042 0201 	orr.w	r2, r2, #1
  404322:	60f1      	str	r1, [r6, #12]
  404324:	4628      	mov	r0, r5
  404326:	608e      	str	r6, [r1, #8]
  404328:	605a      	str	r2, [r3, #4]
  40432a:	f000 fabb 	bl	4048a4 <__malloc_unlock>
  40432e:	3408      	adds	r4, #8
  404330:	4620      	mov	r0, r4
  404332:	b003      	add	sp, #12
  404334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404338:	4423      	add	r3, r4
  40433a:	4628      	mov	r0, r5
  40433c:	685a      	ldr	r2, [r3, #4]
  40433e:	f042 0201 	orr.w	r2, r2, #1
  404342:	605a      	str	r2, [r3, #4]
  404344:	f000 faae 	bl	4048a4 <__malloc_unlock>
  404348:	3408      	adds	r4, #8
  40434a:	4620      	mov	r0, r4
  40434c:	b003      	add	sp, #12
  40434e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404352:	68bc      	ldr	r4, [r7, #8]
  404354:	6863      	ldr	r3, [r4, #4]
  404356:	f023 0803 	bic.w	r8, r3, #3
  40435a:	45b0      	cmp	r8, r6
  40435c:	d304      	bcc.n	404368 <_malloc_r+0x200>
  40435e:	eba8 0306 	sub.w	r3, r8, r6
  404362:	2b0f      	cmp	r3, #15
  404364:	f300 8085 	bgt.w	404472 <_malloc_r+0x30a>
  404368:	f8df 9158 	ldr.w	r9, [pc, #344]	; 4044c4 <_malloc_r+0x35c>
  40436c:	4b50      	ldr	r3, [pc, #320]	; (4044b0 <_malloc_r+0x348>)
  40436e:	f8d9 2000 	ldr.w	r2, [r9]
  404372:	681b      	ldr	r3, [r3, #0]
  404374:	3201      	adds	r2, #1
  404376:	4433      	add	r3, r6
  404378:	eb04 0a08 	add.w	sl, r4, r8
  40437c:	f000 8155 	beq.w	40462a <_malloc_r+0x4c2>
  404380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  404384:	330f      	adds	r3, #15
  404386:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
  40438a:	f02b 0b0f 	bic.w	fp, fp, #15
  40438e:	4659      	mov	r1, fp
  404390:	4628      	mov	r0, r5
  404392:	f000 fa8d 	bl	4048b0 <_sbrk_r>
  404396:	1c41      	adds	r1, r0, #1
  404398:	4602      	mov	r2, r0
  40439a:	f000 80fc 	beq.w	404596 <_malloc_r+0x42e>
  40439e:	4582      	cmp	sl, r0
  4043a0:	f200 80f7 	bhi.w	404592 <_malloc_r+0x42a>
  4043a4:	4b43      	ldr	r3, [pc, #268]	; (4044b4 <_malloc_r+0x34c>)
  4043a6:	6819      	ldr	r1, [r3, #0]
  4043a8:	4459      	add	r1, fp
  4043aa:	6019      	str	r1, [r3, #0]
  4043ac:	f000 814d 	beq.w	40464a <_malloc_r+0x4e2>
  4043b0:	f8d9 0000 	ldr.w	r0, [r9]
  4043b4:	3001      	adds	r0, #1
  4043b6:	bf1b      	ittet	ne
  4043b8:	eba2 0a0a 	subne.w	sl, r2, sl
  4043bc:	4451      	addne	r1, sl
  4043be:	f8c9 2000 	streq.w	r2, [r9]
  4043c2:	6019      	strne	r1, [r3, #0]
  4043c4:	f012 0107 	ands.w	r1, r2, #7
  4043c8:	f000 8115 	beq.w	4045f6 <_malloc_r+0x48e>
  4043cc:	f1c1 0008 	rsb	r0, r1, #8
  4043d0:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
  4043d4:	4402      	add	r2, r0
  4043d6:	3108      	adds	r1, #8
  4043d8:	eb02 090b 	add.w	r9, r2, fp
  4043dc:	f3c9 090b 	ubfx	r9, r9, #0, #12
  4043e0:	eba1 0909 	sub.w	r9, r1, r9
  4043e4:	4649      	mov	r1, r9
  4043e6:	4628      	mov	r0, r5
  4043e8:	9301      	str	r3, [sp, #4]
  4043ea:	9200      	str	r2, [sp, #0]
  4043ec:	f000 fa60 	bl	4048b0 <_sbrk_r>
  4043f0:	1c43      	adds	r3, r0, #1
  4043f2:	e89d 000c 	ldmia.w	sp, {r2, r3}
  4043f6:	f000 8143 	beq.w	404680 <_malloc_r+0x518>
  4043fa:	1a80      	subs	r0, r0, r2
  4043fc:	4448      	add	r0, r9
  4043fe:	f040 0001 	orr.w	r0, r0, #1
  404402:	6819      	ldr	r1, [r3, #0]
  404404:	60ba      	str	r2, [r7, #8]
  404406:	4449      	add	r1, r9
  404408:	42bc      	cmp	r4, r7
  40440a:	6050      	str	r0, [r2, #4]
  40440c:	6019      	str	r1, [r3, #0]
  40440e:	d017      	beq.n	404440 <_malloc_r+0x2d8>
  404410:	f1b8 0f0f 	cmp.w	r8, #15
  404414:	f240 80fb 	bls.w	40460e <_malloc_r+0x4a6>
  404418:	6860      	ldr	r0, [r4, #4]
  40441a:	f1a8 020c 	sub.w	r2, r8, #12
  40441e:	f022 0207 	bic.w	r2, r2, #7
  404422:	eb04 0e02 	add.w	lr, r4, r2
  404426:	f000 0001 	and.w	r0, r0, #1
  40442a:	f04f 0c05 	mov.w	ip, #5
  40442e:	4310      	orrs	r0, r2
  404430:	2a0f      	cmp	r2, #15
  404432:	6060      	str	r0, [r4, #4]
  404434:	f8ce c004 	str.w	ip, [lr, #4]
  404438:	f8ce c008 	str.w	ip, [lr, #8]
  40443c:	f200 8117 	bhi.w	40466e <_malloc_r+0x506>
  404440:	4b1d      	ldr	r3, [pc, #116]	; (4044b8 <_malloc_r+0x350>)
  404442:	68bc      	ldr	r4, [r7, #8]
  404444:	681a      	ldr	r2, [r3, #0]
  404446:	4291      	cmp	r1, r2
  404448:	bf88      	it	hi
  40444a:	6019      	strhi	r1, [r3, #0]
  40444c:	4b1b      	ldr	r3, [pc, #108]	; (4044bc <_malloc_r+0x354>)
  40444e:	681a      	ldr	r2, [r3, #0]
  404450:	4291      	cmp	r1, r2
  404452:	6862      	ldr	r2, [r4, #4]
  404454:	bf88      	it	hi
  404456:	6019      	strhi	r1, [r3, #0]
  404458:	f022 0203 	bic.w	r2, r2, #3
  40445c:	4296      	cmp	r6, r2
  40445e:	eba2 0306 	sub.w	r3, r2, r6
  404462:	d801      	bhi.n	404468 <_malloc_r+0x300>
  404464:	2b0f      	cmp	r3, #15
  404466:	dc04      	bgt.n	404472 <_malloc_r+0x30a>
  404468:	4628      	mov	r0, r5
  40446a:	f000 fa1b 	bl	4048a4 <__malloc_unlock>
  40446e:	2400      	movs	r4, #0
  404470:	e740      	b.n	4042f4 <_malloc_r+0x18c>
  404472:	19a2      	adds	r2, r4, r6
  404474:	f043 0301 	orr.w	r3, r3, #1
  404478:	f046 0601 	orr.w	r6, r6, #1
  40447c:	6066      	str	r6, [r4, #4]
  40447e:	4628      	mov	r0, r5
  404480:	60ba      	str	r2, [r7, #8]
  404482:	6053      	str	r3, [r2, #4]
  404484:	f000 fa0e 	bl	4048a4 <__malloc_unlock>
  404488:	3408      	adds	r4, #8
  40448a:	4620      	mov	r0, r4
  40448c:	b003      	add	sp, #12
  40448e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404492:	2b14      	cmp	r3, #20
  404494:	d971      	bls.n	40457a <_malloc_r+0x412>
  404496:	2b54      	cmp	r3, #84	; 0x54
  404498:	f200 80a3 	bhi.w	4045e2 <_malloc_r+0x47a>
  40449c:	0b33      	lsrs	r3, r6, #12
  40449e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
  4044a2:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
  4044a6:	00c3      	lsls	r3, r0, #3
  4044a8:	e680      	b.n	4041ac <_malloc_r+0x44>
  4044aa:	bf00      	nop
  4044ac:	20400448 	.word	0x20400448
  4044b0:	2040c794 	.word	0x2040c794
  4044b4:	2040c764 	.word	0x2040c764
  4044b8:	2040c78c 	.word	0x2040c78c
  4044bc:	2040c790 	.word	0x2040c790
  4044c0:	20400450 	.word	0x20400450
  4044c4:	20400850 	.word	0x20400850
  4044c8:	0a5a      	lsrs	r2, r3, #9
  4044ca:	2a04      	cmp	r2, #4
  4044cc:	d95b      	bls.n	404586 <_malloc_r+0x41e>
  4044ce:	2a14      	cmp	r2, #20
  4044d0:	f200 80ae 	bhi.w	404630 <_malloc_r+0x4c8>
  4044d4:	f102 015c 	add.w	r1, r2, #92	; 0x5c
  4044d8:	00c9      	lsls	r1, r1, #3
  4044da:	325b      	adds	r2, #91	; 0x5b
  4044dc:	eb07 0c01 	add.w	ip, r7, r1
  4044e0:	5879      	ldr	r1, [r7, r1]
  4044e2:	f1ac 0c08 	sub.w	ip, ip, #8
  4044e6:	458c      	cmp	ip, r1
  4044e8:	f000 8088 	beq.w	4045fc <_malloc_r+0x494>
  4044ec:	684a      	ldr	r2, [r1, #4]
  4044ee:	f022 0203 	bic.w	r2, r2, #3
  4044f2:	4293      	cmp	r3, r2
  4044f4:	d273      	bcs.n	4045de <_malloc_r+0x476>
  4044f6:	6889      	ldr	r1, [r1, #8]
  4044f8:	458c      	cmp	ip, r1
  4044fa:	d1f7      	bne.n	4044ec <_malloc_r+0x384>
  4044fc:	f8dc 200c 	ldr.w	r2, [ip, #12]
  404500:	687b      	ldr	r3, [r7, #4]
  404502:	60e2      	str	r2, [r4, #12]
  404504:	f8c4 c008 	str.w	ip, [r4, #8]
  404508:	6094      	str	r4, [r2, #8]
  40450a:	f8cc 400c 	str.w	r4, [ip, #12]
  40450e:	e68f      	b.n	404230 <_malloc_r+0xc8>
  404510:	19a1      	adds	r1, r4, r6
  404512:	f046 0c01 	orr.w	ip, r6, #1
  404516:	f042 0601 	orr.w	r6, r2, #1
  40451a:	f8c4 c004 	str.w	ip, [r4, #4]
  40451e:	4628      	mov	r0, r5
  404520:	6179      	str	r1, [r7, #20]
  404522:	6139      	str	r1, [r7, #16]
  404524:	f8c1 e00c 	str.w	lr, [r1, #12]
  404528:	f8c1 e008 	str.w	lr, [r1, #8]
  40452c:	604e      	str	r6, [r1, #4]
  40452e:	50e2      	str	r2, [r4, r3]
  404530:	f000 f9b8 	bl	4048a4 <__malloc_unlock>
  404534:	3408      	adds	r4, #8
  404536:	e6dd      	b.n	4042f4 <_malloc_r+0x18c>
  404538:	687b      	ldr	r3, [r7, #4]
  40453a:	e679      	b.n	404230 <_malloc_r+0xc8>
  40453c:	f108 0801 	add.w	r8, r8, #1
  404540:	f018 0f03 	tst.w	r8, #3
  404544:	f10c 0c08 	add.w	ip, ip, #8
  404548:	f47f ae85 	bne.w	404256 <_malloc_r+0xee>
  40454c:	e02d      	b.n	4045aa <_malloc_r+0x442>
  40454e:	68dc      	ldr	r4, [r3, #12]
  404550:	42a3      	cmp	r3, r4
  404552:	bf08      	it	eq
  404554:	3002      	addeq	r0, #2
  404556:	f43f ae3e 	beq.w	4041d6 <_malloc_r+0x6e>
  40455a:	e6bb      	b.n	4042d4 <_malloc_r+0x16c>
  40455c:	4419      	add	r1, r3
  40455e:	461c      	mov	r4, r3
  404560:	684a      	ldr	r2, [r1, #4]
  404562:	68db      	ldr	r3, [r3, #12]
  404564:	f854 6f08 	ldr.w	r6, [r4, #8]!
  404568:	f042 0201 	orr.w	r2, r2, #1
  40456c:	604a      	str	r2, [r1, #4]
  40456e:	4628      	mov	r0, r5
  404570:	60f3      	str	r3, [r6, #12]
  404572:	609e      	str	r6, [r3, #8]
  404574:	f000 f996 	bl	4048a4 <__malloc_unlock>
  404578:	e6bc      	b.n	4042f4 <_malloc_r+0x18c>
  40457a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
  40457e:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
  404582:	00c3      	lsls	r3, r0, #3
  404584:	e612      	b.n	4041ac <_malloc_r+0x44>
  404586:	099a      	lsrs	r2, r3, #6
  404588:	f102 0139 	add.w	r1, r2, #57	; 0x39
  40458c:	00c9      	lsls	r1, r1, #3
  40458e:	3238      	adds	r2, #56	; 0x38
  404590:	e7a4      	b.n	4044dc <_malloc_r+0x374>
  404592:	42bc      	cmp	r4, r7
  404594:	d054      	beq.n	404640 <_malloc_r+0x4d8>
  404596:	68bc      	ldr	r4, [r7, #8]
  404598:	6862      	ldr	r2, [r4, #4]
  40459a:	f022 0203 	bic.w	r2, r2, #3
  40459e:	e75d      	b.n	40445c <_malloc_r+0x2f4>
  4045a0:	f859 3908 	ldr.w	r3, [r9], #-8
  4045a4:	4599      	cmp	r9, r3
  4045a6:	f040 8086 	bne.w	4046b6 <_malloc_r+0x54e>
  4045aa:	f010 0f03 	tst.w	r0, #3
  4045ae:	f100 30ff 	add.w	r0, r0, #4294967295
  4045b2:	d1f5      	bne.n	4045a0 <_malloc_r+0x438>
  4045b4:	687b      	ldr	r3, [r7, #4]
  4045b6:	ea23 0304 	bic.w	r3, r3, r4
  4045ba:	607b      	str	r3, [r7, #4]
  4045bc:	0064      	lsls	r4, r4, #1
  4045be:	429c      	cmp	r4, r3
  4045c0:	f63f aec7 	bhi.w	404352 <_malloc_r+0x1ea>
  4045c4:	2c00      	cmp	r4, #0
  4045c6:	f43f aec4 	beq.w	404352 <_malloc_r+0x1ea>
  4045ca:	421c      	tst	r4, r3
  4045cc:	4640      	mov	r0, r8
  4045ce:	f47f ae3e 	bne.w	40424e <_malloc_r+0xe6>
  4045d2:	0064      	lsls	r4, r4, #1
  4045d4:	421c      	tst	r4, r3
  4045d6:	f100 0004 	add.w	r0, r0, #4
  4045da:	d0fa      	beq.n	4045d2 <_malloc_r+0x46a>
  4045dc:	e637      	b.n	40424e <_malloc_r+0xe6>
  4045de:	468c      	mov	ip, r1
  4045e0:	e78c      	b.n	4044fc <_malloc_r+0x394>
  4045e2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
  4045e6:	d815      	bhi.n	404614 <_malloc_r+0x4ac>
  4045e8:	0bf3      	lsrs	r3, r6, #15
  4045ea:	f103 0078 	add.w	r0, r3, #120	; 0x78
  4045ee:	f103 0e77 	add.w	lr, r3, #119	; 0x77
  4045f2:	00c3      	lsls	r3, r0, #3
  4045f4:	e5da      	b.n	4041ac <_malloc_r+0x44>
  4045f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  4045fa:	e6ed      	b.n	4043d8 <_malloc_r+0x270>
  4045fc:	687b      	ldr	r3, [r7, #4]
  4045fe:	1092      	asrs	r2, r2, #2
  404600:	2101      	movs	r1, #1
  404602:	fa01 f202 	lsl.w	r2, r1, r2
  404606:	4313      	orrs	r3, r2
  404608:	607b      	str	r3, [r7, #4]
  40460a:	4662      	mov	r2, ip
  40460c:	e779      	b.n	404502 <_malloc_r+0x39a>
  40460e:	2301      	movs	r3, #1
  404610:	6053      	str	r3, [r2, #4]
  404612:	e729      	b.n	404468 <_malloc_r+0x300>
  404614:	f240 5254 	movw	r2, #1364	; 0x554
  404618:	4293      	cmp	r3, r2
  40461a:	d822      	bhi.n	404662 <_malloc_r+0x4fa>
  40461c:	0cb3      	lsrs	r3, r6, #18
  40461e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
  404622:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
  404626:	00c3      	lsls	r3, r0, #3
  404628:	e5c0      	b.n	4041ac <_malloc_r+0x44>
  40462a:	f103 0b10 	add.w	fp, r3, #16
  40462e:	e6ae      	b.n	40438e <_malloc_r+0x226>
  404630:	2a54      	cmp	r2, #84	; 0x54
  404632:	d829      	bhi.n	404688 <_malloc_r+0x520>
  404634:	0b1a      	lsrs	r2, r3, #12
  404636:	f102 016f 	add.w	r1, r2, #111	; 0x6f
  40463a:	00c9      	lsls	r1, r1, #3
  40463c:	326e      	adds	r2, #110	; 0x6e
  40463e:	e74d      	b.n	4044dc <_malloc_r+0x374>
  404640:	4b20      	ldr	r3, [pc, #128]	; (4046c4 <_malloc_r+0x55c>)
  404642:	6819      	ldr	r1, [r3, #0]
  404644:	4459      	add	r1, fp
  404646:	6019      	str	r1, [r3, #0]
  404648:	e6b2      	b.n	4043b0 <_malloc_r+0x248>
  40464a:	f3ca 000b 	ubfx	r0, sl, #0, #12
  40464e:	2800      	cmp	r0, #0
  404650:	f47f aeae 	bne.w	4043b0 <_malloc_r+0x248>
  404654:	eb08 030b 	add.w	r3, r8, fp
  404658:	68ba      	ldr	r2, [r7, #8]
  40465a:	f043 0301 	orr.w	r3, r3, #1
  40465e:	6053      	str	r3, [r2, #4]
  404660:	e6ee      	b.n	404440 <_malloc_r+0x2d8>
  404662:	207f      	movs	r0, #127	; 0x7f
  404664:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
  404668:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
  40466c:	e59e      	b.n	4041ac <_malloc_r+0x44>
  40466e:	f104 0108 	add.w	r1, r4, #8
  404672:	4628      	mov	r0, r5
  404674:	9300      	str	r3, [sp, #0]
  404676:	f001 fbcd 	bl	405e14 <_free_r>
  40467a:	9b00      	ldr	r3, [sp, #0]
  40467c:	6819      	ldr	r1, [r3, #0]
  40467e:	e6df      	b.n	404440 <_malloc_r+0x2d8>
  404680:	2001      	movs	r0, #1
  404682:	f04f 0900 	mov.w	r9, #0
  404686:	e6bc      	b.n	404402 <_malloc_r+0x29a>
  404688:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  40468c:	d805      	bhi.n	40469a <_malloc_r+0x532>
  40468e:	0bda      	lsrs	r2, r3, #15
  404690:	f102 0178 	add.w	r1, r2, #120	; 0x78
  404694:	00c9      	lsls	r1, r1, #3
  404696:	3277      	adds	r2, #119	; 0x77
  404698:	e720      	b.n	4044dc <_malloc_r+0x374>
  40469a:	f240 5154 	movw	r1, #1364	; 0x554
  40469e:	428a      	cmp	r2, r1
  4046a0:	d805      	bhi.n	4046ae <_malloc_r+0x546>
  4046a2:	0c9a      	lsrs	r2, r3, #18
  4046a4:	f102 017d 	add.w	r1, r2, #125	; 0x7d
  4046a8:	00c9      	lsls	r1, r1, #3
  4046aa:	327c      	adds	r2, #124	; 0x7c
  4046ac:	e716      	b.n	4044dc <_malloc_r+0x374>
  4046ae:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
  4046b2:	227e      	movs	r2, #126	; 0x7e
  4046b4:	e712      	b.n	4044dc <_malloc_r+0x374>
  4046b6:	687b      	ldr	r3, [r7, #4]
  4046b8:	e780      	b.n	4045bc <_malloc_r+0x454>
  4046ba:	08f0      	lsrs	r0, r6, #3
  4046bc:	f106 0308 	add.w	r3, r6, #8
  4046c0:	e600      	b.n	4042c4 <_malloc_r+0x15c>
  4046c2:	bf00      	nop
  4046c4:	2040c764 	.word	0x2040c764

004046c8 <memcpy>:
  4046c8:	4684      	mov	ip, r0
  4046ca:	ea41 0300 	orr.w	r3, r1, r0
  4046ce:	f013 0303 	ands.w	r3, r3, #3
  4046d2:	d16d      	bne.n	4047b0 <memcpy+0xe8>
  4046d4:	3a40      	subs	r2, #64	; 0x40
  4046d6:	d341      	bcc.n	40475c <memcpy+0x94>
  4046d8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046dc:	f840 3b04 	str.w	r3, [r0], #4
  4046e0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046e4:	f840 3b04 	str.w	r3, [r0], #4
  4046e8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046ec:	f840 3b04 	str.w	r3, [r0], #4
  4046f0:	f851 3b04 	ldr.w	r3, [r1], #4
  4046f4:	f840 3b04 	str.w	r3, [r0], #4
  4046f8:	f851 3b04 	ldr.w	r3, [r1], #4
  4046fc:	f840 3b04 	str.w	r3, [r0], #4
  404700:	f851 3b04 	ldr.w	r3, [r1], #4
  404704:	f840 3b04 	str.w	r3, [r0], #4
  404708:	f851 3b04 	ldr.w	r3, [r1], #4
  40470c:	f840 3b04 	str.w	r3, [r0], #4
  404710:	f851 3b04 	ldr.w	r3, [r1], #4
  404714:	f840 3b04 	str.w	r3, [r0], #4
  404718:	f851 3b04 	ldr.w	r3, [r1], #4
  40471c:	f840 3b04 	str.w	r3, [r0], #4
  404720:	f851 3b04 	ldr.w	r3, [r1], #4
  404724:	f840 3b04 	str.w	r3, [r0], #4
  404728:	f851 3b04 	ldr.w	r3, [r1], #4
  40472c:	f840 3b04 	str.w	r3, [r0], #4
  404730:	f851 3b04 	ldr.w	r3, [r1], #4
  404734:	f840 3b04 	str.w	r3, [r0], #4
  404738:	f851 3b04 	ldr.w	r3, [r1], #4
  40473c:	f840 3b04 	str.w	r3, [r0], #4
  404740:	f851 3b04 	ldr.w	r3, [r1], #4
  404744:	f840 3b04 	str.w	r3, [r0], #4
  404748:	f851 3b04 	ldr.w	r3, [r1], #4
  40474c:	f840 3b04 	str.w	r3, [r0], #4
  404750:	f851 3b04 	ldr.w	r3, [r1], #4
  404754:	f840 3b04 	str.w	r3, [r0], #4
  404758:	3a40      	subs	r2, #64	; 0x40
  40475a:	d2bd      	bcs.n	4046d8 <memcpy+0x10>
  40475c:	3230      	adds	r2, #48	; 0x30
  40475e:	d311      	bcc.n	404784 <memcpy+0xbc>
  404760:	f851 3b04 	ldr.w	r3, [r1], #4
  404764:	f840 3b04 	str.w	r3, [r0], #4
  404768:	f851 3b04 	ldr.w	r3, [r1], #4
  40476c:	f840 3b04 	str.w	r3, [r0], #4
  404770:	f851 3b04 	ldr.w	r3, [r1], #4
  404774:	f840 3b04 	str.w	r3, [r0], #4
  404778:	f851 3b04 	ldr.w	r3, [r1], #4
  40477c:	f840 3b04 	str.w	r3, [r0], #4
  404780:	3a10      	subs	r2, #16
  404782:	d2ed      	bcs.n	404760 <memcpy+0x98>
  404784:	320c      	adds	r2, #12
  404786:	d305      	bcc.n	404794 <memcpy+0xcc>
  404788:	f851 3b04 	ldr.w	r3, [r1], #4
  40478c:	f840 3b04 	str.w	r3, [r0], #4
  404790:	3a04      	subs	r2, #4
  404792:	d2f9      	bcs.n	404788 <memcpy+0xc0>
  404794:	3204      	adds	r2, #4
  404796:	d008      	beq.n	4047aa <memcpy+0xe2>
  404798:	07d2      	lsls	r2, r2, #31
  40479a:	bf1c      	itt	ne
  40479c:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4047a0:	f800 3b01 	strbne.w	r3, [r0], #1
  4047a4:	d301      	bcc.n	4047aa <memcpy+0xe2>
  4047a6:	880b      	ldrh	r3, [r1, #0]
  4047a8:	8003      	strh	r3, [r0, #0]
  4047aa:	4660      	mov	r0, ip
  4047ac:	4770      	bx	lr
  4047ae:	bf00      	nop
  4047b0:	2a08      	cmp	r2, #8
  4047b2:	d313      	bcc.n	4047dc <memcpy+0x114>
  4047b4:	078b      	lsls	r3, r1, #30
  4047b6:	d08d      	beq.n	4046d4 <memcpy+0xc>
  4047b8:	f010 0303 	ands.w	r3, r0, #3
  4047bc:	d08a      	beq.n	4046d4 <memcpy+0xc>
  4047be:	f1c3 0304 	rsb	r3, r3, #4
  4047c2:	1ad2      	subs	r2, r2, r3
  4047c4:	07db      	lsls	r3, r3, #31
  4047c6:	bf1c      	itt	ne
  4047c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
  4047cc:	f800 3b01 	strbne.w	r3, [r0], #1
  4047d0:	d380      	bcc.n	4046d4 <memcpy+0xc>
  4047d2:	f831 3b02 	ldrh.w	r3, [r1], #2
  4047d6:	f820 3b02 	strh.w	r3, [r0], #2
  4047da:	e77b      	b.n	4046d4 <memcpy+0xc>
  4047dc:	3a04      	subs	r2, #4
  4047de:	d3d9      	bcc.n	404794 <memcpy+0xcc>
  4047e0:	3a01      	subs	r2, #1
  4047e2:	f811 3b01 	ldrb.w	r3, [r1], #1
  4047e6:	f800 3b01 	strb.w	r3, [r0], #1
  4047ea:	d2f9      	bcs.n	4047e0 <memcpy+0x118>
  4047ec:	780b      	ldrb	r3, [r1, #0]
  4047ee:	7003      	strb	r3, [r0, #0]
  4047f0:	784b      	ldrb	r3, [r1, #1]
  4047f2:	7043      	strb	r3, [r0, #1]
  4047f4:	788b      	ldrb	r3, [r1, #2]
  4047f6:	7083      	strb	r3, [r0, #2]
  4047f8:	4660      	mov	r0, ip
  4047fa:	4770      	bx	lr

004047fc <memset>:
  4047fc:	b470      	push	{r4, r5, r6}
  4047fe:	0786      	lsls	r6, r0, #30
  404800:	d046      	beq.n	404890 <memset+0x94>
  404802:	1e54      	subs	r4, r2, #1
  404804:	2a00      	cmp	r2, #0
  404806:	d041      	beq.n	40488c <memset+0x90>
  404808:	b2ca      	uxtb	r2, r1
  40480a:	4603      	mov	r3, r0
  40480c:	e002      	b.n	404814 <memset+0x18>
  40480e:	f114 34ff 	adds.w	r4, r4, #4294967295
  404812:	d33b      	bcc.n	40488c <memset+0x90>
  404814:	f803 2b01 	strb.w	r2, [r3], #1
  404818:	079d      	lsls	r5, r3, #30
  40481a:	d1f8      	bne.n	40480e <memset+0x12>
  40481c:	2c03      	cmp	r4, #3
  40481e:	d92e      	bls.n	40487e <memset+0x82>
  404820:	b2cd      	uxtb	r5, r1
  404822:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
  404826:	2c0f      	cmp	r4, #15
  404828:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
  40482c:	d919      	bls.n	404862 <memset+0x66>
  40482e:	f103 0210 	add.w	r2, r3, #16
  404832:	4626      	mov	r6, r4
  404834:	3e10      	subs	r6, #16
  404836:	2e0f      	cmp	r6, #15
  404838:	f842 5c10 	str.w	r5, [r2, #-16]
  40483c:	f842 5c0c 	str.w	r5, [r2, #-12]
  404840:	f842 5c08 	str.w	r5, [r2, #-8]
  404844:	f842 5c04 	str.w	r5, [r2, #-4]
  404848:	f102 0210 	add.w	r2, r2, #16
  40484c:	d8f2      	bhi.n	404834 <memset+0x38>
  40484e:	f1a4 0210 	sub.w	r2, r4, #16
  404852:	f022 020f 	bic.w	r2, r2, #15
  404856:	f004 040f 	and.w	r4, r4, #15
  40485a:	3210      	adds	r2, #16
  40485c:	2c03      	cmp	r4, #3
  40485e:	4413      	add	r3, r2
  404860:	d90d      	bls.n	40487e <memset+0x82>
  404862:	461e      	mov	r6, r3
  404864:	4622      	mov	r2, r4
  404866:	3a04      	subs	r2, #4
  404868:	2a03      	cmp	r2, #3
  40486a:	f846 5b04 	str.w	r5, [r6], #4
  40486e:	d8fa      	bhi.n	404866 <memset+0x6a>
  404870:	1f22      	subs	r2, r4, #4
  404872:	f022 0203 	bic.w	r2, r2, #3
  404876:	3204      	adds	r2, #4
  404878:	4413      	add	r3, r2
  40487a:	f004 0403 	and.w	r4, r4, #3
  40487e:	b12c      	cbz	r4, 40488c <memset+0x90>
  404880:	b2c9      	uxtb	r1, r1
  404882:	441c      	add	r4, r3
  404884:	f803 1b01 	strb.w	r1, [r3], #1
  404888:	429c      	cmp	r4, r3
  40488a:	d1fb      	bne.n	404884 <memset+0x88>
  40488c:	bc70      	pop	{r4, r5, r6}
  40488e:	4770      	bx	lr
  404890:	4614      	mov	r4, r2
  404892:	4603      	mov	r3, r0
  404894:	e7c2      	b.n	40481c <memset+0x20>
  404896:	bf00      	nop

00404898 <__malloc_lock>:
  404898:	4801      	ldr	r0, [pc, #4]	; (4048a0 <__malloc_lock+0x8>)
  40489a:	f001 bd55 	b.w	406348 <__retarget_lock_acquire_recursive>
  40489e:	bf00      	nop
  4048a0:	2040c808 	.word	0x2040c808

004048a4 <__malloc_unlock>:
  4048a4:	4801      	ldr	r0, [pc, #4]	; (4048ac <__malloc_unlock+0x8>)
  4048a6:	f001 bd51 	b.w	40634c <__retarget_lock_release_recursive>
  4048aa:	bf00      	nop
  4048ac:	2040c808 	.word	0x2040c808

004048b0 <_sbrk_r>:
  4048b0:	b538      	push	{r3, r4, r5, lr}
  4048b2:	4c07      	ldr	r4, [pc, #28]	; (4048d0 <_sbrk_r+0x20>)
  4048b4:	2300      	movs	r3, #0
  4048b6:	4605      	mov	r5, r0
  4048b8:	4608      	mov	r0, r1
  4048ba:	6023      	str	r3, [r4, #0]
  4048bc:	f7fd fa56 	bl	401d6c <_sbrk>
  4048c0:	1c43      	adds	r3, r0, #1
  4048c2:	d000      	beq.n	4048c6 <_sbrk_r+0x16>
  4048c4:	bd38      	pop	{r3, r4, r5, pc}
  4048c6:	6823      	ldr	r3, [r4, #0]
  4048c8:	2b00      	cmp	r3, #0
  4048ca:	d0fb      	beq.n	4048c4 <_sbrk_r+0x14>
  4048cc:	602b      	str	r3, [r5, #0]
  4048ce:	bd38      	pop	{r3, r4, r5, pc}
  4048d0:	2040c81c 	.word	0x2040c81c

004048d4 <setbuf>:
  4048d4:	2900      	cmp	r1, #0
  4048d6:	bf0c      	ite	eq
  4048d8:	2202      	moveq	r2, #2
  4048da:	2200      	movne	r2, #0
  4048dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4048e0:	f000 b800 	b.w	4048e4 <setvbuf>

004048e4 <setvbuf>:
  4048e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  4048e8:	4c61      	ldr	r4, [pc, #388]	; (404a70 <setvbuf+0x18c>)
  4048ea:	6825      	ldr	r5, [r4, #0]
  4048ec:	b083      	sub	sp, #12
  4048ee:	4604      	mov	r4, r0
  4048f0:	460f      	mov	r7, r1
  4048f2:	4690      	mov	r8, r2
  4048f4:	461e      	mov	r6, r3
  4048f6:	b115      	cbz	r5, 4048fe <setvbuf+0x1a>
  4048f8:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4048fa:	2b00      	cmp	r3, #0
  4048fc:	d064      	beq.n	4049c8 <setvbuf+0xe4>
  4048fe:	f1b8 0f02 	cmp.w	r8, #2
  404902:	d006      	beq.n	404912 <setvbuf+0x2e>
  404904:	f1b8 0f01 	cmp.w	r8, #1
  404908:	f200 809f 	bhi.w	404a4a <setvbuf+0x166>
  40490c:	2e00      	cmp	r6, #0
  40490e:	f2c0 809c 	blt.w	404a4a <setvbuf+0x166>
  404912:	6e63      	ldr	r3, [r4, #100]	; 0x64
  404914:	07d8      	lsls	r0, r3, #31
  404916:	d534      	bpl.n	404982 <setvbuf+0x9e>
  404918:	4621      	mov	r1, r4
  40491a:	4628      	mov	r0, r5
  40491c:	f001 f8fc 	bl	405b18 <_fflush_r>
  404920:	6b21      	ldr	r1, [r4, #48]	; 0x30
  404922:	b141      	cbz	r1, 404936 <setvbuf+0x52>
  404924:	f104 0340 	add.w	r3, r4, #64	; 0x40
  404928:	4299      	cmp	r1, r3
  40492a:	d002      	beq.n	404932 <setvbuf+0x4e>
  40492c:	4628      	mov	r0, r5
  40492e:	f001 fa71 	bl	405e14 <_free_r>
  404932:	2300      	movs	r3, #0
  404934:	6323      	str	r3, [r4, #48]	; 0x30
  404936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40493a:	2200      	movs	r2, #0
  40493c:	61a2      	str	r2, [r4, #24]
  40493e:	6062      	str	r2, [r4, #4]
  404940:	061a      	lsls	r2, r3, #24
  404942:	d43a      	bmi.n	4049ba <setvbuf+0xd6>
  404944:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
  404948:	f023 0303 	bic.w	r3, r3, #3
  40494c:	f1b8 0f02 	cmp.w	r8, #2
  404950:	81a3      	strh	r3, [r4, #12]
  404952:	d01d      	beq.n	404990 <setvbuf+0xac>
  404954:	ab01      	add	r3, sp, #4
  404956:	466a      	mov	r2, sp
  404958:	4621      	mov	r1, r4
  40495a:	4628      	mov	r0, r5
  40495c:	f001 fcf8 	bl	406350 <__swhatbuf_r>
  404960:	89a3      	ldrh	r3, [r4, #12]
  404962:	4318      	orrs	r0, r3
  404964:	81a0      	strh	r0, [r4, #12]
  404966:	2e00      	cmp	r6, #0
  404968:	d132      	bne.n	4049d0 <setvbuf+0xec>
  40496a:	9e00      	ldr	r6, [sp, #0]
  40496c:	4630      	mov	r0, r6
  40496e:	f7ff fbf3 	bl	404158 <malloc>
  404972:	4607      	mov	r7, r0
  404974:	2800      	cmp	r0, #0
  404976:	d06b      	beq.n	404a50 <setvbuf+0x16c>
  404978:	89a3      	ldrh	r3, [r4, #12]
  40497a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  40497e:	81a3      	strh	r3, [r4, #12]
  404980:	e028      	b.n	4049d4 <setvbuf+0xf0>
  404982:	89a3      	ldrh	r3, [r4, #12]
  404984:	0599      	lsls	r1, r3, #22
  404986:	d4c7      	bmi.n	404918 <setvbuf+0x34>
  404988:	6da0      	ldr	r0, [r4, #88]	; 0x58
  40498a:	f001 fcdd 	bl	406348 <__retarget_lock_acquire_recursive>
  40498e:	e7c3      	b.n	404918 <setvbuf+0x34>
  404990:	2500      	movs	r5, #0
  404992:	6e61      	ldr	r1, [r4, #100]	; 0x64
  404994:	2600      	movs	r6, #0
  404996:	f104 0243 	add.w	r2, r4, #67	; 0x43
  40499a:	f043 0302 	orr.w	r3, r3, #2
  40499e:	2001      	movs	r0, #1
  4049a0:	60a6      	str	r6, [r4, #8]
  4049a2:	07ce      	lsls	r6, r1, #31
  4049a4:	81a3      	strh	r3, [r4, #12]
  4049a6:	6022      	str	r2, [r4, #0]
  4049a8:	6122      	str	r2, [r4, #16]
  4049aa:	6160      	str	r0, [r4, #20]
  4049ac:	d401      	bmi.n	4049b2 <setvbuf+0xce>
  4049ae:	0598      	lsls	r0, r3, #22
  4049b0:	d53e      	bpl.n	404a30 <setvbuf+0x14c>
  4049b2:	4628      	mov	r0, r5
  4049b4:	b003      	add	sp, #12
  4049b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  4049ba:	6921      	ldr	r1, [r4, #16]
  4049bc:	4628      	mov	r0, r5
  4049be:	f001 fa29 	bl	405e14 <_free_r>
  4049c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4049c6:	e7bd      	b.n	404944 <setvbuf+0x60>
  4049c8:	4628      	mov	r0, r5
  4049ca:	f001 f8fd 	bl	405bc8 <__sinit>
  4049ce:	e796      	b.n	4048fe <setvbuf+0x1a>
  4049d0:	2f00      	cmp	r7, #0
  4049d2:	d0cb      	beq.n	40496c <setvbuf+0x88>
  4049d4:	6bab      	ldr	r3, [r5, #56]	; 0x38
  4049d6:	2b00      	cmp	r3, #0
  4049d8:	d033      	beq.n	404a42 <setvbuf+0x15e>
  4049da:	9b00      	ldr	r3, [sp, #0]
  4049dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4049e0:	6027      	str	r7, [r4, #0]
  4049e2:	429e      	cmp	r6, r3
  4049e4:	bf1c      	itt	ne
  4049e6:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
  4049ea:	81a2      	strhne	r2, [r4, #12]
  4049ec:	f1b8 0f01 	cmp.w	r8, #1
  4049f0:	bf04      	itt	eq
  4049f2:	f042 0201 	orreq.w	r2, r2, #1
  4049f6:	81a2      	strheq	r2, [r4, #12]
  4049f8:	b292      	uxth	r2, r2
  4049fa:	f012 0308 	ands.w	r3, r2, #8
  4049fe:	6127      	str	r7, [r4, #16]
  404a00:	6166      	str	r6, [r4, #20]
  404a02:	d00e      	beq.n	404a22 <setvbuf+0x13e>
  404a04:	07d1      	lsls	r1, r2, #31
  404a06:	d51a      	bpl.n	404a3e <setvbuf+0x15a>
  404a08:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404a0a:	4276      	negs	r6, r6
  404a0c:	2300      	movs	r3, #0
  404a0e:	f015 0501 	ands.w	r5, r5, #1
  404a12:	61a6      	str	r6, [r4, #24]
  404a14:	60a3      	str	r3, [r4, #8]
  404a16:	d009      	beq.n	404a2c <setvbuf+0x148>
  404a18:	2500      	movs	r5, #0
  404a1a:	4628      	mov	r0, r5
  404a1c:	b003      	add	sp, #12
  404a1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404a22:	60a3      	str	r3, [r4, #8]
  404a24:	6e65      	ldr	r5, [r4, #100]	; 0x64
  404a26:	f015 0501 	ands.w	r5, r5, #1
  404a2a:	d1f5      	bne.n	404a18 <setvbuf+0x134>
  404a2c:	0593      	lsls	r3, r2, #22
  404a2e:	d4c0      	bmi.n	4049b2 <setvbuf+0xce>
  404a30:	6da0      	ldr	r0, [r4, #88]	; 0x58
  404a32:	f001 fc8b 	bl	40634c <__retarget_lock_release_recursive>
  404a36:	4628      	mov	r0, r5
  404a38:	b003      	add	sp, #12
  404a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  404a3e:	60a6      	str	r6, [r4, #8]
  404a40:	e7f0      	b.n	404a24 <setvbuf+0x140>
  404a42:	4628      	mov	r0, r5
  404a44:	f001 f8c0 	bl	405bc8 <__sinit>
  404a48:	e7c7      	b.n	4049da <setvbuf+0xf6>
  404a4a:	f04f 35ff 	mov.w	r5, #4294967295
  404a4e:	e7b0      	b.n	4049b2 <setvbuf+0xce>
  404a50:	f8dd 9000 	ldr.w	r9, [sp]
  404a54:	45b1      	cmp	r9, r6
  404a56:	d004      	beq.n	404a62 <setvbuf+0x17e>
  404a58:	4648      	mov	r0, r9
  404a5a:	f7ff fb7d 	bl	404158 <malloc>
  404a5e:	4607      	mov	r7, r0
  404a60:	b920      	cbnz	r0, 404a6c <setvbuf+0x188>
  404a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  404a66:	f04f 35ff 	mov.w	r5, #4294967295
  404a6a:	e792      	b.n	404992 <setvbuf+0xae>
  404a6c:	464e      	mov	r6, r9
  404a6e:	e783      	b.n	404978 <setvbuf+0x94>
  404a70:	20400018 	.word	0x20400018
	...

00404a80 <strlen>:
  404a80:	f890 f000 	pld	[r0]
  404a84:	e96d 4502 	strd	r4, r5, [sp, #-8]!
  404a88:	f020 0107 	bic.w	r1, r0, #7
  404a8c:	f06f 0c00 	mvn.w	ip, #0
  404a90:	f010 0407 	ands.w	r4, r0, #7
  404a94:	f891 f020 	pld	[r1, #32]
  404a98:	f040 8049 	bne.w	404b2e <strlen+0xae>
  404a9c:	f04f 0400 	mov.w	r4, #0
  404aa0:	f06f 0007 	mvn.w	r0, #7
  404aa4:	e9d1 2300 	ldrd	r2, r3, [r1]
  404aa8:	f891 f040 	pld	[r1, #64]	; 0x40
  404aac:	f100 0008 	add.w	r0, r0, #8
  404ab0:	fa82 f24c 	uadd8	r2, r2, ip
  404ab4:	faa4 f28c 	sel	r2, r4, ip
  404ab8:	fa83 f34c 	uadd8	r3, r3, ip
  404abc:	faa2 f38c 	sel	r3, r2, ip
  404ac0:	bb4b      	cbnz	r3, 404b16 <strlen+0x96>
  404ac2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
  404ac6:	fa82 f24c 	uadd8	r2, r2, ip
  404aca:	f100 0008 	add.w	r0, r0, #8
  404ace:	faa4 f28c 	sel	r2, r4, ip
  404ad2:	fa83 f34c 	uadd8	r3, r3, ip
  404ad6:	faa2 f38c 	sel	r3, r2, ip
  404ada:	b9e3      	cbnz	r3, 404b16 <strlen+0x96>
  404adc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
  404ae0:	fa82 f24c 	uadd8	r2, r2, ip
  404ae4:	f100 0008 	add.w	r0, r0, #8
  404ae8:	faa4 f28c 	sel	r2, r4, ip
  404aec:	fa83 f34c 	uadd8	r3, r3, ip
  404af0:	faa2 f38c 	sel	r3, r2, ip
  404af4:	b97b      	cbnz	r3, 404b16 <strlen+0x96>
  404af6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  404afa:	f101 0120 	add.w	r1, r1, #32
  404afe:	fa82 f24c 	uadd8	r2, r2, ip
  404b02:	f100 0008 	add.w	r0, r0, #8
  404b06:	faa4 f28c 	sel	r2, r4, ip
  404b0a:	fa83 f34c 	uadd8	r3, r3, ip
  404b0e:	faa2 f38c 	sel	r3, r2, ip
  404b12:	2b00      	cmp	r3, #0
  404b14:	d0c6      	beq.n	404aa4 <strlen+0x24>
  404b16:	2a00      	cmp	r2, #0
  404b18:	bf04      	itt	eq
  404b1a:	3004      	addeq	r0, #4
  404b1c:	461a      	moveq	r2, r3
  404b1e:	ba12      	rev	r2, r2
  404b20:	fab2 f282 	clz	r2, r2
  404b24:	e8fd 4502 	ldrd	r4, r5, [sp], #8
  404b28:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
  404b2c:	4770      	bx	lr
  404b2e:	e9d1 2300 	ldrd	r2, r3, [r1]
  404b32:	f004 0503 	and.w	r5, r4, #3
  404b36:	f1c4 0000 	rsb	r0, r4, #0
  404b3a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
  404b3e:	f014 0f04 	tst.w	r4, #4
  404b42:	f891 f040 	pld	[r1, #64]	; 0x40
  404b46:	fa0c f505 	lsl.w	r5, ip, r5
  404b4a:	ea62 0205 	orn	r2, r2, r5
  404b4e:	bf1c      	itt	ne
  404b50:	ea63 0305 	ornne	r3, r3, r5
  404b54:	4662      	movne	r2, ip
  404b56:	f04f 0400 	mov.w	r4, #0
  404b5a:	e7a9      	b.n	404ab0 <strlen+0x30>

00404b5c <__sprint_r.part.0>:
  404b5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404b60:	6e4b      	ldr	r3, [r1, #100]	; 0x64
  404b62:	049c      	lsls	r4, r3, #18
  404b64:	4693      	mov	fp, r2
  404b66:	d52f      	bpl.n	404bc8 <__sprint_r.part.0+0x6c>
  404b68:	6893      	ldr	r3, [r2, #8]
  404b6a:	6812      	ldr	r2, [r2, #0]
  404b6c:	b353      	cbz	r3, 404bc4 <__sprint_r.part.0+0x68>
  404b6e:	460e      	mov	r6, r1
  404b70:	4607      	mov	r7, r0
  404b72:	f102 0908 	add.w	r9, r2, #8
  404b76:	e919 0420 	ldmdb	r9, {r5, sl}
  404b7a:	ea5f 089a 	movs.w	r8, sl, lsr #2
  404b7e:	d017      	beq.n	404bb0 <__sprint_r.part.0+0x54>
  404b80:	3d04      	subs	r5, #4
  404b82:	2400      	movs	r4, #0
  404b84:	e001      	b.n	404b8a <__sprint_r.part.0+0x2e>
  404b86:	45a0      	cmp	r8, r4
  404b88:	d010      	beq.n	404bac <__sprint_r.part.0+0x50>
  404b8a:	4632      	mov	r2, r6
  404b8c:	f855 1f04 	ldr.w	r1, [r5, #4]!
  404b90:	4638      	mov	r0, r7
  404b92:	f001 f8bb 	bl	405d0c <_fputwc_r>
  404b96:	1c43      	adds	r3, r0, #1
  404b98:	f104 0401 	add.w	r4, r4, #1
  404b9c:	d1f3      	bne.n	404b86 <__sprint_r.part.0+0x2a>
  404b9e:	2300      	movs	r3, #0
  404ba0:	f8cb 3008 	str.w	r3, [fp, #8]
  404ba4:	f8cb 3004 	str.w	r3, [fp, #4]
  404ba8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bac:	f8db 3008 	ldr.w	r3, [fp, #8]
  404bb0:	f02a 0a03 	bic.w	sl, sl, #3
  404bb4:	eba3 030a 	sub.w	r3, r3, sl
  404bb8:	f8cb 3008 	str.w	r3, [fp, #8]
  404bbc:	f109 0908 	add.w	r9, r9, #8
  404bc0:	2b00      	cmp	r3, #0
  404bc2:	d1d8      	bne.n	404b76 <__sprint_r.part.0+0x1a>
  404bc4:	2000      	movs	r0, #0
  404bc6:	e7ea      	b.n	404b9e <__sprint_r.part.0+0x42>
  404bc8:	f001 fa0a 	bl	405fe0 <__sfvwrite_r>
  404bcc:	2300      	movs	r3, #0
  404bce:	f8cb 3008 	str.w	r3, [fp, #8]
  404bd2:	f8cb 3004 	str.w	r3, [fp, #4]
  404bd6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404bda:	bf00      	nop

00404bdc <_vfiprintf_r>:
  404bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  404be0:	b0ad      	sub	sp, #180	; 0xb4
  404be2:	461d      	mov	r5, r3
  404be4:	468b      	mov	fp, r1
  404be6:	4690      	mov	r8, r2
  404be8:	9307      	str	r3, [sp, #28]
  404bea:	9006      	str	r0, [sp, #24]
  404bec:	b118      	cbz	r0, 404bf6 <_vfiprintf_r+0x1a>
  404bee:	6b83      	ldr	r3, [r0, #56]	; 0x38
  404bf0:	2b00      	cmp	r3, #0
  404bf2:	f000 80f3 	beq.w	404ddc <_vfiprintf_r+0x200>
  404bf6:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404bfa:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404bfe:	07df      	lsls	r7, r3, #31
  404c00:	b281      	uxth	r1, r0
  404c02:	d402      	bmi.n	404c0a <_vfiprintf_r+0x2e>
  404c04:	058e      	lsls	r6, r1, #22
  404c06:	f140 80fc 	bpl.w	404e02 <_vfiprintf_r+0x226>
  404c0a:	048c      	lsls	r4, r1, #18
  404c0c:	d40a      	bmi.n	404c24 <_vfiprintf_r+0x48>
  404c0e:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404c12:	f440 5100 	orr.w	r1, r0, #8192	; 0x2000
  404c16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  404c1a:	f8ab 100c 	strh.w	r1, [fp, #12]
  404c1e:	f8cb 3064 	str.w	r3, [fp, #100]	; 0x64
  404c22:	b289      	uxth	r1, r1
  404c24:	0708      	lsls	r0, r1, #28
  404c26:	f140 80b3 	bpl.w	404d90 <_vfiprintf_r+0x1b4>
  404c2a:	f8db 3010 	ldr.w	r3, [fp, #16]
  404c2e:	2b00      	cmp	r3, #0
  404c30:	f000 80ae 	beq.w	404d90 <_vfiprintf_r+0x1b4>
  404c34:	f001 031a 	and.w	r3, r1, #26
  404c38:	2b0a      	cmp	r3, #10
  404c3a:	f000 80b5 	beq.w	404da8 <_vfiprintf_r+0x1cc>
  404c3e:	2300      	movs	r3, #0
  404c40:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  404c44:	930b      	str	r3, [sp, #44]	; 0x2c
  404c46:	9311      	str	r3, [sp, #68]	; 0x44
  404c48:	9310      	str	r3, [sp, #64]	; 0x40
  404c4a:	9303      	str	r3, [sp, #12]
  404c4c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
  404c50:	46ca      	mov	sl, r9
  404c52:	f8cd b010 	str.w	fp, [sp, #16]
  404c56:	f898 3000 	ldrb.w	r3, [r8]
  404c5a:	4644      	mov	r4, r8
  404c5c:	b1fb      	cbz	r3, 404c9e <_vfiprintf_r+0xc2>
  404c5e:	2b25      	cmp	r3, #37	; 0x25
  404c60:	d102      	bne.n	404c68 <_vfiprintf_r+0x8c>
  404c62:	e01c      	b.n	404c9e <_vfiprintf_r+0xc2>
  404c64:	2b25      	cmp	r3, #37	; 0x25
  404c66:	d003      	beq.n	404c70 <_vfiprintf_r+0x94>
  404c68:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  404c6c:	2b00      	cmp	r3, #0
  404c6e:	d1f9      	bne.n	404c64 <_vfiprintf_r+0x88>
  404c70:	eba4 0508 	sub.w	r5, r4, r8
  404c74:	b19d      	cbz	r5, 404c9e <_vfiprintf_r+0xc2>
  404c76:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404c78:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404c7a:	f8ca 8000 	str.w	r8, [sl]
  404c7e:	3301      	adds	r3, #1
  404c80:	442a      	add	r2, r5
  404c82:	2b07      	cmp	r3, #7
  404c84:	f8ca 5004 	str.w	r5, [sl, #4]
  404c88:	9211      	str	r2, [sp, #68]	; 0x44
  404c8a:	9310      	str	r3, [sp, #64]	; 0x40
  404c8c:	dd7a      	ble.n	404d84 <_vfiprintf_r+0x1a8>
  404c8e:	2a00      	cmp	r2, #0
  404c90:	f040 84b0 	bne.w	4055f4 <_vfiprintf_r+0xa18>
  404c94:	9b03      	ldr	r3, [sp, #12]
  404c96:	9210      	str	r2, [sp, #64]	; 0x40
  404c98:	442b      	add	r3, r5
  404c9a:	46ca      	mov	sl, r9
  404c9c:	9303      	str	r3, [sp, #12]
  404c9e:	7823      	ldrb	r3, [r4, #0]
  404ca0:	2b00      	cmp	r3, #0
  404ca2:	f000 83e0 	beq.w	405466 <_vfiprintf_r+0x88a>
  404ca6:	2000      	movs	r0, #0
  404ca8:	f04f 0300 	mov.w	r3, #0
  404cac:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
  404cb0:	f104 0801 	add.w	r8, r4, #1
  404cb4:	7862      	ldrb	r2, [r4, #1]
  404cb6:	4605      	mov	r5, r0
  404cb8:	4606      	mov	r6, r0
  404cba:	4603      	mov	r3, r0
  404cbc:	f04f 34ff 	mov.w	r4, #4294967295
  404cc0:	f108 0801 	add.w	r8, r8, #1
  404cc4:	f1a2 0120 	sub.w	r1, r2, #32
  404cc8:	2958      	cmp	r1, #88	; 0x58
  404cca:	f200 82de 	bhi.w	40528a <_vfiprintf_r+0x6ae>
  404cce:	e8df f011 	tbh	[pc, r1, lsl #1]
  404cd2:	0221      	.short	0x0221
  404cd4:	02dc02dc 	.word	0x02dc02dc
  404cd8:	02dc0229 	.word	0x02dc0229
  404cdc:	02dc02dc 	.word	0x02dc02dc
  404ce0:	02dc02dc 	.word	0x02dc02dc
  404ce4:	028902dc 	.word	0x028902dc
  404ce8:	02dc0295 	.word	0x02dc0295
  404cec:	02bd00a2 	.word	0x02bd00a2
  404cf0:	019f02dc 	.word	0x019f02dc
  404cf4:	01a401a4 	.word	0x01a401a4
  404cf8:	01a401a4 	.word	0x01a401a4
  404cfc:	01a401a4 	.word	0x01a401a4
  404d00:	01a401a4 	.word	0x01a401a4
  404d04:	02dc01a4 	.word	0x02dc01a4
  404d08:	02dc02dc 	.word	0x02dc02dc
  404d0c:	02dc02dc 	.word	0x02dc02dc
  404d10:	02dc02dc 	.word	0x02dc02dc
  404d14:	02dc02dc 	.word	0x02dc02dc
  404d18:	01b202dc 	.word	0x01b202dc
  404d1c:	02dc02dc 	.word	0x02dc02dc
  404d20:	02dc02dc 	.word	0x02dc02dc
  404d24:	02dc02dc 	.word	0x02dc02dc
  404d28:	02dc02dc 	.word	0x02dc02dc
  404d2c:	02dc02dc 	.word	0x02dc02dc
  404d30:	02dc0197 	.word	0x02dc0197
  404d34:	02dc02dc 	.word	0x02dc02dc
  404d38:	02dc02dc 	.word	0x02dc02dc
  404d3c:	02dc019b 	.word	0x02dc019b
  404d40:	025302dc 	.word	0x025302dc
  404d44:	02dc02dc 	.word	0x02dc02dc
  404d48:	02dc02dc 	.word	0x02dc02dc
  404d4c:	02dc02dc 	.word	0x02dc02dc
  404d50:	02dc02dc 	.word	0x02dc02dc
  404d54:	02dc02dc 	.word	0x02dc02dc
  404d58:	021b025a 	.word	0x021b025a
  404d5c:	02dc02dc 	.word	0x02dc02dc
  404d60:	026e02dc 	.word	0x026e02dc
  404d64:	02dc021b 	.word	0x02dc021b
  404d68:	027302dc 	.word	0x027302dc
  404d6c:	01f502dc 	.word	0x01f502dc
  404d70:	02090182 	.word	0x02090182
  404d74:	02dc02d7 	.word	0x02dc02d7
  404d78:	02dc029a 	.word	0x02dc029a
  404d7c:	02dc00a7 	.word	0x02dc00a7
  404d80:	022e02dc 	.word	0x022e02dc
  404d84:	f10a 0a08 	add.w	sl, sl, #8
  404d88:	9b03      	ldr	r3, [sp, #12]
  404d8a:	442b      	add	r3, r5
  404d8c:	9303      	str	r3, [sp, #12]
  404d8e:	e786      	b.n	404c9e <_vfiprintf_r+0xc2>
  404d90:	4659      	mov	r1, fp
  404d92:	9806      	ldr	r0, [sp, #24]
  404d94:	f000 fdac 	bl	4058f0 <__swsetup_r>
  404d98:	bb18      	cbnz	r0, 404de2 <_vfiprintf_r+0x206>
  404d9a:	f8bb 100c 	ldrh.w	r1, [fp, #12]
  404d9e:	f001 031a 	and.w	r3, r1, #26
  404da2:	2b0a      	cmp	r3, #10
  404da4:	f47f af4b 	bne.w	404c3e <_vfiprintf_r+0x62>
  404da8:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
  404dac:	2b00      	cmp	r3, #0
  404dae:	f6ff af46 	blt.w	404c3e <_vfiprintf_r+0x62>
  404db2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404db6:	07db      	lsls	r3, r3, #31
  404db8:	d405      	bmi.n	404dc6 <_vfiprintf_r+0x1ea>
  404dba:	058f      	lsls	r7, r1, #22
  404dbc:	d403      	bmi.n	404dc6 <_vfiprintf_r+0x1ea>
  404dbe:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404dc2:	f001 fac3 	bl	40634c <__retarget_lock_release_recursive>
  404dc6:	462b      	mov	r3, r5
  404dc8:	4642      	mov	r2, r8
  404dca:	4659      	mov	r1, fp
  404dcc:	9806      	ldr	r0, [sp, #24]
  404dce:	f000 fd4d 	bl	40586c <__sbprintf>
  404dd2:	9003      	str	r0, [sp, #12]
  404dd4:	9803      	ldr	r0, [sp, #12]
  404dd6:	b02d      	add	sp, #180	; 0xb4
  404dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404ddc:	f000 fef4 	bl	405bc8 <__sinit>
  404de0:	e709      	b.n	404bf6 <_vfiprintf_r+0x1a>
  404de2:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  404de6:	07d9      	lsls	r1, r3, #31
  404de8:	d404      	bmi.n	404df4 <_vfiprintf_r+0x218>
  404dea:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  404dee:	059a      	lsls	r2, r3, #22
  404df0:	f140 84aa 	bpl.w	405748 <_vfiprintf_r+0xb6c>
  404df4:	f04f 33ff 	mov.w	r3, #4294967295
  404df8:	9303      	str	r3, [sp, #12]
  404dfa:	9803      	ldr	r0, [sp, #12]
  404dfc:	b02d      	add	sp, #180	; 0xb4
  404dfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  404e02:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  404e06:	f001 fa9f 	bl	406348 <__retarget_lock_acquire_recursive>
  404e0a:	f9bb 000c 	ldrsh.w	r0, [fp, #12]
  404e0e:	b281      	uxth	r1, r0
  404e10:	e6fb      	b.n	404c0a <_vfiprintf_r+0x2e>
  404e12:	4276      	negs	r6, r6
  404e14:	9207      	str	r2, [sp, #28]
  404e16:	f043 0304 	orr.w	r3, r3, #4
  404e1a:	f898 2000 	ldrb.w	r2, [r8]
  404e1e:	e74f      	b.n	404cc0 <_vfiprintf_r+0xe4>
  404e20:	9608      	str	r6, [sp, #32]
  404e22:	069e      	lsls	r6, r3, #26
  404e24:	f100 8450 	bmi.w	4056c8 <_vfiprintf_r+0xaec>
  404e28:	9907      	ldr	r1, [sp, #28]
  404e2a:	06dd      	lsls	r5, r3, #27
  404e2c:	460a      	mov	r2, r1
  404e2e:	f100 83ef 	bmi.w	405610 <_vfiprintf_r+0xa34>
  404e32:	0658      	lsls	r0, r3, #25
  404e34:	f140 83ec 	bpl.w	405610 <_vfiprintf_r+0xa34>
  404e38:	880e      	ldrh	r6, [r1, #0]
  404e3a:	3104      	adds	r1, #4
  404e3c:	2700      	movs	r7, #0
  404e3e:	2201      	movs	r2, #1
  404e40:	9107      	str	r1, [sp, #28]
  404e42:	f04f 0100 	mov.w	r1, #0
  404e46:	f88d 1037 	strb.w	r1, [sp, #55]	; 0x37
  404e4a:	2500      	movs	r5, #0
  404e4c:	1c61      	adds	r1, r4, #1
  404e4e:	f000 8116 	beq.w	40507e <_vfiprintf_r+0x4a2>
  404e52:	f023 0180 	bic.w	r1, r3, #128	; 0x80
  404e56:	9102      	str	r1, [sp, #8]
  404e58:	ea56 0107 	orrs.w	r1, r6, r7
  404e5c:	f040 8114 	bne.w	405088 <_vfiprintf_r+0x4ac>
  404e60:	2c00      	cmp	r4, #0
  404e62:	f040 835c 	bne.w	40551e <_vfiprintf_r+0x942>
  404e66:	2a00      	cmp	r2, #0
  404e68:	f040 83b7 	bne.w	4055da <_vfiprintf_r+0x9fe>
  404e6c:	f013 0301 	ands.w	r3, r3, #1
  404e70:	9305      	str	r3, [sp, #20]
  404e72:	f000 8457 	beq.w	405724 <_vfiprintf_r+0xb48>
  404e76:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  404e7a:	2330      	movs	r3, #48	; 0x30
  404e7c:	f80b 3d41 	strb.w	r3, [fp, #-65]!
  404e80:	9b05      	ldr	r3, [sp, #20]
  404e82:	42a3      	cmp	r3, r4
  404e84:	bfb8      	it	lt
  404e86:	4623      	movlt	r3, r4
  404e88:	9301      	str	r3, [sp, #4]
  404e8a:	b10d      	cbz	r5, 404e90 <_vfiprintf_r+0x2b4>
  404e8c:	3301      	adds	r3, #1
  404e8e:	9301      	str	r3, [sp, #4]
  404e90:	9b02      	ldr	r3, [sp, #8]
  404e92:	f013 0302 	ands.w	r3, r3, #2
  404e96:	9309      	str	r3, [sp, #36]	; 0x24
  404e98:	d002      	beq.n	404ea0 <_vfiprintf_r+0x2c4>
  404e9a:	9b01      	ldr	r3, [sp, #4]
  404e9c:	3302      	adds	r3, #2
  404e9e:	9301      	str	r3, [sp, #4]
  404ea0:	9b02      	ldr	r3, [sp, #8]
  404ea2:	f013 0384 	ands.w	r3, r3, #132	; 0x84
  404ea6:	930a      	str	r3, [sp, #40]	; 0x28
  404ea8:	f040 8217 	bne.w	4052da <_vfiprintf_r+0x6fe>
  404eac:	9b08      	ldr	r3, [sp, #32]
  404eae:	9a01      	ldr	r2, [sp, #4]
  404eb0:	1a9d      	subs	r5, r3, r2
  404eb2:	2d00      	cmp	r5, #0
  404eb4:	f340 8211 	ble.w	4052da <_vfiprintf_r+0x6fe>
  404eb8:	2d10      	cmp	r5, #16
  404eba:	f340 8490 	ble.w	4057de <_vfiprintf_r+0xc02>
  404ebe:	9b10      	ldr	r3, [sp, #64]	; 0x40
  404ec0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  404ec2:	4ec4      	ldr	r6, [pc, #784]	; (4051d4 <_vfiprintf_r+0x5f8>)
  404ec4:	46d6      	mov	lr, sl
  404ec6:	2710      	movs	r7, #16
  404ec8:	46a2      	mov	sl, r4
  404eca:	4619      	mov	r1, r3
  404ecc:	9c06      	ldr	r4, [sp, #24]
  404ece:	e007      	b.n	404ee0 <_vfiprintf_r+0x304>
  404ed0:	f101 0c02 	add.w	ip, r1, #2
  404ed4:	f10e 0e08 	add.w	lr, lr, #8
  404ed8:	4601      	mov	r1, r0
  404eda:	3d10      	subs	r5, #16
  404edc:	2d10      	cmp	r5, #16
  404ede:	dd11      	ble.n	404f04 <_vfiprintf_r+0x328>
  404ee0:	1c48      	adds	r0, r1, #1
  404ee2:	3210      	adds	r2, #16
  404ee4:	2807      	cmp	r0, #7
  404ee6:	9211      	str	r2, [sp, #68]	; 0x44
  404ee8:	e88e 00c0 	stmia.w	lr, {r6, r7}
  404eec:	9010      	str	r0, [sp, #64]	; 0x40
  404eee:	ddef      	ble.n	404ed0 <_vfiprintf_r+0x2f4>
  404ef0:	2a00      	cmp	r2, #0
  404ef2:	f040 81e4 	bne.w	4052be <_vfiprintf_r+0x6e2>
  404ef6:	3d10      	subs	r5, #16
  404ef8:	2d10      	cmp	r5, #16
  404efa:	4611      	mov	r1, r2
  404efc:	f04f 0c01 	mov.w	ip, #1
  404f00:	46ce      	mov	lr, r9
  404f02:	dced      	bgt.n	404ee0 <_vfiprintf_r+0x304>
  404f04:	4654      	mov	r4, sl
  404f06:	4661      	mov	r1, ip
  404f08:	46f2      	mov	sl, lr
  404f0a:	442a      	add	r2, r5
  404f0c:	2907      	cmp	r1, #7
  404f0e:	9211      	str	r2, [sp, #68]	; 0x44
  404f10:	f8ca 6000 	str.w	r6, [sl]
  404f14:	f8ca 5004 	str.w	r5, [sl, #4]
  404f18:	9110      	str	r1, [sp, #64]	; 0x40
  404f1a:	f300 82ec 	bgt.w	4054f6 <_vfiprintf_r+0x91a>
  404f1e:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  404f22:	f10a 0a08 	add.w	sl, sl, #8
  404f26:	1c48      	adds	r0, r1, #1
  404f28:	2d00      	cmp	r5, #0
  404f2a:	f040 81de 	bne.w	4052ea <_vfiprintf_r+0x70e>
  404f2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
  404f30:	2b00      	cmp	r3, #0
  404f32:	f000 81f8 	beq.w	405326 <_vfiprintf_r+0x74a>
  404f36:	3202      	adds	r2, #2
  404f38:	a90e      	add	r1, sp, #56	; 0x38
  404f3a:	2302      	movs	r3, #2
  404f3c:	2807      	cmp	r0, #7
  404f3e:	9211      	str	r2, [sp, #68]	; 0x44
  404f40:	9010      	str	r0, [sp, #64]	; 0x40
  404f42:	e88a 000a 	stmia.w	sl, {r1, r3}
  404f46:	f340 81ea 	ble.w	40531e <_vfiprintf_r+0x742>
  404f4a:	2a00      	cmp	r2, #0
  404f4c:	f040 838c 	bne.w	405668 <_vfiprintf_r+0xa8c>
  404f50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  404f52:	2b80      	cmp	r3, #128	; 0x80
  404f54:	f04f 0001 	mov.w	r0, #1
  404f58:	4611      	mov	r1, r2
  404f5a:	46ca      	mov	sl, r9
  404f5c:	f040 81e7 	bne.w	40532e <_vfiprintf_r+0x752>
  404f60:	9b08      	ldr	r3, [sp, #32]
  404f62:	9d01      	ldr	r5, [sp, #4]
  404f64:	1b5e      	subs	r6, r3, r5
  404f66:	2e00      	cmp	r6, #0
  404f68:	f340 81e1 	ble.w	40532e <_vfiprintf_r+0x752>
  404f6c:	2e10      	cmp	r6, #16
  404f6e:	4d9a      	ldr	r5, [pc, #616]	; (4051d8 <_vfiprintf_r+0x5fc>)
  404f70:	f340 8450 	ble.w	405814 <_vfiprintf_r+0xc38>
  404f74:	46d4      	mov	ip, sl
  404f76:	2710      	movs	r7, #16
  404f78:	46a2      	mov	sl, r4
  404f7a:	9c06      	ldr	r4, [sp, #24]
  404f7c:	e007      	b.n	404f8e <_vfiprintf_r+0x3b2>
  404f7e:	f101 0e02 	add.w	lr, r1, #2
  404f82:	f10c 0c08 	add.w	ip, ip, #8
  404f86:	4601      	mov	r1, r0
  404f88:	3e10      	subs	r6, #16
  404f8a:	2e10      	cmp	r6, #16
  404f8c:	dd11      	ble.n	404fb2 <_vfiprintf_r+0x3d6>
  404f8e:	1c48      	adds	r0, r1, #1
  404f90:	3210      	adds	r2, #16
  404f92:	2807      	cmp	r0, #7
  404f94:	9211      	str	r2, [sp, #68]	; 0x44
  404f96:	e88c 00a0 	stmia.w	ip, {r5, r7}
  404f9a:	9010      	str	r0, [sp, #64]	; 0x40
  404f9c:	ddef      	ble.n	404f7e <_vfiprintf_r+0x3a2>
  404f9e:	2a00      	cmp	r2, #0
  404fa0:	f040 829d 	bne.w	4054de <_vfiprintf_r+0x902>
  404fa4:	3e10      	subs	r6, #16
  404fa6:	2e10      	cmp	r6, #16
  404fa8:	f04f 0e01 	mov.w	lr, #1
  404fac:	4611      	mov	r1, r2
  404fae:	46cc      	mov	ip, r9
  404fb0:	dced      	bgt.n	404f8e <_vfiprintf_r+0x3b2>
  404fb2:	4654      	mov	r4, sl
  404fb4:	46e2      	mov	sl, ip
  404fb6:	4432      	add	r2, r6
  404fb8:	f1be 0f07 	cmp.w	lr, #7
  404fbc:	9211      	str	r2, [sp, #68]	; 0x44
  404fbe:	e88a 0060 	stmia.w	sl, {r5, r6}
  404fc2:	f8cd e040 	str.w	lr, [sp, #64]	; 0x40
  404fc6:	f300 8369 	bgt.w	40569c <_vfiprintf_r+0xac0>
  404fca:	f10a 0a08 	add.w	sl, sl, #8
  404fce:	f10e 0001 	add.w	r0, lr, #1
  404fd2:	4671      	mov	r1, lr
  404fd4:	e1ab      	b.n	40532e <_vfiprintf_r+0x752>
  404fd6:	9608      	str	r6, [sp, #32]
  404fd8:	f013 0220 	ands.w	r2, r3, #32
  404fdc:	f040 838c 	bne.w	4056f8 <_vfiprintf_r+0xb1c>
  404fe0:	f013 0110 	ands.w	r1, r3, #16
  404fe4:	f040 831a 	bne.w	40561c <_vfiprintf_r+0xa40>
  404fe8:	f013 0240 	ands.w	r2, r3, #64	; 0x40
  404fec:	f000 8316 	beq.w	40561c <_vfiprintf_r+0xa40>
  404ff0:	9807      	ldr	r0, [sp, #28]
  404ff2:	460a      	mov	r2, r1
  404ff4:	4601      	mov	r1, r0
  404ff6:	3104      	adds	r1, #4
  404ff8:	8806      	ldrh	r6, [r0, #0]
  404ffa:	9107      	str	r1, [sp, #28]
  404ffc:	2700      	movs	r7, #0
  404ffe:	e720      	b.n	404e42 <_vfiprintf_r+0x266>
  405000:	9608      	str	r6, [sp, #32]
  405002:	f043 0310 	orr.w	r3, r3, #16
  405006:	e7e7      	b.n	404fd8 <_vfiprintf_r+0x3fc>
  405008:	9608      	str	r6, [sp, #32]
  40500a:	f043 0310 	orr.w	r3, r3, #16
  40500e:	e708      	b.n	404e22 <_vfiprintf_r+0x246>
  405010:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  405014:	f898 2000 	ldrb.w	r2, [r8]
  405018:	e652      	b.n	404cc0 <_vfiprintf_r+0xe4>
  40501a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40501e:	2600      	movs	r6, #0
  405020:	f818 2b01 	ldrb.w	r2, [r8], #1
  405024:	eb06 0686 	add.w	r6, r6, r6, lsl #2
  405028:	eb01 0646 	add.w	r6, r1, r6, lsl #1
  40502c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  405030:	2909      	cmp	r1, #9
  405032:	d9f5      	bls.n	405020 <_vfiprintf_r+0x444>
  405034:	e646      	b.n	404cc4 <_vfiprintf_r+0xe8>
  405036:	9608      	str	r6, [sp, #32]
  405038:	2800      	cmp	r0, #0
  40503a:	f040 8408 	bne.w	40584e <_vfiprintf_r+0xc72>
  40503e:	f043 0310 	orr.w	r3, r3, #16
  405042:	069e      	lsls	r6, r3, #26
  405044:	f100 834c 	bmi.w	4056e0 <_vfiprintf_r+0xb04>
  405048:	06dd      	lsls	r5, r3, #27
  40504a:	f100 82f3 	bmi.w	405634 <_vfiprintf_r+0xa58>
  40504e:	0658      	lsls	r0, r3, #25
  405050:	f140 82f0 	bpl.w	405634 <_vfiprintf_r+0xa58>
  405054:	9d07      	ldr	r5, [sp, #28]
  405056:	f9b5 6000 	ldrsh.w	r6, [r5]
  40505a:	462a      	mov	r2, r5
  40505c:	17f7      	asrs	r7, r6, #31
  40505e:	3204      	adds	r2, #4
  405060:	4630      	mov	r0, r6
  405062:	4639      	mov	r1, r7
  405064:	9207      	str	r2, [sp, #28]
  405066:	2800      	cmp	r0, #0
  405068:	f171 0200 	sbcs.w	r2, r1, #0
  40506c:	f2c0 835d 	blt.w	40572a <_vfiprintf_r+0xb4e>
  405070:	1c61      	adds	r1, r4, #1
  405072:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405076:	f04f 0201 	mov.w	r2, #1
  40507a:	f47f aeea 	bne.w	404e52 <_vfiprintf_r+0x276>
  40507e:	ea56 0107 	orrs.w	r1, r6, r7
  405082:	f000 824d 	beq.w	405520 <_vfiprintf_r+0x944>
  405086:	9302      	str	r3, [sp, #8]
  405088:	2a01      	cmp	r2, #1
  40508a:	f000 828c 	beq.w	4055a6 <_vfiprintf_r+0x9ca>
  40508e:	2a02      	cmp	r2, #2
  405090:	f040 825c 	bne.w	40554c <_vfiprintf_r+0x970>
  405094:	980b      	ldr	r0, [sp, #44]	; 0x2c
  405096:	46cb      	mov	fp, r9
  405098:	0933      	lsrs	r3, r6, #4
  40509a:	f006 010f 	and.w	r1, r6, #15
  40509e:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
  4050a2:	093a      	lsrs	r2, r7, #4
  4050a4:	461e      	mov	r6, r3
  4050a6:	4617      	mov	r7, r2
  4050a8:	5c43      	ldrb	r3, [r0, r1]
  4050aa:	f80b 3d01 	strb.w	r3, [fp, #-1]!
  4050ae:	ea56 0307 	orrs.w	r3, r6, r7
  4050b2:	d1f1      	bne.n	405098 <_vfiprintf_r+0x4bc>
  4050b4:	eba9 030b 	sub.w	r3, r9, fp
  4050b8:	9305      	str	r3, [sp, #20]
  4050ba:	e6e1      	b.n	404e80 <_vfiprintf_r+0x2a4>
  4050bc:	2800      	cmp	r0, #0
  4050be:	f040 83c0 	bne.w	405842 <_vfiprintf_r+0xc66>
  4050c2:	0699      	lsls	r1, r3, #26
  4050c4:	f100 8367 	bmi.w	405796 <_vfiprintf_r+0xbba>
  4050c8:	06da      	lsls	r2, r3, #27
  4050ca:	f100 80f1 	bmi.w	4052b0 <_vfiprintf_r+0x6d4>
  4050ce:	065b      	lsls	r3, r3, #25
  4050d0:	f140 80ee 	bpl.w	4052b0 <_vfiprintf_r+0x6d4>
  4050d4:	9a07      	ldr	r2, [sp, #28]
  4050d6:	6813      	ldr	r3, [r2, #0]
  4050d8:	3204      	adds	r2, #4
  4050da:	9207      	str	r2, [sp, #28]
  4050dc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
  4050e0:	801a      	strh	r2, [r3, #0]
  4050e2:	e5b8      	b.n	404c56 <_vfiprintf_r+0x7a>
  4050e4:	9807      	ldr	r0, [sp, #28]
  4050e6:	4a3d      	ldr	r2, [pc, #244]	; (4051dc <_vfiprintf_r+0x600>)
  4050e8:	9608      	str	r6, [sp, #32]
  4050ea:	920b      	str	r2, [sp, #44]	; 0x2c
  4050ec:	6806      	ldr	r6, [r0, #0]
  4050ee:	2278      	movs	r2, #120	; 0x78
  4050f0:	2130      	movs	r1, #48	; 0x30
  4050f2:	3004      	adds	r0, #4
  4050f4:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  4050f8:	f043 0302 	orr.w	r3, r3, #2
  4050fc:	9007      	str	r0, [sp, #28]
  4050fe:	2700      	movs	r7, #0
  405100:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405104:	2202      	movs	r2, #2
  405106:	e69c      	b.n	404e42 <_vfiprintf_r+0x266>
  405108:	9608      	str	r6, [sp, #32]
  40510a:	2800      	cmp	r0, #0
  40510c:	d099      	beq.n	405042 <_vfiprintf_r+0x466>
  40510e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405112:	e796      	b.n	405042 <_vfiprintf_r+0x466>
  405114:	f898 2000 	ldrb.w	r2, [r8]
  405118:	2d00      	cmp	r5, #0
  40511a:	f47f add1 	bne.w	404cc0 <_vfiprintf_r+0xe4>
  40511e:	2001      	movs	r0, #1
  405120:	2520      	movs	r5, #32
  405122:	e5cd      	b.n	404cc0 <_vfiprintf_r+0xe4>
  405124:	f043 0301 	orr.w	r3, r3, #1
  405128:	f898 2000 	ldrb.w	r2, [r8]
  40512c:	e5c8      	b.n	404cc0 <_vfiprintf_r+0xe4>
  40512e:	9608      	str	r6, [sp, #32]
  405130:	2800      	cmp	r0, #0
  405132:	f040 8393 	bne.w	40585c <_vfiprintf_r+0xc80>
  405136:	4929      	ldr	r1, [pc, #164]	; (4051dc <_vfiprintf_r+0x600>)
  405138:	910b      	str	r1, [sp, #44]	; 0x2c
  40513a:	069f      	lsls	r7, r3, #26
  40513c:	f100 82e8 	bmi.w	405710 <_vfiprintf_r+0xb34>
  405140:	9807      	ldr	r0, [sp, #28]
  405142:	06de      	lsls	r6, r3, #27
  405144:	4601      	mov	r1, r0
  405146:	f100 8270 	bmi.w	40562a <_vfiprintf_r+0xa4e>
  40514a:	065d      	lsls	r5, r3, #25
  40514c:	f140 826d 	bpl.w	40562a <_vfiprintf_r+0xa4e>
  405150:	3104      	adds	r1, #4
  405152:	8806      	ldrh	r6, [r0, #0]
  405154:	9107      	str	r1, [sp, #28]
  405156:	2700      	movs	r7, #0
  405158:	07d8      	lsls	r0, r3, #31
  40515a:	f140 8222 	bpl.w	4055a2 <_vfiprintf_r+0x9c6>
  40515e:	ea56 0107 	orrs.w	r1, r6, r7
  405162:	f000 821e 	beq.w	4055a2 <_vfiprintf_r+0x9c6>
  405166:	2130      	movs	r1, #48	; 0x30
  405168:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
  40516c:	f043 0302 	orr.w	r3, r3, #2
  405170:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
  405174:	2202      	movs	r2, #2
  405176:	e664      	b.n	404e42 <_vfiprintf_r+0x266>
  405178:	9608      	str	r6, [sp, #32]
  40517a:	2800      	cmp	r0, #0
  40517c:	f040 836b 	bne.w	405856 <_vfiprintf_r+0xc7a>
  405180:	4917      	ldr	r1, [pc, #92]	; (4051e0 <_vfiprintf_r+0x604>)
  405182:	910b      	str	r1, [sp, #44]	; 0x2c
  405184:	e7d9      	b.n	40513a <_vfiprintf_r+0x55e>
  405186:	9907      	ldr	r1, [sp, #28]
  405188:	9608      	str	r6, [sp, #32]
  40518a:	680a      	ldr	r2, [r1, #0]
  40518c:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  405190:	f04f 0000 	mov.w	r0, #0
  405194:	460a      	mov	r2, r1
  405196:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
  40519a:	3204      	adds	r2, #4
  40519c:	2001      	movs	r0, #1
  40519e:	9001      	str	r0, [sp, #4]
  4051a0:	9207      	str	r2, [sp, #28]
  4051a2:	9005      	str	r0, [sp, #20]
  4051a4:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4051a8:	9302      	str	r3, [sp, #8]
  4051aa:	2400      	movs	r4, #0
  4051ac:	e670      	b.n	404e90 <_vfiprintf_r+0x2b4>
  4051ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4051b2:	f898 2000 	ldrb.w	r2, [r8]
  4051b6:	e583      	b.n	404cc0 <_vfiprintf_r+0xe4>
  4051b8:	f898 2000 	ldrb.w	r2, [r8]
  4051bc:	2a6c      	cmp	r2, #108	; 0x6c
  4051be:	bf03      	ittte	eq
  4051c0:	f898 2001 	ldrbeq.w	r2, [r8, #1]
  4051c4:	f043 0320 	orreq.w	r3, r3, #32
  4051c8:	f108 0801 	addeq.w	r8, r8, #1
  4051cc:	f043 0310 	orrne.w	r3, r3, #16
  4051d0:	e576      	b.n	404cc0 <_vfiprintf_r+0xe4>
  4051d2:	bf00      	nop
  4051d4:	00412350 	.word	0x00412350
  4051d8:	00412360 	.word	0x00412360
  4051dc:	00412334 	.word	0x00412334
  4051e0:	00412320 	.word	0x00412320
  4051e4:	9907      	ldr	r1, [sp, #28]
  4051e6:	680e      	ldr	r6, [r1, #0]
  4051e8:	460a      	mov	r2, r1
  4051ea:	2e00      	cmp	r6, #0
  4051ec:	f102 0204 	add.w	r2, r2, #4
  4051f0:	f6ff ae0f 	blt.w	404e12 <_vfiprintf_r+0x236>
  4051f4:	9207      	str	r2, [sp, #28]
  4051f6:	f898 2000 	ldrb.w	r2, [r8]
  4051fa:	e561      	b.n	404cc0 <_vfiprintf_r+0xe4>
  4051fc:	f898 2000 	ldrb.w	r2, [r8]
  405200:	2001      	movs	r0, #1
  405202:	252b      	movs	r5, #43	; 0x2b
  405204:	e55c      	b.n	404cc0 <_vfiprintf_r+0xe4>
  405206:	9907      	ldr	r1, [sp, #28]
  405208:	9608      	str	r6, [sp, #32]
  40520a:	f8d1 b000 	ldr.w	fp, [r1]
  40520e:	f04f 0200 	mov.w	r2, #0
  405212:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  405216:	1d0e      	adds	r6, r1, #4
  405218:	f1bb 0f00 	cmp.w	fp, #0
  40521c:	f000 82e5 	beq.w	4057ea <_vfiprintf_r+0xc0e>
  405220:	1c67      	adds	r7, r4, #1
  405222:	f000 82c4 	beq.w	4057ae <_vfiprintf_r+0xbd2>
  405226:	4622      	mov	r2, r4
  405228:	2100      	movs	r1, #0
  40522a:	4658      	mov	r0, fp
  40522c:	9301      	str	r3, [sp, #4]
  40522e:	f001 f91f 	bl	406470 <memchr>
  405232:	9b01      	ldr	r3, [sp, #4]
  405234:	2800      	cmp	r0, #0
  405236:	f000 82e5 	beq.w	405804 <_vfiprintf_r+0xc28>
  40523a:	eba0 020b 	sub.w	r2, r0, fp
  40523e:	9205      	str	r2, [sp, #20]
  405240:	9607      	str	r6, [sp, #28]
  405242:	9302      	str	r3, [sp, #8]
  405244:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  405248:	2400      	movs	r4, #0
  40524a:	e619      	b.n	404e80 <_vfiprintf_r+0x2a4>
  40524c:	f898 2000 	ldrb.w	r2, [r8]
  405250:	2a2a      	cmp	r2, #42	; 0x2a
  405252:	f108 0701 	add.w	r7, r8, #1
  405256:	f000 82e9 	beq.w	40582c <_vfiprintf_r+0xc50>
  40525a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40525e:	2909      	cmp	r1, #9
  405260:	46b8      	mov	r8, r7
  405262:	f04f 0400 	mov.w	r4, #0
  405266:	f63f ad2d 	bhi.w	404cc4 <_vfiprintf_r+0xe8>
  40526a:	f818 2b01 	ldrb.w	r2, [r8], #1
  40526e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  405272:	eb01 0444 	add.w	r4, r1, r4, lsl #1
  405276:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
  40527a:	2909      	cmp	r1, #9
  40527c:	d9f5      	bls.n	40526a <_vfiprintf_r+0x68e>
  40527e:	e521      	b.n	404cc4 <_vfiprintf_r+0xe8>
  405280:	f043 0320 	orr.w	r3, r3, #32
  405284:	f898 2000 	ldrb.w	r2, [r8]
  405288:	e51a      	b.n	404cc0 <_vfiprintf_r+0xe4>
  40528a:	9608      	str	r6, [sp, #32]
  40528c:	2800      	cmp	r0, #0
  40528e:	f040 82db 	bne.w	405848 <_vfiprintf_r+0xc6c>
  405292:	2a00      	cmp	r2, #0
  405294:	f000 80e7 	beq.w	405466 <_vfiprintf_r+0x88a>
  405298:	2101      	movs	r1, #1
  40529a:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
  40529e:	f04f 0200 	mov.w	r2, #0
  4052a2:	9101      	str	r1, [sp, #4]
  4052a4:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  4052a8:	9105      	str	r1, [sp, #20]
  4052aa:	f10d 0b48 	add.w	fp, sp, #72	; 0x48
  4052ae:	e77b      	b.n	4051a8 <_vfiprintf_r+0x5cc>
  4052b0:	9a07      	ldr	r2, [sp, #28]
  4052b2:	6813      	ldr	r3, [r2, #0]
  4052b4:	3204      	adds	r2, #4
  4052b6:	9207      	str	r2, [sp, #28]
  4052b8:	9a03      	ldr	r2, [sp, #12]
  4052ba:	601a      	str	r2, [r3, #0]
  4052bc:	e4cb      	b.n	404c56 <_vfiprintf_r+0x7a>
  4052be:	aa0f      	add	r2, sp, #60	; 0x3c
  4052c0:	9904      	ldr	r1, [sp, #16]
  4052c2:	4620      	mov	r0, r4
  4052c4:	f7ff fc4a 	bl	404b5c <__sprint_r.part.0>
  4052c8:	2800      	cmp	r0, #0
  4052ca:	f040 8139 	bne.w	405540 <_vfiprintf_r+0x964>
  4052ce:	9910      	ldr	r1, [sp, #64]	; 0x40
  4052d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4052d2:	f101 0c01 	add.w	ip, r1, #1
  4052d6:	46ce      	mov	lr, r9
  4052d8:	e5ff      	b.n	404eda <_vfiprintf_r+0x2fe>
  4052da:	9910      	ldr	r1, [sp, #64]	; 0x40
  4052dc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4052de:	1c48      	adds	r0, r1, #1
  4052e0:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4052e4:	2d00      	cmp	r5, #0
  4052e6:	f43f ae22 	beq.w	404f2e <_vfiprintf_r+0x352>
  4052ea:	3201      	adds	r2, #1
  4052ec:	f10d 0537 	add.w	r5, sp, #55	; 0x37
  4052f0:	2101      	movs	r1, #1
  4052f2:	2807      	cmp	r0, #7
  4052f4:	9211      	str	r2, [sp, #68]	; 0x44
  4052f6:	9010      	str	r0, [sp, #64]	; 0x40
  4052f8:	f8ca 5000 	str.w	r5, [sl]
  4052fc:	f8ca 1004 	str.w	r1, [sl, #4]
  405300:	f340 8108 	ble.w	405514 <_vfiprintf_r+0x938>
  405304:	2a00      	cmp	r2, #0
  405306:	f040 81bc 	bne.w	405682 <_vfiprintf_r+0xaa6>
  40530a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40530c:	2b00      	cmp	r3, #0
  40530e:	f43f ae1f 	beq.w	404f50 <_vfiprintf_r+0x374>
  405312:	ab0e      	add	r3, sp, #56	; 0x38
  405314:	2202      	movs	r2, #2
  405316:	4608      	mov	r0, r1
  405318:	931c      	str	r3, [sp, #112]	; 0x70
  40531a:	921d      	str	r2, [sp, #116]	; 0x74
  40531c:	46ca      	mov	sl, r9
  40531e:	4601      	mov	r1, r0
  405320:	f10a 0a08 	add.w	sl, sl, #8
  405324:	3001      	adds	r0, #1
  405326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  405328:	2b80      	cmp	r3, #128	; 0x80
  40532a:	f43f ae19 	beq.w	404f60 <_vfiprintf_r+0x384>
  40532e:	9b05      	ldr	r3, [sp, #20]
  405330:	1ae4      	subs	r4, r4, r3
  405332:	2c00      	cmp	r4, #0
  405334:	dd2e      	ble.n	405394 <_vfiprintf_r+0x7b8>
  405336:	2c10      	cmp	r4, #16
  405338:	4db3      	ldr	r5, [pc, #716]	; (405608 <_vfiprintf_r+0xa2c>)
  40533a:	dd1e      	ble.n	40537a <_vfiprintf_r+0x79e>
  40533c:	46d6      	mov	lr, sl
  40533e:	2610      	movs	r6, #16
  405340:	9f06      	ldr	r7, [sp, #24]
  405342:	f8dd a010 	ldr.w	sl, [sp, #16]
  405346:	e006      	b.n	405356 <_vfiprintf_r+0x77a>
  405348:	1c88      	adds	r0, r1, #2
  40534a:	f10e 0e08 	add.w	lr, lr, #8
  40534e:	4619      	mov	r1, r3
  405350:	3c10      	subs	r4, #16
  405352:	2c10      	cmp	r4, #16
  405354:	dd10      	ble.n	405378 <_vfiprintf_r+0x79c>
  405356:	1c4b      	adds	r3, r1, #1
  405358:	3210      	adds	r2, #16
  40535a:	2b07      	cmp	r3, #7
  40535c:	9211      	str	r2, [sp, #68]	; 0x44
  40535e:	e88e 0060 	stmia.w	lr, {r5, r6}
  405362:	9310      	str	r3, [sp, #64]	; 0x40
  405364:	ddf0      	ble.n	405348 <_vfiprintf_r+0x76c>
  405366:	2a00      	cmp	r2, #0
  405368:	d165      	bne.n	405436 <_vfiprintf_r+0x85a>
  40536a:	3c10      	subs	r4, #16
  40536c:	2c10      	cmp	r4, #16
  40536e:	f04f 0001 	mov.w	r0, #1
  405372:	4611      	mov	r1, r2
  405374:	46ce      	mov	lr, r9
  405376:	dcee      	bgt.n	405356 <_vfiprintf_r+0x77a>
  405378:	46f2      	mov	sl, lr
  40537a:	4422      	add	r2, r4
  40537c:	2807      	cmp	r0, #7
  40537e:	9211      	str	r2, [sp, #68]	; 0x44
  405380:	f8ca 5000 	str.w	r5, [sl]
  405384:	f8ca 4004 	str.w	r4, [sl, #4]
  405388:	9010      	str	r0, [sp, #64]	; 0x40
  40538a:	f300 8085 	bgt.w	405498 <_vfiprintf_r+0x8bc>
  40538e:	f10a 0a08 	add.w	sl, sl, #8
  405392:	3001      	adds	r0, #1
  405394:	9905      	ldr	r1, [sp, #20]
  405396:	f8ca b000 	str.w	fp, [sl]
  40539a:	440a      	add	r2, r1
  40539c:	2807      	cmp	r0, #7
  40539e:	9211      	str	r2, [sp, #68]	; 0x44
  4053a0:	f8ca 1004 	str.w	r1, [sl, #4]
  4053a4:	9010      	str	r0, [sp, #64]	; 0x40
  4053a6:	f340 8082 	ble.w	4054ae <_vfiprintf_r+0x8d2>
  4053aa:	2a00      	cmp	r2, #0
  4053ac:	f040 8118 	bne.w	4055e0 <_vfiprintf_r+0xa04>
  4053b0:	9b02      	ldr	r3, [sp, #8]
  4053b2:	9210      	str	r2, [sp, #64]	; 0x40
  4053b4:	0758      	lsls	r0, r3, #29
  4053b6:	d535      	bpl.n	405424 <_vfiprintf_r+0x848>
  4053b8:	9b08      	ldr	r3, [sp, #32]
  4053ba:	9901      	ldr	r1, [sp, #4]
  4053bc:	1a5c      	subs	r4, r3, r1
  4053be:	2c00      	cmp	r4, #0
  4053c0:	f340 80e7 	ble.w	405592 <_vfiprintf_r+0x9b6>
  4053c4:	46ca      	mov	sl, r9
  4053c6:	2c10      	cmp	r4, #16
  4053c8:	f340 8218 	ble.w	4057fc <_vfiprintf_r+0xc20>
  4053cc:	9910      	ldr	r1, [sp, #64]	; 0x40
  4053ce:	4e8f      	ldr	r6, [pc, #572]	; (40560c <_vfiprintf_r+0xa30>)
  4053d0:	9f06      	ldr	r7, [sp, #24]
  4053d2:	f8dd b010 	ldr.w	fp, [sp, #16]
  4053d6:	2510      	movs	r5, #16
  4053d8:	e006      	b.n	4053e8 <_vfiprintf_r+0x80c>
  4053da:	1c88      	adds	r0, r1, #2
  4053dc:	f10a 0a08 	add.w	sl, sl, #8
  4053e0:	4619      	mov	r1, r3
  4053e2:	3c10      	subs	r4, #16
  4053e4:	2c10      	cmp	r4, #16
  4053e6:	dd11      	ble.n	40540c <_vfiprintf_r+0x830>
  4053e8:	1c4b      	adds	r3, r1, #1
  4053ea:	3210      	adds	r2, #16
  4053ec:	2b07      	cmp	r3, #7
  4053ee:	9211      	str	r2, [sp, #68]	; 0x44
  4053f0:	f8ca 6000 	str.w	r6, [sl]
  4053f4:	f8ca 5004 	str.w	r5, [sl, #4]
  4053f8:	9310      	str	r3, [sp, #64]	; 0x40
  4053fa:	ddee      	ble.n	4053da <_vfiprintf_r+0x7fe>
  4053fc:	bb42      	cbnz	r2, 405450 <_vfiprintf_r+0x874>
  4053fe:	3c10      	subs	r4, #16
  405400:	2c10      	cmp	r4, #16
  405402:	f04f 0001 	mov.w	r0, #1
  405406:	4611      	mov	r1, r2
  405408:	46ca      	mov	sl, r9
  40540a:	dced      	bgt.n	4053e8 <_vfiprintf_r+0x80c>
  40540c:	4422      	add	r2, r4
  40540e:	2807      	cmp	r0, #7
  405410:	9211      	str	r2, [sp, #68]	; 0x44
  405412:	f8ca 6000 	str.w	r6, [sl]
  405416:	f8ca 4004 	str.w	r4, [sl, #4]
  40541a:	9010      	str	r0, [sp, #64]	; 0x40
  40541c:	dd51      	ble.n	4054c2 <_vfiprintf_r+0x8e6>
  40541e:	2a00      	cmp	r2, #0
  405420:	f040 819b 	bne.w	40575a <_vfiprintf_r+0xb7e>
  405424:	9b03      	ldr	r3, [sp, #12]
  405426:	9a08      	ldr	r2, [sp, #32]
  405428:	9901      	ldr	r1, [sp, #4]
  40542a:	428a      	cmp	r2, r1
  40542c:	bfac      	ite	ge
  40542e:	189b      	addge	r3, r3, r2
  405430:	185b      	addlt	r3, r3, r1
  405432:	9303      	str	r3, [sp, #12]
  405434:	e04e      	b.n	4054d4 <_vfiprintf_r+0x8f8>
  405436:	aa0f      	add	r2, sp, #60	; 0x3c
  405438:	4651      	mov	r1, sl
  40543a:	4638      	mov	r0, r7
  40543c:	f7ff fb8e 	bl	404b5c <__sprint_r.part.0>
  405440:	2800      	cmp	r0, #0
  405442:	f040 813f 	bne.w	4056c4 <_vfiprintf_r+0xae8>
  405446:	9910      	ldr	r1, [sp, #64]	; 0x40
  405448:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40544a:	1c48      	adds	r0, r1, #1
  40544c:	46ce      	mov	lr, r9
  40544e:	e77f      	b.n	405350 <_vfiprintf_r+0x774>
  405450:	aa0f      	add	r2, sp, #60	; 0x3c
  405452:	4659      	mov	r1, fp
  405454:	4638      	mov	r0, r7
  405456:	f7ff fb81 	bl	404b5c <__sprint_r.part.0>
  40545a:	b960      	cbnz	r0, 405476 <_vfiprintf_r+0x89a>
  40545c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40545e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405460:	1c48      	adds	r0, r1, #1
  405462:	46ca      	mov	sl, r9
  405464:	e7bd      	b.n	4053e2 <_vfiprintf_r+0x806>
  405466:	9b11      	ldr	r3, [sp, #68]	; 0x44
  405468:	f8dd b010 	ldr.w	fp, [sp, #16]
  40546c:	2b00      	cmp	r3, #0
  40546e:	f040 81d4 	bne.w	40581a <_vfiprintf_r+0xc3e>
  405472:	2300      	movs	r3, #0
  405474:	9310      	str	r3, [sp, #64]	; 0x40
  405476:	f8db 3064 	ldr.w	r3, [fp, #100]	; 0x64
  40547a:	f013 0f01 	tst.w	r3, #1
  40547e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405482:	d102      	bne.n	40548a <_vfiprintf_r+0x8ae>
  405484:	059a      	lsls	r2, r3, #22
  405486:	f140 80de 	bpl.w	405646 <_vfiprintf_r+0xa6a>
  40548a:	065b      	lsls	r3, r3, #25
  40548c:	f53f acb2 	bmi.w	404df4 <_vfiprintf_r+0x218>
  405490:	9803      	ldr	r0, [sp, #12]
  405492:	b02d      	add	sp, #180	; 0xb4
  405494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  405498:	2a00      	cmp	r2, #0
  40549a:	f040 8106 	bne.w	4056aa <_vfiprintf_r+0xace>
  40549e:	9a05      	ldr	r2, [sp, #20]
  4054a0:	921d      	str	r2, [sp, #116]	; 0x74
  4054a2:	2301      	movs	r3, #1
  4054a4:	9211      	str	r2, [sp, #68]	; 0x44
  4054a6:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
  4054aa:	9310      	str	r3, [sp, #64]	; 0x40
  4054ac:	46ca      	mov	sl, r9
  4054ae:	f10a 0a08 	add.w	sl, sl, #8
  4054b2:	9b02      	ldr	r3, [sp, #8]
  4054b4:	0759      	lsls	r1, r3, #29
  4054b6:	d504      	bpl.n	4054c2 <_vfiprintf_r+0x8e6>
  4054b8:	9b08      	ldr	r3, [sp, #32]
  4054ba:	9901      	ldr	r1, [sp, #4]
  4054bc:	1a5c      	subs	r4, r3, r1
  4054be:	2c00      	cmp	r4, #0
  4054c0:	dc81      	bgt.n	4053c6 <_vfiprintf_r+0x7ea>
  4054c2:	9b03      	ldr	r3, [sp, #12]
  4054c4:	9908      	ldr	r1, [sp, #32]
  4054c6:	9801      	ldr	r0, [sp, #4]
  4054c8:	4281      	cmp	r1, r0
  4054ca:	bfac      	ite	ge
  4054cc:	185b      	addge	r3, r3, r1
  4054ce:	181b      	addlt	r3, r3, r0
  4054d0:	9303      	str	r3, [sp, #12]
  4054d2:	bb72      	cbnz	r2, 405532 <_vfiprintf_r+0x956>
  4054d4:	2300      	movs	r3, #0
  4054d6:	9310      	str	r3, [sp, #64]	; 0x40
  4054d8:	46ca      	mov	sl, r9
  4054da:	f7ff bbbc 	b.w	404c56 <_vfiprintf_r+0x7a>
  4054de:	aa0f      	add	r2, sp, #60	; 0x3c
  4054e0:	9904      	ldr	r1, [sp, #16]
  4054e2:	4620      	mov	r0, r4
  4054e4:	f7ff fb3a 	bl	404b5c <__sprint_r.part.0>
  4054e8:	bb50      	cbnz	r0, 405540 <_vfiprintf_r+0x964>
  4054ea:	9910      	ldr	r1, [sp, #64]	; 0x40
  4054ec:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4054ee:	f101 0e01 	add.w	lr, r1, #1
  4054f2:	46cc      	mov	ip, r9
  4054f4:	e548      	b.n	404f88 <_vfiprintf_r+0x3ac>
  4054f6:	2a00      	cmp	r2, #0
  4054f8:	f040 8140 	bne.w	40577c <_vfiprintf_r+0xba0>
  4054fc:	f89d 1037 	ldrb.w	r1, [sp, #55]	; 0x37
  405500:	2900      	cmp	r1, #0
  405502:	f000 811b 	beq.w	40573c <_vfiprintf_r+0xb60>
  405506:	2201      	movs	r2, #1
  405508:	f10d 0137 	add.w	r1, sp, #55	; 0x37
  40550c:	4610      	mov	r0, r2
  40550e:	921d      	str	r2, [sp, #116]	; 0x74
  405510:	911c      	str	r1, [sp, #112]	; 0x70
  405512:	46ca      	mov	sl, r9
  405514:	4601      	mov	r1, r0
  405516:	f10a 0a08 	add.w	sl, sl, #8
  40551a:	3001      	adds	r0, #1
  40551c:	e507      	b.n	404f2e <_vfiprintf_r+0x352>
  40551e:	9b02      	ldr	r3, [sp, #8]
  405520:	2a01      	cmp	r2, #1
  405522:	f000 8098 	beq.w	405656 <_vfiprintf_r+0xa7a>
  405526:	2a02      	cmp	r2, #2
  405528:	d10d      	bne.n	405546 <_vfiprintf_r+0x96a>
  40552a:	9302      	str	r3, [sp, #8]
  40552c:	2600      	movs	r6, #0
  40552e:	2700      	movs	r7, #0
  405530:	e5b0      	b.n	405094 <_vfiprintf_r+0x4b8>
  405532:	aa0f      	add	r2, sp, #60	; 0x3c
  405534:	9904      	ldr	r1, [sp, #16]
  405536:	9806      	ldr	r0, [sp, #24]
  405538:	f7ff fb10 	bl	404b5c <__sprint_r.part.0>
  40553c:	2800      	cmp	r0, #0
  40553e:	d0c9      	beq.n	4054d4 <_vfiprintf_r+0x8f8>
  405540:	f8dd b010 	ldr.w	fp, [sp, #16]
  405544:	e797      	b.n	405476 <_vfiprintf_r+0x89a>
  405546:	9302      	str	r3, [sp, #8]
  405548:	2600      	movs	r6, #0
  40554a:	2700      	movs	r7, #0
  40554c:	4649      	mov	r1, r9
  40554e:	e000      	b.n	405552 <_vfiprintf_r+0x976>
  405550:	4659      	mov	r1, fp
  405552:	08f2      	lsrs	r2, r6, #3
  405554:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
  405558:	08f8      	lsrs	r0, r7, #3
  40555a:	f006 0307 	and.w	r3, r6, #7
  40555e:	4607      	mov	r7, r0
  405560:	4616      	mov	r6, r2
  405562:	3330      	adds	r3, #48	; 0x30
  405564:	ea56 0207 	orrs.w	r2, r6, r7
  405568:	f801 3c01 	strb.w	r3, [r1, #-1]
  40556c:	f101 3bff 	add.w	fp, r1, #4294967295
  405570:	d1ee      	bne.n	405550 <_vfiprintf_r+0x974>
  405572:	9a02      	ldr	r2, [sp, #8]
  405574:	07d6      	lsls	r6, r2, #31
  405576:	f57f ad9d 	bpl.w	4050b4 <_vfiprintf_r+0x4d8>
  40557a:	2b30      	cmp	r3, #48	; 0x30
  40557c:	f43f ad9a 	beq.w	4050b4 <_vfiprintf_r+0x4d8>
  405580:	3902      	subs	r1, #2
  405582:	2330      	movs	r3, #48	; 0x30
  405584:	f80b 3c01 	strb.w	r3, [fp, #-1]
  405588:	eba9 0301 	sub.w	r3, r9, r1
  40558c:	9305      	str	r3, [sp, #20]
  40558e:	468b      	mov	fp, r1
  405590:	e476      	b.n	404e80 <_vfiprintf_r+0x2a4>
  405592:	9b03      	ldr	r3, [sp, #12]
  405594:	9a08      	ldr	r2, [sp, #32]
  405596:	428a      	cmp	r2, r1
  405598:	bfac      	ite	ge
  40559a:	189b      	addge	r3, r3, r2
  40559c:	185b      	addlt	r3, r3, r1
  40559e:	9303      	str	r3, [sp, #12]
  4055a0:	e798      	b.n	4054d4 <_vfiprintf_r+0x8f8>
  4055a2:	2202      	movs	r2, #2
  4055a4:	e44d      	b.n	404e42 <_vfiprintf_r+0x266>
  4055a6:	2f00      	cmp	r7, #0
  4055a8:	bf08      	it	eq
  4055aa:	2e0a      	cmpeq	r6, #10
  4055ac:	d352      	bcc.n	405654 <_vfiprintf_r+0xa78>
  4055ae:	46cb      	mov	fp, r9
  4055b0:	4630      	mov	r0, r6
  4055b2:	4639      	mov	r1, r7
  4055b4:	220a      	movs	r2, #10
  4055b6:	2300      	movs	r3, #0
  4055b8:	f001 fbc6 	bl	406d48 <__aeabi_uldivmod>
  4055bc:	3230      	adds	r2, #48	; 0x30
  4055be:	f80b 2d01 	strb.w	r2, [fp, #-1]!
  4055c2:	4630      	mov	r0, r6
  4055c4:	4639      	mov	r1, r7
  4055c6:	2300      	movs	r3, #0
  4055c8:	220a      	movs	r2, #10
  4055ca:	f001 fbbd 	bl	406d48 <__aeabi_uldivmod>
  4055ce:	4606      	mov	r6, r0
  4055d0:	460f      	mov	r7, r1
  4055d2:	ea56 0307 	orrs.w	r3, r6, r7
  4055d6:	d1eb      	bne.n	4055b0 <_vfiprintf_r+0x9d4>
  4055d8:	e56c      	b.n	4050b4 <_vfiprintf_r+0x4d8>
  4055da:	9405      	str	r4, [sp, #20]
  4055dc:	46cb      	mov	fp, r9
  4055de:	e44f      	b.n	404e80 <_vfiprintf_r+0x2a4>
  4055e0:	aa0f      	add	r2, sp, #60	; 0x3c
  4055e2:	9904      	ldr	r1, [sp, #16]
  4055e4:	9806      	ldr	r0, [sp, #24]
  4055e6:	f7ff fab9 	bl	404b5c <__sprint_r.part.0>
  4055ea:	2800      	cmp	r0, #0
  4055ec:	d1a8      	bne.n	405540 <_vfiprintf_r+0x964>
  4055ee:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4055f0:	46ca      	mov	sl, r9
  4055f2:	e75e      	b.n	4054b2 <_vfiprintf_r+0x8d6>
  4055f4:	aa0f      	add	r2, sp, #60	; 0x3c
  4055f6:	9904      	ldr	r1, [sp, #16]
  4055f8:	9806      	ldr	r0, [sp, #24]
  4055fa:	f7ff faaf 	bl	404b5c <__sprint_r.part.0>
  4055fe:	2800      	cmp	r0, #0
  405600:	d19e      	bne.n	405540 <_vfiprintf_r+0x964>
  405602:	46ca      	mov	sl, r9
  405604:	f7ff bbc0 	b.w	404d88 <_vfiprintf_r+0x1ac>
  405608:	00412360 	.word	0x00412360
  40560c:	00412350 	.word	0x00412350
  405610:	3104      	adds	r1, #4
  405612:	6816      	ldr	r6, [r2, #0]
  405614:	9107      	str	r1, [sp, #28]
  405616:	2201      	movs	r2, #1
  405618:	2700      	movs	r7, #0
  40561a:	e412      	b.n	404e42 <_vfiprintf_r+0x266>
  40561c:	9807      	ldr	r0, [sp, #28]
  40561e:	4601      	mov	r1, r0
  405620:	3104      	adds	r1, #4
  405622:	6806      	ldr	r6, [r0, #0]
  405624:	9107      	str	r1, [sp, #28]
  405626:	2700      	movs	r7, #0
  405628:	e40b      	b.n	404e42 <_vfiprintf_r+0x266>
  40562a:	680e      	ldr	r6, [r1, #0]
  40562c:	3104      	adds	r1, #4
  40562e:	9107      	str	r1, [sp, #28]
  405630:	2700      	movs	r7, #0
  405632:	e591      	b.n	405158 <_vfiprintf_r+0x57c>
  405634:	9907      	ldr	r1, [sp, #28]
  405636:	680e      	ldr	r6, [r1, #0]
  405638:	460a      	mov	r2, r1
  40563a:	17f7      	asrs	r7, r6, #31
  40563c:	3204      	adds	r2, #4
  40563e:	9207      	str	r2, [sp, #28]
  405640:	4630      	mov	r0, r6
  405642:	4639      	mov	r1, r7
  405644:	e50f      	b.n	405066 <_vfiprintf_r+0x48a>
  405646:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40564a:	f000 fe7f 	bl	40634c <__retarget_lock_release_recursive>
  40564e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
  405652:	e71a      	b.n	40548a <_vfiprintf_r+0x8ae>
  405654:	9b02      	ldr	r3, [sp, #8]
  405656:	9302      	str	r3, [sp, #8]
  405658:	f10d 0bb0 	add.w	fp, sp, #176	; 0xb0
  40565c:	3630      	adds	r6, #48	; 0x30
  40565e:	2301      	movs	r3, #1
  405660:	f80b 6d41 	strb.w	r6, [fp, #-65]!
  405664:	9305      	str	r3, [sp, #20]
  405666:	e40b      	b.n	404e80 <_vfiprintf_r+0x2a4>
  405668:	aa0f      	add	r2, sp, #60	; 0x3c
  40566a:	9904      	ldr	r1, [sp, #16]
  40566c:	9806      	ldr	r0, [sp, #24]
  40566e:	f7ff fa75 	bl	404b5c <__sprint_r.part.0>
  405672:	2800      	cmp	r0, #0
  405674:	f47f af64 	bne.w	405540 <_vfiprintf_r+0x964>
  405678:	9910      	ldr	r1, [sp, #64]	; 0x40
  40567a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40567c:	1c48      	adds	r0, r1, #1
  40567e:	46ca      	mov	sl, r9
  405680:	e651      	b.n	405326 <_vfiprintf_r+0x74a>
  405682:	aa0f      	add	r2, sp, #60	; 0x3c
  405684:	9904      	ldr	r1, [sp, #16]
  405686:	9806      	ldr	r0, [sp, #24]
  405688:	f7ff fa68 	bl	404b5c <__sprint_r.part.0>
  40568c:	2800      	cmp	r0, #0
  40568e:	f47f af57 	bne.w	405540 <_vfiprintf_r+0x964>
  405692:	9910      	ldr	r1, [sp, #64]	; 0x40
  405694:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405696:	1c48      	adds	r0, r1, #1
  405698:	46ca      	mov	sl, r9
  40569a:	e448      	b.n	404f2e <_vfiprintf_r+0x352>
  40569c:	2a00      	cmp	r2, #0
  40569e:	f040 8091 	bne.w	4057c4 <_vfiprintf_r+0xbe8>
  4056a2:	2001      	movs	r0, #1
  4056a4:	4611      	mov	r1, r2
  4056a6:	46ca      	mov	sl, r9
  4056a8:	e641      	b.n	40532e <_vfiprintf_r+0x752>
  4056aa:	aa0f      	add	r2, sp, #60	; 0x3c
  4056ac:	9904      	ldr	r1, [sp, #16]
  4056ae:	9806      	ldr	r0, [sp, #24]
  4056b0:	f7ff fa54 	bl	404b5c <__sprint_r.part.0>
  4056b4:	2800      	cmp	r0, #0
  4056b6:	f47f af43 	bne.w	405540 <_vfiprintf_r+0x964>
  4056ba:	9810      	ldr	r0, [sp, #64]	; 0x40
  4056bc:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4056be:	3001      	adds	r0, #1
  4056c0:	46ca      	mov	sl, r9
  4056c2:	e667      	b.n	405394 <_vfiprintf_r+0x7b8>
  4056c4:	46d3      	mov	fp, sl
  4056c6:	e6d6      	b.n	405476 <_vfiprintf_r+0x89a>
  4056c8:	9e07      	ldr	r6, [sp, #28]
  4056ca:	3607      	adds	r6, #7
  4056cc:	f026 0207 	bic.w	r2, r6, #7
  4056d0:	f102 0108 	add.w	r1, r2, #8
  4056d4:	e9d2 6700 	ldrd	r6, r7, [r2]
  4056d8:	9107      	str	r1, [sp, #28]
  4056da:	2201      	movs	r2, #1
  4056dc:	f7ff bbb1 	b.w	404e42 <_vfiprintf_r+0x266>
  4056e0:	9e07      	ldr	r6, [sp, #28]
  4056e2:	3607      	adds	r6, #7
  4056e4:	f026 0607 	bic.w	r6, r6, #7
  4056e8:	e9d6 0100 	ldrd	r0, r1, [r6]
  4056ec:	f106 0208 	add.w	r2, r6, #8
  4056f0:	9207      	str	r2, [sp, #28]
  4056f2:	4606      	mov	r6, r0
  4056f4:	460f      	mov	r7, r1
  4056f6:	e4b6      	b.n	405066 <_vfiprintf_r+0x48a>
  4056f8:	9e07      	ldr	r6, [sp, #28]
  4056fa:	3607      	adds	r6, #7
  4056fc:	f026 0207 	bic.w	r2, r6, #7
  405700:	f102 0108 	add.w	r1, r2, #8
  405704:	e9d2 6700 	ldrd	r6, r7, [r2]
  405708:	9107      	str	r1, [sp, #28]
  40570a:	2200      	movs	r2, #0
  40570c:	f7ff bb99 	b.w	404e42 <_vfiprintf_r+0x266>
  405710:	9e07      	ldr	r6, [sp, #28]
  405712:	3607      	adds	r6, #7
  405714:	f026 0107 	bic.w	r1, r6, #7
  405718:	f101 0008 	add.w	r0, r1, #8
  40571c:	9007      	str	r0, [sp, #28]
  40571e:	e9d1 6700 	ldrd	r6, r7, [r1]
  405722:	e519      	b.n	405158 <_vfiprintf_r+0x57c>
  405724:	46cb      	mov	fp, r9
  405726:	f7ff bbab 	b.w	404e80 <_vfiprintf_r+0x2a4>
  40572a:	252d      	movs	r5, #45	; 0x2d
  40572c:	4276      	negs	r6, r6
  40572e:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
  405732:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405736:	2201      	movs	r2, #1
  405738:	f7ff bb88 	b.w	404e4c <_vfiprintf_r+0x270>
  40573c:	9b09      	ldr	r3, [sp, #36]	; 0x24
  40573e:	b9b3      	cbnz	r3, 40576e <_vfiprintf_r+0xb92>
  405740:	4611      	mov	r1, r2
  405742:	2001      	movs	r0, #1
  405744:	46ca      	mov	sl, r9
  405746:	e5f2      	b.n	40532e <_vfiprintf_r+0x752>
  405748:	f8db 0058 	ldr.w	r0, [fp, #88]	; 0x58
  40574c:	f000 fdfe 	bl	40634c <__retarget_lock_release_recursive>
  405750:	f04f 33ff 	mov.w	r3, #4294967295
  405754:	9303      	str	r3, [sp, #12]
  405756:	f7ff bb50 	b.w	404dfa <_vfiprintf_r+0x21e>
  40575a:	aa0f      	add	r2, sp, #60	; 0x3c
  40575c:	9904      	ldr	r1, [sp, #16]
  40575e:	9806      	ldr	r0, [sp, #24]
  405760:	f7ff f9fc 	bl	404b5c <__sprint_r.part.0>
  405764:	2800      	cmp	r0, #0
  405766:	f47f aeeb 	bne.w	405540 <_vfiprintf_r+0x964>
  40576a:	9a11      	ldr	r2, [sp, #68]	; 0x44
  40576c:	e6a9      	b.n	4054c2 <_vfiprintf_r+0x8e6>
  40576e:	ab0e      	add	r3, sp, #56	; 0x38
  405770:	2202      	movs	r2, #2
  405772:	931c      	str	r3, [sp, #112]	; 0x70
  405774:	921d      	str	r2, [sp, #116]	; 0x74
  405776:	2001      	movs	r0, #1
  405778:	46ca      	mov	sl, r9
  40577a:	e5d0      	b.n	40531e <_vfiprintf_r+0x742>
  40577c:	aa0f      	add	r2, sp, #60	; 0x3c
  40577e:	9904      	ldr	r1, [sp, #16]
  405780:	9806      	ldr	r0, [sp, #24]
  405782:	f7ff f9eb 	bl	404b5c <__sprint_r.part.0>
  405786:	2800      	cmp	r0, #0
  405788:	f47f aeda 	bne.w	405540 <_vfiprintf_r+0x964>
  40578c:	9910      	ldr	r1, [sp, #64]	; 0x40
  40578e:	9a11      	ldr	r2, [sp, #68]	; 0x44
  405790:	1c48      	adds	r0, r1, #1
  405792:	46ca      	mov	sl, r9
  405794:	e5a4      	b.n	4052e0 <_vfiprintf_r+0x704>
  405796:	9a07      	ldr	r2, [sp, #28]
  405798:	9903      	ldr	r1, [sp, #12]
  40579a:	6813      	ldr	r3, [r2, #0]
  40579c:	17cd      	asrs	r5, r1, #31
  40579e:	4608      	mov	r0, r1
  4057a0:	3204      	adds	r2, #4
  4057a2:	4629      	mov	r1, r5
  4057a4:	9207      	str	r2, [sp, #28]
  4057a6:	e9c3 0100 	strd	r0, r1, [r3]
  4057aa:	f7ff ba54 	b.w	404c56 <_vfiprintf_r+0x7a>
  4057ae:	4658      	mov	r0, fp
  4057b0:	9607      	str	r6, [sp, #28]
  4057b2:	9302      	str	r3, [sp, #8]
  4057b4:	f7ff f964 	bl	404a80 <strlen>
  4057b8:	2400      	movs	r4, #0
  4057ba:	9005      	str	r0, [sp, #20]
  4057bc:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  4057c0:	f7ff bb5e 	b.w	404e80 <_vfiprintf_r+0x2a4>
  4057c4:	aa0f      	add	r2, sp, #60	; 0x3c
  4057c6:	9904      	ldr	r1, [sp, #16]
  4057c8:	9806      	ldr	r0, [sp, #24]
  4057ca:	f7ff f9c7 	bl	404b5c <__sprint_r.part.0>
  4057ce:	2800      	cmp	r0, #0
  4057d0:	f47f aeb6 	bne.w	405540 <_vfiprintf_r+0x964>
  4057d4:	9910      	ldr	r1, [sp, #64]	; 0x40
  4057d6:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057d8:	1c48      	adds	r0, r1, #1
  4057da:	46ca      	mov	sl, r9
  4057dc:	e5a7      	b.n	40532e <_vfiprintf_r+0x752>
  4057de:	9910      	ldr	r1, [sp, #64]	; 0x40
  4057e0:	9a11      	ldr	r2, [sp, #68]	; 0x44
  4057e2:	4e20      	ldr	r6, [pc, #128]	; (405864 <_vfiprintf_r+0xc88>)
  4057e4:	3101      	adds	r1, #1
  4057e6:	f7ff bb90 	b.w	404f0a <_vfiprintf_r+0x32e>
  4057ea:	2c06      	cmp	r4, #6
  4057ec:	bf28      	it	cs
  4057ee:	2406      	movcs	r4, #6
  4057f0:	9405      	str	r4, [sp, #20]
  4057f2:	9607      	str	r6, [sp, #28]
  4057f4:	9401      	str	r4, [sp, #4]
  4057f6:	f8df b070 	ldr.w	fp, [pc, #112]	; 405868 <_vfiprintf_r+0xc8c>
  4057fa:	e4d5      	b.n	4051a8 <_vfiprintf_r+0x5cc>
  4057fc:	9810      	ldr	r0, [sp, #64]	; 0x40
  4057fe:	4e19      	ldr	r6, [pc, #100]	; (405864 <_vfiprintf_r+0xc88>)
  405800:	3001      	adds	r0, #1
  405802:	e603      	b.n	40540c <_vfiprintf_r+0x830>
  405804:	9405      	str	r4, [sp, #20]
  405806:	f89d 5037 	ldrb.w	r5, [sp, #55]	; 0x37
  40580a:	9607      	str	r6, [sp, #28]
  40580c:	9302      	str	r3, [sp, #8]
  40580e:	4604      	mov	r4, r0
  405810:	f7ff bb36 	b.w	404e80 <_vfiprintf_r+0x2a4>
  405814:	4686      	mov	lr, r0
  405816:	f7ff bbce 	b.w	404fb6 <_vfiprintf_r+0x3da>
  40581a:	9806      	ldr	r0, [sp, #24]
  40581c:	aa0f      	add	r2, sp, #60	; 0x3c
  40581e:	4659      	mov	r1, fp
  405820:	f7ff f99c 	bl	404b5c <__sprint_r.part.0>
  405824:	2800      	cmp	r0, #0
  405826:	f43f ae24 	beq.w	405472 <_vfiprintf_r+0x896>
  40582a:	e624      	b.n	405476 <_vfiprintf_r+0x89a>
  40582c:	9907      	ldr	r1, [sp, #28]
  40582e:	f898 2001 	ldrb.w	r2, [r8, #1]
  405832:	680c      	ldr	r4, [r1, #0]
  405834:	3104      	adds	r1, #4
  405836:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
  40583a:	46b8      	mov	r8, r7
  40583c:	9107      	str	r1, [sp, #28]
  40583e:	f7ff ba3f 	b.w	404cc0 <_vfiprintf_r+0xe4>
  405842:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405846:	e43c      	b.n	4050c2 <_vfiprintf_r+0x4e6>
  405848:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40584c:	e521      	b.n	405292 <_vfiprintf_r+0x6b6>
  40584e:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405852:	f7ff bbf4 	b.w	40503e <_vfiprintf_r+0x462>
  405856:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  40585a:	e491      	b.n	405180 <_vfiprintf_r+0x5a4>
  40585c:	f88d 5037 	strb.w	r5, [sp, #55]	; 0x37
  405860:	e469      	b.n	405136 <_vfiprintf_r+0x55a>
  405862:	bf00      	nop
  405864:	00412350 	.word	0x00412350
  405868:	00412348 	.word	0x00412348

0040586c <__sbprintf>:
  40586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405870:	460c      	mov	r4, r1
  405872:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
  405876:	8989      	ldrh	r1, [r1, #12]
  405878:	6e66      	ldr	r6, [r4, #100]	; 0x64
  40587a:	89e5      	ldrh	r5, [r4, #14]
  40587c:	9619      	str	r6, [sp, #100]	; 0x64
  40587e:	f021 0102 	bic.w	r1, r1, #2
  405882:	4606      	mov	r6, r0
  405884:	69e0      	ldr	r0, [r4, #28]
  405886:	f8ad 100c 	strh.w	r1, [sp, #12]
  40588a:	4617      	mov	r7, r2
  40588c:	f44f 6180 	mov.w	r1, #1024	; 0x400
  405890:	6a62      	ldr	r2, [r4, #36]	; 0x24
  405892:	f8ad 500e 	strh.w	r5, [sp, #14]
  405896:	4698      	mov	r8, r3
  405898:	ad1a      	add	r5, sp, #104	; 0x68
  40589a:	2300      	movs	r3, #0
  40589c:	9007      	str	r0, [sp, #28]
  40589e:	a816      	add	r0, sp, #88	; 0x58
  4058a0:	9209      	str	r2, [sp, #36]	; 0x24
  4058a2:	9306      	str	r3, [sp, #24]
  4058a4:	9500      	str	r5, [sp, #0]
  4058a6:	9504      	str	r5, [sp, #16]
  4058a8:	9102      	str	r1, [sp, #8]
  4058aa:	9105      	str	r1, [sp, #20]
  4058ac:	f000 fd48 	bl	406340 <__retarget_lock_init_recursive>
  4058b0:	4643      	mov	r3, r8
  4058b2:	463a      	mov	r2, r7
  4058b4:	4669      	mov	r1, sp
  4058b6:	4630      	mov	r0, r6
  4058b8:	f7ff f990 	bl	404bdc <_vfiprintf_r>
  4058bc:	1e05      	subs	r5, r0, #0
  4058be:	db07      	blt.n	4058d0 <__sbprintf+0x64>
  4058c0:	4630      	mov	r0, r6
  4058c2:	4669      	mov	r1, sp
  4058c4:	f000 f928 	bl	405b18 <_fflush_r>
  4058c8:	2800      	cmp	r0, #0
  4058ca:	bf18      	it	ne
  4058cc:	f04f 35ff 	movne.w	r5, #4294967295
  4058d0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  4058d4:	065b      	lsls	r3, r3, #25
  4058d6:	d503      	bpl.n	4058e0 <__sbprintf+0x74>
  4058d8:	89a3      	ldrh	r3, [r4, #12]
  4058da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4058de:	81a3      	strh	r3, [r4, #12]
  4058e0:	9816      	ldr	r0, [sp, #88]	; 0x58
  4058e2:	f000 fd2f 	bl	406344 <__retarget_lock_close_recursive>
  4058e6:	4628      	mov	r0, r5
  4058e8:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
  4058ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

004058f0 <__swsetup_r>:
  4058f0:	b538      	push	{r3, r4, r5, lr}
  4058f2:	4b30      	ldr	r3, [pc, #192]	; (4059b4 <__swsetup_r+0xc4>)
  4058f4:	681b      	ldr	r3, [r3, #0]
  4058f6:	4605      	mov	r5, r0
  4058f8:	460c      	mov	r4, r1
  4058fa:	b113      	cbz	r3, 405902 <__swsetup_r+0x12>
  4058fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  4058fe:	2a00      	cmp	r2, #0
  405900:	d038      	beq.n	405974 <__swsetup_r+0x84>
  405902:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405906:	b293      	uxth	r3, r2
  405908:	0718      	lsls	r0, r3, #28
  40590a:	d50c      	bpl.n	405926 <__swsetup_r+0x36>
  40590c:	6920      	ldr	r0, [r4, #16]
  40590e:	b1a8      	cbz	r0, 40593c <__swsetup_r+0x4c>
  405910:	f013 0201 	ands.w	r2, r3, #1
  405914:	d01e      	beq.n	405954 <__swsetup_r+0x64>
  405916:	6963      	ldr	r3, [r4, #20]
  405918:	2200      	movs	r2, #0
  40591a:	425b      	negs	r3, r3
  40591c:	61a3      	str	r3, [r4, #24]
  40591e:	60a2      	str	r2, [r4, #8]
  405920:	b1f0      	cbz	r0, 405960 <__swsetup_r+0x70>
  405922:	2000      	movs	r0, #0
  405924:	bd38      	pop	{r3, r4, r5, pc}
  405926:	06d9      	lsls	r1, r3, #27
  405928:	d53c      	bpl.n	4059a4 <__swsetup_r+0xb4>
  40592a:	0758      	lsls	r0, r3, #29
  40592c:	d426      	bmi.n	40597c <__swsetup_r+0x8c>
  40592e:	6920      	ldr	r0, [r4, #16]
  405930:	f042 0308 	orr.w	r3, r2, #8
  405934:	81a3      	strh	r3, [r4, #12]
  405936:	b29b      	uxth	r3, r3
  405938:	2800      	cmp	r0, #0
  40593a:	d1e9      	bne.n	405910 <__swsetup_r+0x20>
  40593c:	f403 7220 	and.w	r2, r3, #640	; 0x280
  405940:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
  405944:	d0e4      	beq.n	405910 <__swsetup_r+0x20>
  405946:	4628      	mov	r0, r5
  405948:	4621      	mov	r1, r4
  40594a:	f000 fd2f 	bl	4063ac <__smakebuf_r>
  40594e:	89a3      	ldrh	r3, [r4, #12]
  405950:	6920      	ldr	r0, [r4, #16]
  405952:	e7dd      	b.n	405910 <__swsetup_r+0x20>
  405954:	0799      	lsls	r1, r3, #30
  405956:	bf58      	it	pl
  405958:	6962      	ldrpl	r2, [r4, #20]
  40595a:	60a2      	str	r2, [r4, #8]
  40595c:	2800      	cmp	r0, #0
  40595e:	d1e0      	bne.n	405922 <__swsetup_r+0x32>
  405960:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405964:	061a      	lsls	r2, r3, #24
  405966:	d5dd      	bpl.n	405924 <__swsetup_r+0x34>
  405968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  40596c:	81a3      	strh	r3, [r4, #12]
  40596e:	f04f 30ff 	mov.w	r0, #4294967295
  405972:	bd38      	pop	{r3, r4, r5, pc}
  405974:	4618      	mov	r0, r3
  405976:	f000 f927 	bl	405bc8 <__sinit>
  40597a:	e7c2      	b.n	405902 <__swsetup_r+0x12>
  40597c:	6b21      	ldr	r1, [r4, #48]	; 0x30
  40597e:	b151      	cbz	r1, 405996 <__swsetup_r+0xa6>
  405980:	f104 0340 	add.w	r3, r4, #64	; 0x40
  405984:	4299      	cmp	r1, r3
  405986:	d004      	beq.n	405992 <__swsetup_r+0xa2>
  405988:	4628      	mov	r0, r5
  40598a:	f000 fa43 	bl	405e14 <_free_r>
  40598e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  405992:	2300      	movs	r3, #0
  405994:	6323      	str	r3, [r4, #48]	; 0x30
  405996:	2300      	movs	r3, #0
  405998:	6920      	ldr	r0, [r4, #16]
  40599a:	6063      	str	r3, [r4, #4]
  40599c:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  4059a0:	6020      	str	r0, [r4, #0]
  4059a2:	e7c5      	b.n	405930 <__swsetup_r+0x40>
  4059a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  4059a8:	2309      	movs	r3, #9
  4059aa:	602b      	str	r3, [r5, #0]
  4059ac:	f04f 30ff 	mov.w	r0, #4294967295
  4059b0:	81a2      	strh	r2, [r4, #12]
  4059b2:	bd38      	pop	{r3, r4, r5, pc}
  4059b4:	20400018 	.word	0x20400018

004059b8 <register_fini>:
  4059b8:	4b02      	ldr	r3, [pc, #8]	; (4059c4 <register_fini+0xc>)
  4059ba:	b113      	cbz	r3, 4059c2 <register_fini+0xa>
  4059bc:	4802      	ldr	r0, [pc, #8]	; (4059c8 <register_fini+0x10>)
  4059be:	f000 b805 	b.w	4059cc <atexit>
  4059c2:	4770      	bx	lr
  4059c4:	00000000 	.word	0x00000000
  4059c8:	00405c39 	.word	0x00405c39

004059cc <atexit>:
  4059cc:	2300      	movs	r3, #0
  4059ce:	4601      	mov	r1, r0
  4059d0:	461a      	mov	r2, r3
  4059d2:	4618      	mov	r0, r3
  4059d4:	f001 b890 	b.w	406af8 <__register_exitproc>

004059d8 <__sflush_r>:
  4059d8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
  4059dc:	b29a      	uxth	r2, r3
  4059de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4059e2:	460d      	mov	r5, r1
  4059e4:	0711      	lsls	r1, r2, #28
  4059e6:	4680      	mov	r8, r0
  4059e8:	d43a      	bmi.n	405a60 <__sflush_r+0x88>
  4059ea:	686a      	ldr	r2, [r5, #4]
  4059ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  4059f0:	2a00      	cmp	r2, #0
  4059f2:	81ab      	strh	r3, [r5, #12]
  4059f4:	dd6f      	ble.n	405ad6 <__sflush_r+0xfe>
  4059f6:	6aac      	ldr	r4, [r5, #40]	; 0x28
  4059f8:	2c00      	cmp	r4, #0
  4059fa:	d049      	beq.n	405a90 <__sflush_r+0xb8>
  4059fc:	2200      	movs	r2, #0
  4059fe:	b29b      	uxth	r3, r3
  405a00:	f8d8 6000 	ldr.w	r6, [r8]
  405a04:	f8c8 2000 	str.w	r2, [r8]
  405a08:	f413 5280 	ands.w	r2, r3, #4096	; 0x1000
  405a0c:	d067      	beq.n	405ade <__sflush_r+0x106>
  405a0e:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  405a10:	075f      	lsls	r7, r3, #29
  405a12:	d505      	bpl.n	405a20 <__sflush_r+0x48>
  405a14:	6869      	ldr	r1, [r5, #4]
  405a16:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  405a18:	1a52      	subs	r2, r2, r1
  405a1a:	b10b      	cbz	r3, 405a20 <__sflush_r+0x48>
  405a1c:	6beb      	ldr	r3, [r5, #60]	; 0x3c
  405a1e:	1ad2      	subs	r2, r2, r3
  405a20:	2300      	movs	r3, #0
  405a22:	69e9      	ldr	r1, [r5, #28]
  405a24:	4640      	mov	r0, r8
  405a26:	47a0      	blx	r4
  405a28:	1c44      	adds	r4, r0, #1
  405a2a:	d03c      	beq.n	405aa6 <__sflush_r+0xce>
  405a2c:	f9b5 300c 	ldrsh.w	r3, [r5, #12]
  405a30:	692a      	ldr	r2, [r5, #16]
  405a32:	602a      	str	r2, [r5, #0]
  405a34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  405a38:	2200      	movs	r2, #0
  405a3a:	81ab      	strh	r3, [r5, #12]
  405a3c:	04db      	lsls	r3, r3, #19
  405a3e:	606a      	str	r2, [r5, #4]
  405a40:	d447      	bmi.n	405ad2 <__sflush_r+0xfa>
  405a42:	6b29      	ldr	r1, [r5, #48]	; 0x30
  405a44:	f8c8 6000 	str.w	r6, [r8]
  405a48:	b311      	cbz	r1, 405a90 <__sflush_r+0xb8>
  405a4a:	f105 0340 	add.w	r3, r5, #64	; 0x40
  405a4e:	4299      	cmp	r1, r3
  405a50:	d002      	beq.n	405a58 <__sflush_r+0x80>
  405a52:	4640      	mov	r0, r8
  405a54:	f000 f9de 	bl	405e14 <_free_r>
  405a58:	2000      	movs	r0, #0
  405a5a:	6328      	str	r0, [r5, #48]	; 0x30
  405a5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405a60:	692e      	ldr	r6, [r5, #16]
  405a62:	b1ae      	cbz	r6, 405a90 <__sflush_r+0xb8>
  405a64:	682c      	ldr	r4, [r5, #0]
  405a66:	602e      	str	r6, [r5, #0]
  405a68:	0791      	lsls	r1, r2, #30
  405a6a:	bf0c      	ite	eq
  405a6c:	696b      	ldreq	r3, [r5, #20]
  405a6e:	2300      	movne	r3, #0
  405a70:	1ba4      	subs	r4, r4, r6
  405a72:	60ab      	str	r3, [r5, #8]
  405a74:	e00a      	b.n	405a8c <__sflush_r+0xb4>
  405a76:	4623      	mov	r3, r4
  405a78:	4632      	mov	r2, r6
  405a7a:	6a6f      	ldr	r7, [r5, #36]	; 0x24
  405a7c:	69e9      	ldr	r1, [r5, #28]
  405a7e:	4640      	mov	r0, r8
  405a80:	47b8      	blx	r7
  405a82:	2800      	cmp	r0, #0
  405a84:	eba4 0400 	sub.w	r4, r4, r0
  405a88:	4406      	add	r6, r0
  405a8a:	dd04      	ble.n	405a96 <__sflush_r+0xbe>
  405a8c:	2c00      	cmp	r4, #0
  405a8e:	dcf2      	bgt.n	405a76 <__sflush_r+0x9e>
  405a90:	2000      	movs	r0, #0
  405a92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405a96:	89ab      	ldrh	r3, [r5, #12]
  405a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405a9c:	81ab      	strh	r3, [r5, #12]
  405a9e:	f04f 30ff 	mov.w	r0, #4294967295
  405aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405aa6:	f8d8 4000 	ldr.w	r4, [r8]
  405aaa:	2c1d      	cmp	r4, #29
  405aac:	d8f3      	bhi.n	405a96 <__sflush_r+0xbe>
  405aae:	4b19      	ldr	r3, [pc, #100]	; (405b14 <__sflush_r+0x13c>)
  405ab0:	40e3      	lsrs	r3, r4
  405ab2:	43db      	mvns	r3, r3
  405ab4:	f013 0301 	ands.w	r3, r3, #1
  405ab8:	d1ed      	bne.n	405a96 <__sflush_r+0xbe>
  405aba:	f9b5 200c 	ldrsh.w	r2, [r5, #12]
  405abe:	606b      	str	r3, [r5, #4]
  405ac0:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
  405ac4:	6929      	ldr	r1, [r5, #16]
  405ac6:	81ab      	strh	r3, [r5, #12]
  405ac8:	04da      	lsls	r2, r3, #19
  405aca:	6029      	str	r1, [r5, #0]
  405acc:	d5b9      	bpl.n	405a42 <__sflush_r+0x6a>
  405ace:	2c00      	cmp	r4, #0
  405ad0:	d1b7      	bne.n	405a42 <__sflush_r+0x6a>
  405ad2:	6528      	str	r0, [r5, #80]	; 0x50
  405ad4:	e7b5      	b.n	405a42 <__sflush_r+0x6a>
  405ad6:	6bea      	ldr	r2, [r5, #60]	; 0x3c
  405ad8:	2a00      	cmp	r2, #0
  405ada:	dc8c      	bgt.n	4059f6 <__sflush_r+0x1e>
  405adc:	e7d8      	b.n	405a90 <__sflush_r+0xb8>
  405ade:	2301      	movs	r3, #1
  405ae0:	69e9      	ldr	r1, [r5, #28]
  405ae2:	4640      	mov	r0, r8
  405ae4:	47a0      	blx	r4
  405ae6:	1c43      	adds	r3, r0, #1
  405ae8:	4602      	mov	r2, r0
  405aea:	d002      	beq.n	405af2 <__sflush_r+0x11a>
  405aec:	89ab      	ldrh	r3, [r5, #12]
  405aee:	6aac      	ldr	r4, [r5, #40]	; 0x28
  405af0:	e78e      	b.n	405a10 <__sflush_r+0x38>
  405af2:	f8d8 3000 	ldr.w	r3, [r8]
  405af6:	2b00      	cmp	r3, #0
  405af8:	d0f8      	beq.n	405aec <__sflush_r+0x114>
  405afa:	2b1d      	cmp	r3, #29
  405afc:	d001      	beq.n	405b02 <__sflush_r+0x12a>
  405afe:	2b16      	cmp	r3, #22
  405b00:	d102      	bne.n	405b08 <__sflush_r+0x130>
  405b02:	f8c8 6000 	str.w	r6, [r8]
  405b06:	e7c3      	b.n	405a90 <__sflush_r+0xb8>
  405b08:	89ab      	ldrh	r3, [r5, #12]
  405b0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405b0e:	81ab      	strh	r3, [r5, #12]
  405b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  405b14:	20400001 	.word	0x20400001

00405b18 <_fflush_r>:
  405b18:	b538      	push	{r3, r4, r5, lr}
  405b1a:	460d      	mov	r5, r1
  405b1c:	4604      	mov	r4, r0
  405b1e:	b108      	cbz	r0, 405b24 <_fflush_r+0xc>
  405b20:	6b83      	ldr	r3, [r0, #56]	; 0x38
  405b22:	b1bb      	cbz	r3, 405b54 <_fflush_r+0x3c>
  405b24:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  405b28:	b188      	cbz	r0, 405b4e <_fflush_r+0x36>
  405b2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405b2c:	07db      	lsls	r3, r3, #31
  405b2e:	d401      	bmi.n	405b34 <_fflush_r+0x1c>
  405b30:	0581      	lsls	r1, r0, #22
  405b32:	d517      	bpl.n	405b64 <_fflush_r+0x4c>
  405b34:	4620      	mov	r0, r4
  405b36:	4629      	mov	r1, r5
  405b38:	f7ff ff4e 	bl	4059d8 <__sflush_r>
  405b3c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  405b3e:	07da      	lsls	r2, r3, #31
  405b40:	4604      	mov	r4, r0
  405b42:	d402      	bmi.n	405b4a <_fflush_r+0x32>
  405b44:	89ab      	ldrh	r3, [r5, #12]
  405b46:	059b      	lsls	r3, r3, #22
  405b48:	d507      	bpl.n	405b5a <_fflush_r+0x42>
  405b4a:	4620      	mov	r0, r4
  405b4c:	bd38      	pop	{r3, r4, r5, pc}
  405b4e:	4604      	mov	r4, r0
  405b50:	4620      	mov	r0, r4
  405b52:	bd38      	pop	{r3, r4, r5, pc}
  405b54:	f000 f838 	bl	405bc8 <__sinit>
  405b58:	e7e4      	b.n	405b24 <_fflush_r+0xc>
  405b5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405b5c:	f000 fbf6 	bl	40634c <__retarget_lock_release_recursive>
  405b60:	4620      	mov	r0, r4
  405b62:	bd38      	pop	{r3, r4, r5, pc}
  405b64:	6da8      	ldr	r0, [r5, #88]	; 0x58
  405b66:	f000 fbef 	bl	406348 <__retarget_lock_acquire_recursive>
  405b6a:	e7e3      	b.n	405b34 <_fflush_r+0x1c>

00405b6c <_cleanup_r>:
  405b6c:	4901      	ldr	r1, [pc, #4]	; (405b74 <_cleanup_r+0x8>)
  405b6e:	f000 bbaf 	b.w	4062d0 <_fwalk_reent>
  405b72:	bf00      	nop
  405b74:	00406be1 	.word	0x00406be1

00405b78 <std.isra.0>:
  405b78:	b510      	push	{r4, lr}
  405b7a:	2300      	movs	r3, #0
  405b7c:	4604      	mov	r4, r0
  405b7e:	8181      	strh	r1, [r0, #12]
  405b80:	81c2      	strh	r2, [r0, #14]
  405b82:	6003      	str	r3, [r0, #0]
  405b84:	6043      	str	r3, [r0, #4]
  405b86:	6083      	str	r3, [r0, #8]
  405b88:	6643      	str	r3, [r0, #100]	; 0x64
  405b8a:	6103      	str	r3, [r0, #16]
  405b8c:	6143      	str	r3, [r0, #20]
  405b8e:	6183      	str	r3, [r0, #24]
  405b90:	4619      	mov	r1, r3
  405b92:	2208      	movs	r2, #8
  405b94:	305c      	adds	r0, #92	; 0x5c
  405b96:	f7fe fe31 	bl	4047fc <memset>
  405b9a:	4807      	ldr	r0, [pc, #28]	; (405bb8 <std.isra.0+0x40>)
  405b9c:	4907      	ldr	r1, [pc, #28]	; (405bbc <std.isra.0+0x44>)
  405b9e:	4a08      	ldr	r2, [pc, #32]	; (405bc0 <std.isra.0+0x48>)
  405ba0:	4b08      	ldr	r3, [pc, #32]	; (405bc4 <std.isra.0+0x4c>)
  405ba2:	6220      	str	r0, [r4, #32]
  405ba4:	61e4      	str	r4, [r4, #28]
  405ba6:	6261      	str	r1, [r4, #36]	; 0x24
  405ba8:	62a2      	str	r2, [r4, #40]	; 0x28
  405baa:	62e3      	str	r3, [r4, #44]	; 0x2c
  405bac:	f104 0058 	add.w	r0, r4, #88	; 0x58
  405bb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405bb4:	f000 bbc4 	b.w	406340 <__retarget_lock_init_recursive>
  405bb8:	00406925 	.word	0x00406925
  405bbc:	00406949 	.word	0x00406949
  405bc0:	00406985 	.word	0x00406985
  405bc4:	004069a5 	.word	0x004069a5

00405bc8 <__sinit>:
  405bc8:	b510      	push	{r4, lr}
  405bca:	4604      	mov	r4, r0
  405bcc:	4812      	ldr	r0, [pc, #72]	; (405c18 <__sinit+0x50>)
  405bce:	f000 fbbb 	bl	406348 <__retarget_lock_acquire_recursive>
  405bd2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  405bd4:	b9d2      	cbnz	r2, 405c0c <__sinit+0x44>
  405bd6:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
  405bda:	4810      	ldr	r0, [pc, #64]	; (405c1c <__sinit+0x54>)
  405bdc:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
  405be0:	2103      	movs	r1, #3
  405be2:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
  405be6:	63e0      	str	r0, [r4, #60]	; 0x3c
  405be8:	f8c4 12e4 	str.w	r1, [r4, #740]	; 0x2e4
  405bec:	6860      	ldr	r0, [r4, #4]
  405bee:	2104      	movs	r1, #4
  405bf0:	f7ff ffc2 	bl	405b78 <std.isra.0>
  405bf4:	2201      	movs	r2, #1
  405bf6:	2109      	movs	r1, #9
  405bf8:	68a0      	ldr	r0, [r4, #8]
  405bfa:	f7ff ffbd 	bl	405b78 <std.isra.0>
  405bfe:	2202      	movs	r2, #2
  405c00:	2112      	movs	r1, #18
  405c02:	68e0      	ldr	r0, [r4, #12]
  405c04:	f7ff ffb8 	bl	405b78 <std.isra.0>
  405c08:	2301      	movs	r3, #1
  405c0a:	63a3      	str	r3, [r4, #56]	; 0x38
  405c0c:	4802      	ldr	r0, [pc, #8]	; (405c18 <__sinit+0x50>)
  405c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  405c12:	f000 bb9b 	b.w	40634c <__retarget_lock_release_recursive>
  405c16:	bf00      	nop
  405c18:	2040c804 	.word	0x2040c804
  405c1c:	00405b6d 	.word	0x00405b6d

00405c20 <__sfp_lock_acquire>:
  405c20:	4801      	ldr	r0, [pc, #4]	; (405c28 <__sfp_lock_acquire+0x8>)
  405c22:	f000 bb91 	b.w	406348 <__retarget_lock_acquire_recursive>
  405c26:	bf00      	nop
  405c28:	2040c818 	.word	0x2040c818

00405c2c <__sfp_lock_release>:
  405c2c:	4801      	ldr	r0, [pc, #4]	; (405c34 <__sfp_lock_release+0x8>)
  405c2e:	f000 bb8d 	b.w	40634c <__retarget_lock_release_recursive>
  405c32:	bf00      	nop
  405c34:	2040c818 	.word	0x2040c818

00405c38 <__libc_fini_array>:
  405c38:	b538      	push	{r3, r4, r5, lr}
  405c3a:	4c0a      	ldr	r4, [pc, #40]	; (405c64 <__libc_fini_array+0x2c>)
  405c3c:	4d0a      	ldr	r5, [pc, #40]	; (405c68 <__libc_fini_array+0x30>)
  405c3e:	1b64      	subs	r4, r4, r5
  405c40:	10a4      	asrs	r4, r4, #2
  405c42:	d00a      	beq.n	405c5a <__libc_fini_array+0x22>
  405c44:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  405c48:	3b01      	subs	r3, #1
  405c4a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  405c4e:	3c01      	subs	r4, #1
  405c50:	f855 3904 	ldr.w	r3, [r5], #-4
  405c54:	4798      	blx	r3
  405c56:	2c00      	cmp	r4, #0
  405c58:	d1f9      	bne.n	405c4e <__libc_fini_array+0x16>
  405c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  405c5e:	f00c bc1b 	b.w	412498 <_fini>
  405c62:	bf00      	nop
  405c64:	004124a8 	.word	0x004124a8
  405c68:	004124a4 	.word	0x004124a4

00405c6c <__fputwc>:
  405c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  405c70:	b082      	sub	sp, #8
  405c72:	4680      	mov	r8, r0
  405c74:	4689      	mov	r9, r1
  405c76:	4614      	mov	r4, r2
  405c78:	f000 fb54 	bl	406324 <__locale_mb_cur_max>
  405c7c:	2801      	cmp	r0, #1
  405c7e:	d036      	beq.n	405cee <__fputwc+0x82>
  405c80:	464a      	mov	r2, r9
  405c82:	f104 035c 	add.w	r3, r4, #92	; 0x5c
  405c86:	a901      	add	r1, sp, #4
  405c88:	4640      	mov	r0, r8
  405c8a:	f000 fee7 	bl	406a5c <_wcrtomb_r>
  405c8e:	1c42      	adds	r2, r0, #1
  405c90:	4606      	mov	r6, r0
  405c92:	d025      	beq.n	405ce0 <__fputwc+0x74>
  405c94:	b3a8      	cbz	r0, 405d02 <__fputwc+0x96>
  405c96:	f89d e004 	ldrb.w	lr, [sp, #4]
  405c9a:	2500      	movs	r5, #0
  405c9c:	f10d 0a04 	add.w	sl, sp, #4
  405ca0:	e009      	b.n	405cb6 <__fputwc+0x4a>
  405ca2:	6823      	ldr	r3, [r4, #0]
  405ca4:	1c5a      	adds	r2, r3, #1
  405ca6:	6022      	str	r2, [r4, #0]
  405ca8:	f883 e000 	strb.w	lr, [r3]
  405cac:	3501      	adds	r5, #1
  405cae:	42b5      	cmp	r5, r6
  405cb0:	d227      	bcs.n	405d02 <__fputwc+0x96>
  405cb2:	f815 e00a 	ldrb.w	lr, [r5, sl]
  405cb6:	68a3      	ldr	r3, [r4, #8]
  405cb8:	3b01      	subs	r3, #1
  405cba:	2b00      	cmp	r3, #0
  405cbc:	60a3      	str	r3, [r4, #8]
  405cbe:	daf0      	bge.n	405ca2 <__fputwc+0x36>
  405cc0:	69a7      	ldr	r7, [r4, #24]
  405cc2:	42bb      	cmp	r3, r7
  405cc4:	4671      	mov	r1, lr
  405cc6:	4622      	mov	r2, r4
  405cc8:	4640      	mov	r0, r8
  405cca:	db02      	blt.n	405cd2 <__fputwc+0x66>
  405ccc:	f1be 0f0a 	cmp.w	lr, #10
  405cd0:	d1e7      	bne.n	405ca2 <__fputwc+0x36>
  405cd2:	f000 fe6b 	bl	4069ac <__swbuf_r>
  405cd6:	1c43      	adds	r3, r0, #1
  405cd8:	d1e8      	bne.n	405cac <__fputwc+0x40>
  405cda:	b002      	add	sp, #8
  405cdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405ce0:	89a3      	ldrh	r3, [r4, #12]
  405ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  405ce6:	81a3      	strh	r3, [r4, #12]
  405ce8:	b002      	add	sp, #8
  405cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405cee:	f109 33ff 	add.w	r3, r9, #4294967295
  405cf2:	2bfe      	cmp	r3, #254	; 0xfe
  405cf4:	d8c4      	bhi.n	405c80 <__fputwc+0x14>
  405cf6:	fa5f fe89 	uxtb.w	lr, r9
  405cfa:	4606      	mov	r6, r0
  405cfc:	f88d e004 	strb.w	lr, [sp, #4]
  405d00:	e7cb      	b.n	405c9a <__fputwc+0x2e>
  405d02:	4648      	mov	r0, r9
  405d04:	b002      	add	sp, #8
  405d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  405d0a:	bf00      	nop

00405d0c <_fputwc_r>:
  405d0c:	b530      	push	{r4, r5, lr}
  405d0e:	6e53      	ldr	r3, [r2, #100]	; 0x64
  405d10:	f013 0f01 	tst.w	r3, #1
  405d14:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
  405d18:	4614      	mov	r4, r2
  405d1a:	b083      	sub	sp, #12
  405d1c:	4605      	mov	r5, r0
  405d1e:	b29a      	uxth	r2, r3
  405d20:	d101      	bne.n	405d26 <_fputwc_r+0x1a>
  405d22:	0590      	lsls	r0, r2, #22
  405d24:	d51c      	bpl.n	405d60 <_fputwc_r+0x54>
  405d26:	0490      	lsls	r0, r2, #18
  405d28:	d406      	bmi.n	405d38 <_fputwc_r+0x2c>
  405d2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
  405d2c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
  405d30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  405d34:	81a3      	strh	r3, [r4, #12]
  405d36:	6662      	str	r2, [r4, #100]	; 0x64
  405d38:	4628      	mov	r0, r5
  405d3a:	4622      	mov	r2, r4
  405d3c:	f7ff ff96 	bl	405c6c <__fputwc>
  405d40:	6e63      	ldr	r3, [r4, #100]	; 0x64
  405d42:	07da      	lsls	r2, r3, #31
  405d44:	4605      	mov	r5, r0
  405d46:	d402      	bmi.n	405d4e <_fputwc_r+0x42>
  405d48:	89a3      	ldrh	r3, [r4, #12]
  405d4a:	059b      	lsls	r3, r3, #22
  405d4c:	d502      	bpl.n	405d54 <_fputwc_r+0x48>
  405d4e:	4628      	mov	r0, r5
  405d50:	b003      	add	sp, #12
  405d52:	bd30      	pop	{r4, r5, pc}
  405d54:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405d56:	f000 faf9 	bl	40634c <__retarget_lock_release_recursive>
  405d5a:	4628      	mov	r0, r5
  405d5c:	b003      	add	sp, #12
  405d5e:	bd30      	pop	{r4, r5, pc}
  405d60:	6da0      	ldr	r0, [r4, #88]	; 0x58
  405d62:	9101      	str	r1, [sp, #4]
  405d64:	f000 faf0 	bl	406348 <__retarget_lock_acquire_recursive>
  405d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  405d6c:	9901      	ldr	r1, [sp, #4]
  405d6e:	b29a      	uxth	r2, r3
  405d70:	e7d9      	b.n	405d26 <_fputwc_r+0x1a>
  405d72:	bf00      	nop

00405d74 <_malloc_trim_r>:
  405d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  405d76:	4f24      	ldr	r7, [pc, #144]	; (405e08 <_malloc_trim_r+0x94>)
  405d78:	460c      	mov	r4, r1
  405d7a:	4606      	mov	r6, r0
  405d7c:	f7fe fd8c 	bl	404898 <__malloc_lock>
  405d80:	68bb      	ldr	r3, [r7, #8]
  405d82:	685d      	ldr	r5, [r3, #4]
  405d84:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
  405d88:	310f      	adds	r1, #15
  405d8a:	f025 0503 	bic.w	r5, r5, #3
  405d8e:	4429      	add	r1, r5
  405d90:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
  405d94:	f021 010f 	bic.w	r1, r1, #15
  405d98:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
  405d9c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
  405da0:	db07      	blt.n	405db2 <_malloc_trim_r+0x3e>
  405da2:	2100      	movs	r1, #0
  405da4:	4630      	mov	r0, r6
  405da6:	f7fe fd83 	bl	4048b0 <_sbrk_r>
  405daa:	68bb      	ldr	r3, [r7, #8]
  405dac:	442b      	add	r3, r5
  405dae:	4298      	cmp	r0, r3
  405db0:	d004      	beq.n	405dbc <_malloc_trim_r+0x48>
  405db2:	4630      	mov	r0, r6
  405db4:	f7fe fd76 	bl	4048a4 <__malloc_unlock>
  405db8:	2000      	movs	r0, #0
  405dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405dbc:	4261      	negs	r1, r4
  405dbe:	4630      	mov	r0, r6
  405dc0:	f7fe fd76 	bl	4048b0 <_sbrk_r>
  405dc4:	3001      	adds	r0, #1
  405dc6:	d00d      	beq.n	405de4 <_malloc_trim_r+0x70>
  405dc8:	4b10      	ldr	r3, [pc, #64]	; (405e0c <_malloc_trim_r+0x98>)
  405dca:	68ba      	ldr	r2, [r7, #8]
  405dcc:	6819      	ldr	r1, [r3, #0]
  405dce:	1b2d      	subs	r5, r5, r4
  405dd0:	f045 0501 	orr.w	r5, r5, #1
  405dd4:	4630      	mov	r0, r6
  405dd6:	1b09      	subs	r1, r1, r4
  405dd8:	6055      	str	r5, [r2, #4]
  405dda:	6019      	str	r1, [r3, #0]
  405ddc:	f7fe fd62 	bl	4048a4 <__malloc_unlock>
  405de0:	2001      	movs	r0, #1
  405de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  405de4:	2100      	movs	r1, #0
  405de6:	4630      	mov	r0, r6
  405de8:	f7fe fd62 	bl	4048b0 <_sbrk_r>
  405dec:	68ba      	ldr	r2, [r7, #8]
  405dee:	1a83      	subs	r3, r0, r2
  405df0:	2b0f      	cmp	r3, #15
  405df2:	ddde      	ble.n	405db2 <_malloc_trim_r+0x3e>
  405df4:	4c06      	ldr	r4, [pc, #24]	; (405e10 <_malloc_trim_r+0x9c>)
  405df6:	4905      	ldr	r1, [pc, #20]	; (405e0c <_malloc_trim_r+0x98>)
  405df8:	6824      	ldr	r4, [r4, #0]
  405dfa:	f043 0301 	orr.w	r3, r3, #1
  405dfe:	1b00      	subs	r0, r0, r4
  405e00:	6053      	str	r3, [r2, #4]
  405e02:	6008      	str	r0, [r1, #0]
  405e04:	e7d5      	b.n	405db2 <_malloc_trim_r+0x3e>
  405e06:	bf00      	nop
  405e08:	20400448 	.word	0x20400448
  405e0c:	2040c764 	.word	0x2040c764
  405e10:	20400850 	.word	0x20400850

00405e14 <_free_r>:
  405e14:	2900      	cmp	r1, #0
  405e16:	d044      	beq.n	405ea2 <_free_r+0x8e>
  405e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  405e1c:	460d      	mov	r5, r1
  405e1e:	4680      	mov	r8, r0
  405e20:	f7fe fd3a 	bl	404898 <__malloc_lock>
  405e24:	f855 7c04 	ldr.w	r7, [r5, #-4]
  405e28:	4969      	ldr	r1, [pc, #420]	; (405fd0 <_free_r+0x1bc>)
  405e2a:	f027 0301 	bic.w	r3, r7, #1
  405e2e:	f1a5 0408 	sub.w	r4, r5, #8
  405e32:	18e2      	adds	r2, r4, r3
  405e34:	688e      	ldr	r6, [r1, #8]
  405e36:	6850      	ldr	r0, [r2, #4]
  405e38:	42b2      	cmp	r2, r6
  405e3a:	f020 0003 	bic.w	r0, r0, #3
  405e3e:	d05e      	beq.n	405efe <_free_r+0xea>
  405e40:	07fe      	lsls	r6, r7, #31
  405e42:	6050      	str	r0, [r2, #4]
  405e44:	d40b      	bmi.n	405e5e <_free_r+0x4a>
  405e46:	f855 7c08 	ldr.w	r7, [r5, #-8]
  405e4a:	1be4      	subs	r4, r4, r7
  405e4c:	f101 0e08 	add.w	lr, r1, #8
  405e50:	68a5      	ldr	r5, [r4, #8]
  405e52:	4575      	cmp	r5, lr
  405e54:	443b      	add	r3, r7
  405e56:	d06d      	beq.n	405f34 <_free_r+0x120>
  405e58:	68e7      	ldr	r7, [r4, #12]
  405e5a:	60ef      	str	r7, [r5, #12]
  405e5c:	60bd      	str	r5, [r7, #8]
  405e5e:	1815      	adds	r5, r2, r0
  405e60:	686d      	ldr	r5, [r5, #4]
  405e62:	07ed      	lsls	r5, r5, #31
  405e64:	d53e      	bpl.n	405ee4 <_free_r+0xd0>
  405e66:	f043 0201 	orr.w	r2, r3, #1
  405e6a:	6062      	str	r2, [r4, #4]
  405e6c:	50e3      	str	r3, [r4, r3]
  405e6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
  405e72:	d217      	bcs.n	405ea4 <_free_r+0x90>
  405e74:	08db      	lsrs	r3, r3, #3
  405e76:	1c58      	adds	r0, r3, #1
  405e78:	109a      	asrs	r2, r3, #2
  405e7a:	684d      	ldr	r5, [r1, #4]
  405e7c:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
  405e80:	60a7      	str	r7, [r4, #8]
  405e82:	2301      	movs	r3, #1
  405e84:	4093      	lsls	r3, r2
  405e86:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
  405e8a:	432b      	orrs	r3, r5
  405e8c:	3a08      	subs	r2, #8
  405e8e:	60e2      	str	r2, [r4, #12]
  405e90:	604b      	str	r3, [r1, #4]
  405e92:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
  405e96:	60fc      	str	r4, [r7, #12]
  405e98:	4640      	mov	r0, r8
  405e9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405e9e:	f7fe bd01 	b.w	4048a4 <__malloc_unlock>
  405ea2:	4770      	bx	lr
  405ea4:	0a5a      	lsrs	r2, r3, #9
  405ea6:	2a04      	cmp	r2, #4
  405ea8:	d852      	bhi.n	405f50 <_free_r+0x13c>
  405eaa:	099a      	lsrs	r2, r3, #6
  405eac:	f102 0739 	add.w	r7, r2, #57	; 0x39
  405eb0:	00ff      	lsls	r7, r7, #3
  405eb2:	f102 0538 	add.w	r5, r2, #56	; 0x38
  405eb6:	19c8      	adds	r0, r1, r7
  405eb8:	59ca      	ldr	r2, [r1, r7]
  405eba:	3808      	subs	r0, #8
  405ebc:	4290      	cmp	r0, r2
  405ebe:	d04f      	beq.n	405f60 <_free_r+0x14c>
  405ec0:	6851      	ldr	r1, [r2, #4]
  405ec2:	f021 0103 	bic.w	r1, r1, #3
  405ec6:	428b      	cmp	r3, r1
  405ec8:	d232      	bcs.n	405f30 <_free_r+0x11c>
  405eca:	6892      	ldr	r2, [r2, #8]
  405ecc:	4290      	cmp	r0, r2
  405ece:	d1f7      	bne.n	405ec0 <_free_r+0xac>
  405ed0:	68c3      	ldr	r3, [r0, #12]
  405ed2:	60a0      	str	r0, [r4, #8]
  405ed4:	60e3      	str	r3, [r4, #12]
  405ed6:	609c      	str	r4, [r3, #8]
  405ed8:	60c4      	str	r4, [r0, #12]
  405eda:	4640      	mov	r0, r8
  405edc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  405ee0:	f7fe bce0 	b.w	4048a4 <__malloc_unlock>
  405ee4:	6895      	ldr	r5, [r2, #8]
  405ee6:	4f3b      	ldr	r7, [pc, #236]	; (405fd4 <_free_r+0x1c0>)
  405ee8:	42bd      	cmp	r5, r7
  405eea:	4403      	add	r3, r0
  405eec:	d040      	beq.n	405f70 <_free_r+0x15c>
  405eee:	68d0      	ldr	r0, [r2, #12]
  405ef0:	60e8      	str	r0, [r5, #12]
  405ef2:	f043 0201 	orr.w	r2, r3, #1
  405ef6:	6085      	str	r5, [r0, #8]
  405ef8:	6062      	str	r2, [r4, #4]
  405efa:	50e3      	str	r3, [r4, r3]
  405efc:	e7b7      	b.n	405e6e <_free_r+0x5a>
  405efe:	07ff      	lsls	r7, r7, #31
  405f00:	4403      	add	r3, r0
  405f02:	d407      	bmi.n	405f14 <_free_r+0x100>
  405f04:	f855 2c08 	ldr.w	r2, [r5, #-8]
  405f08:	1aa4      	subs	r4, r4, r2
  405f0a:	4413      	add	r3, r2
  405f0c:	68a0      	ldr	r0, [r4, #8]
  405f0e:	68e2      	ldr	r2, [r4, #12]
  405f10:	60c2      	str	r2, [r0, #12]
  405f12:	6090      	str	r0, [r2, #8]
  405f14:	4a30      	ldr	r2, [pc, #192]	; (405fd8 <_free_r+0x1c4>)
  405f16:	6812      	ldr	r2, [r2, #0]
  405f18:	f043 0001 	orr.w	r0, r3, #1
  405f1c:	4293      	cmp	r3, r2
  405f1e:	6060      	str	r0, [r4, #4]
  405f20:	608c      	str	r4, [r1, #8]
  405f22:	d3b9      	bcc.n	405e98 <_free_r+0x84>
  405f24:	4b2d      	ldr	r3, [pc, #180]	; (405fdc <_free_r+0x1c8>)
  405f26:	4640      	mov	r0, r8
  405f28:	6819      	ldr	r1, [r3, #0]
  405f2a:	f7ff ff23 	bl	405d74 <_malloc_trim_r>
  405f2e:	e7b3      	b.n	405e98 <_free_r+0x84>
  405f30:	4610      	mov	r0, r2
  405f32:	e7cd      	b.n	405ed0 <_free_r+0xbc>
  405f34:	1811      	adds	r1, r2, r0
  405f36:	6849      	ldr	r1, [r1, #4]
  405f38:	07c9      	lsls	r1, r1, #31
  405f3a:	d444      	bmi.n	405fc6 <_free_r+0x1b2>
  405f3c:	6891      	ldr	r1, [r2, #8]
  405f3e:	68d2      	ldr	r2, [r2, #12]
  405f40:	60ca      	str	r2, [r1, #12]
  405f42:	4403      	add	r3, r0
  405f44:	f043 0001 	orr.w	r0, r3, #1
  405f48:	6091      	str	r1, [r2, #8]
  405f4a:	6060      	str	r0, [r4, #4]
  405f4c:	50e3      	str	r3, [r4, r3]
  405f4e:	e7a3      	b.n	405e98 <_free_r+0x84>
  405f50:	2a14      	cmp	r2, #20
  405f52:	d816      	bhi.n	405f82 <_free_r+0x16e>
  405f54:	f102 075c 	add.w	r7, r2, #92	; 0x5c
  405f58:	00ff      	lsls	r7, r7, #3
  405f5a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
  405f5e:	e7aa      	b.n	405eb6 <_free_r+0xa2>
  405f60:	10aa      	asrs	r2, r5, #2
  405f62:	2301      	movs	r3, #1
  405f64:	684d      	ldr	r5, [r1, #4]
  405f66:	4093      	lsls	r3, r2
  405f68:	432b      	orrs	r3, r5
  405f6a:	604b      	str	r3, [r1, #4]
  405f6c:	4603      	mov	r3, r0
  405f6e:	e7b0      	b.n	405ed2 <_free_r+0xbe>
  405f70:	f043 0201 	orr.w	r2, r3, #1
  405f74:	614c      	str	r4, [r1, #20]
  405f76:	610c      	str	r4, [r1, #16]
  405f78:	60e5      	str	r5, [r4, #12]
  405f7a:	60a5      	str	r5, [r4, #8]
  405f7c:	6062      	str	r2, [r4, #4]
  405f7e:	50e3      	str	r3, [r4, r3]
  405f80:	e78a      	b.n	405e98 <_free_r+0x84>
  405f82:	2a54      	cmp	r2, #84	; 0x54
  405f84:	d806      	bhi.n	405f94 <_free_r+0x180>
  405f86:	0b1a      	lsrs	r2, r3, #12
  405f88:	f102 076f 	add.w	r7, r2, #111	; 0x6f
  405f8c:	00ff      	lsls	r7, r7, #3
  405f8e:	f102 056e 	add.w	r5, r2, #110	; 0x6e
  405f92:	e790      	b.n	405eb6 <_free_r+0xa2>
  405f94:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
  405f98:	d806      	bhi.n	405fa8 <_free_r+0x194>
  405f9a:	0bda      	lsrs	r2, r3, #15
  405f9c:	f102 0778 	add.w	r7, r2, #120	; 0x78
  405fa0:	00ff      	lsls	r7, r7, #3
  405fa2:	f102 0577 	add.w	r5, r2, #119	; 0x77
  405fa6:	e786      	b.n	405eb6 <_free_r+0xa2>
  405fa8:	f240 5054 	movw	r0, #1364	; 0x554
  405fac:	4282      	cmp	r2, r0
  405fae:	d806      	bhi.n	405fbe <_free_r+0x1aa>
  405fb0:	0c9a      	lsrs	r2, r3, #18
  405fb2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
  405fb6:	00ff      	lsls	r7, r7, #3
  405fb8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
  405fbc:	e77b      	b.n	405eb6 <_free_r+0xa2>
  405fbe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
  405fc2:	257e      	movs	r5, #126	; 0x7e
  405fc4:	e777      	b.n	405eb6 <_free_r+0xa2>
  405fc6:	f043 0101 	orr.w	r1, r3, #1
  405fca:	6061      	str	r1, [r4, #4]
  405fcc:	6013      	str	r3, [r2, #0]
  405fce:	e763      	b.n	405e98 <_free_r+0x84>
  405fd0:	20400448 	.word	0x20400448
  405fd4:	20400450 	.word	0x20400450
  405fd8:	20400854 	.word	0x20400854
  405fdc:	2040c794 	.word	0x2040c794

00405fe0 <__sfvwrite_r>:
  405fe0:	6893      	ldr	r3, [r2, #8]
  405fe2:	2b00      	cmp	r3, #0
  405fe4:	d073      	beq.n	4060ce <__sfvwrite_r+0xee>
  405fe6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  405fea:	898b      	ldrh	r3, [r1, #12]
  405fec:	b083      	sub	sp, #12
  405fee:	460c      	mov	r4, r1
  405ff0:	0719      	lsls	r1, r3, #28
  405ff2:	9000      	str	r0, [sp, #0]
  405ff4:	4616      	mov	r6, r2
  405ff6:	d526      	bpl.n	406046 <__sfvwrite_r+0x66>
  405ff8:	6922      	ldr	r2, [r4, #16]
  405ffa:	b322      	cbz	r2, 406046 <__sfvwrite_r+0x66>
  405ffc:	f013 0002 	ands.w	r0, r3, #2
  406000:	6835      	ldr	r5, [r6, #0]
  406002:	d02c      	beq.n	40605e <__sfvwrite_r+0x7e>
  406004:	f04f 0900 	mov.w	r9, #0
  406008:	4fb0      	ldr	r7, [pc, #704]	; (4062cc <__sfvwrite_r+0x2ec>)
  40600a:	46c8      	mov	r8, r9
  40600c:	46b2      	mov	sl, r6
  40600e:	45b8      	cmp	r8, r7
  406010:	4643      	mov	r3, r8
  406012:	464a      	mov	r2, r9
  406014:	bf28      	it	cs
  406016:	463b      	movcs	r3, r7
  406018:	9800      	ldr	r0, [sp, #0]
  40601a:	f1b8 0f00 	cmp.w	r8, #0
  40601e:	d050      	beq.n	4060c2 <__sfvwrite_r+0xe2>
  406020:	69e1      	ldr	r1, [r4, #28]
  406022:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406024:	47b0      	blx	r6
  406026:	2800      	cmp	r0, #0
  406028:	dd58      	ble.n	4060dc <__sfvwrite_r+0xfc>
  40602a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40602e:	1a1b      	subs	r3, r3, r0
  406030:	4481      	add	r9, r0
  406032:	eba8 0800 	sub.w	r8, r8, r0
  406036:	f8ca 3008 	str.w	r3, [sl, #8]
  40603a:	2b00      	cmp	r3, #0
  40603c:	d1e7      	bne.n	40600e <__sfvwrite_r+0x2e>
  40603e:	2000      	movs	r0, #0
  406040:	b003      	add	sp, #12
  406042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406046:	4621      	mov	r1, r4
  406048:	9800      	ldr	r0, [sp, #0]
  40604a:	f7ff fc51 	bl	4058f0 <__swsetup_r>
  40604e:	2800      	cmp	r0, #0
  406050:	f040 8133 	bne.w	4062ba <__sfvwrite_r+0x2da>
  406054:	89a3      	ldrh	r3, [r4, #12]
  406056:	6835      	ldr	r5, [r6, #0]
  406058:	f013 0002 	ands.w	r0, r3, #2
  40605c:	d1d2      	bne.n	406004 <__sfvwrite_r+0x24>
  40605e:	f013 0901 	ands.w	r9, r3, #1
  406062:	d145      	bne.n	4060f0 <__sfvwrite_r+0x110>
  406064:	464f      	mov	r7, r9
  406066:	9601      	str	r6, [sp, #4]
  406068:	b337      	cbz	r7, 4060b8 <__sfvwrite_r+0xd8>
  40606a:	059a      	lsls	r2, r3, #22
  40606c:	f8d4 8008 	ldr.w	r8, [r4, #8]
  406070:	f140 8083 	bpl.w	40617a <__sfvwrite_r+0x19a>
  406074:	4547      	cmp	r7, r8
  406076:	46c3      	mov	fp, r8
  406078:	f0c0 80ab 	bcc.w	4061d2 <__sfvwrite_r+0x1f2>
  40607c:	f413 6f90 	tst.w	r3, #1152	; 0x480
  406080:	f040 80ac 	bne.w	4061dc <__sfvwrite_r+0x1fc>
  406084:	6820      	ldr	r0, [r4, #0]
  406086:	46ba      	mov	sl, r7
  406088:	465a      	mov	r2, fp
  40608a:	4649      	mov	r1, r9
  40608c:	f000 fa40 	bl	406510 <memmove>
  406090:	68a2      	ldr	r2, [r4, #8]
  406092:	6823      	ldr	r3, [r4, #0]
  406094:	eba2 0208 	sub.w	r2, r2, r8
  406098:	445b      	add	r3, fp
  40609a:	60a2      	str	r2, [r4, #8]
  40609c:	6023      	str	r3, [r4, #0]
  40609e:	9a01      	ldr	r2, [sp, #4]
  4060a0:	6893      	ldr	r3, [r2, #8]
  4060a2:	eba3 030a 	sub.w	r3, r3, sl
  4060a6:	44d1      	add	r9, sl
  4060a8:	eba7 070a 	sub.w	r7, r7, sl
  4060ac:	6093      	str	r3, [r2, #8]
  4060ae:	2b00      	cmp	r3, #0
  4060b0:	d0c5      	beq.n	40603e <__sfvwrite_r+0x5e>
  4060b2:	89a3      	ldrh	r3, [r4, #12]
  4060b4:	2f00      	cmp	r7, #0
  4060b6:	d1d8      	bne.n	40606a <__sfvwrite_r+0x8a>
  4060b8:	f8d5 9000 	ldr.w	r9, [r5]
  4060bc:	686f      	ldr	r7, [r5, #4]
  4060be:	3508      	adds	r5, #8
  4060c0:	e7d2      	b.n	406068 <__sfvwrite_r+0x88>
  4060c2:	f8d5 9000 	ldr.w	r9, [r5]
  4060c6:	f8d5 8004 	ldr.w	r8, [r5, #4]
  4060ca:	3508      	adds	r5, #8
  4060cc:	e79f      	b.n	40600e <__sfvwrite_r+0x2e>
  4060ce:	2000      	movs	r0, #0
  4060d0:	4770      	bx	lr
  4060d2:	4621      	mov	r1, r4
  4060d4:	9800      	ldr	r0, [sp, #0]
  4060d6:	f7ff fd1f 	bl	405b18 <_fflush_r>
  4060da:	b370      	cbz	r0, 40613a <__sfvwrite_r+0x15a>
  4060dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4060e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
  4060e4:	f04f 30ff 	mov.w	r0, #4294967295
  4060e8:	81a3      	strh	r3, [r4, #12]
  4060ea:	b003      	add	sp, #12
  4060ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4060f0:	4681      	mov	r9, r0
  4060f2:	4633      	mov	r3, r6
  4060f4:	464e      	mov	r6, r9
  4060f6:	46a8      	mov	r8, r5
  4060f8:	469a      	mov	sl, r3
  4060fa:	464d      	mov	r5, r9
  4060fc:	b34e      	cbz	r6, 406152 <__sfvwrite_r+0x172>
  4060fe:	b380      	cbz	r0, 406162 <__sfvwrite_r+0x182>
  406100:	6820      	ldr	r0, [r4, #0]
  406102:	6923      	ldr	r3, [r4, #16]
  406104:	6962      	ldr	r2, [r4, #20]
  406106:	45b1      	cmp	r9, r6
  406108:	46cb      	mov	fp, r9
  40610a:	bf28      	it	cs
  40610c:	46b3      	movcs	fp, r6
  40610e:	4298      	cmp	r0, r3
  406110:	465f      	mov	r7, fp
  406112:	d904      	bls.n	40611e <__sfvwrite_r+0x13e>
  406114:	68a3      	ldr	r3, [r4, #8]
  406116:	4413      	add	r3, r2
  406118:	459b      	cmp	fp, r3
  40611a:	f300 80a6 	bgt.w	40626a <__sfvwrite_r+0x28a>
  40611e:	4593      	cmp	fp, r2
  406120:	db4b      	blt.n	4061ba <__sfvwrite_r+0x1da>
  406122:	4613      	mov	r3, r2
  406124:	6a67      	ldr	r7, [r4, #36]	; 0x24
  406126:	69e1      	ldr	r1, [r4, #28]
  406128:	9800      	ldr	r0, [sp, #0]
  40612a:	462a      	mov	r2, r5
  40612c:	47b8      	blx	r7
  40612e:	1e07      	subs	r7, r0, #0
  406130:	ddd4      	ble.n	4060dc <__sfvwrite_r+0xfc>
  406132:	ebb9 0907 	subs.w	r9, r9, r7
  406136:	d0cc      	beq.n	4060d2 <__sfvwrite_r+0xf2>
  406138:	2001      	movs	r0, #1
  40613a:	f8da 3008 	ldr.w	r3, [sl, #8]
  40613e:	1bdb      	subs	r3, r3, r7
  406140:	443d      	add	r5, r7
  406142:	1bf6      	subs	r6, r6, r7
  406144:	f8ca 3008 	str.w	r3, [sl, #8]
  406148:	2b00      	cmp	r3, #0
  40614a:	f43f af78 	beq.w	40603e <__sfvwrite_r+0x5e>
  40614e:	2e00      	cmp	r6, #0
  406150:	d1d5      	bne.n	4060fe <__sfvwrite_r+0x11e>
  406152:	f108 0308 	add.w	r3, r8, #8
  406156:	e913 0060 	ldmdb	r3, {r5, r6}
  40615a:	4698      	mov	r8, r3
  40615c:	3308      	adds	r3, #8
  40615e:	2e00      	cmp	r6, #0
  406160:	d0f9      	beq.n	406156 <__sfvwrite_r+0x176>
  406162:	4632      	mov	r2, r6
  406164:	210a      	movs	r1, #10
  406166:	4628      	mov	r0, r5
  406168:	f000 f982 	bl	406470 <memchr>
  40616c:	2800      	cmp	r0, #0
  40616e:	f000 80a1 	beq.w	4062b4 <__sfvwrite_r+0x2d4>
  406172:	3001      	adds	r0, #1
  406174:	eba0 0905 	sub.w	r9, r0, r5
  406178:	e7c2      	b.n	406100 <__sfvwrite_r+0x120>
  40617a:	6820      	ldr	r0, [r4, #0]
  40617c:	6923      	ldr	r3, [r4, #16]
  40617e:	4298      	cmp	r0, r3
  406180:	d802      	bhi.n	406188 <__sfvwrite_r+0x1a8>
  406182:	6963      	ldr	r3, [r4, #20]
  406184:	429f      	cmp	r7, r3
  406186:	d25d      	bcs.n	406244 <__sfvwrite_r+0x264>
  406188:	45b8      	cmp	r8, r7
  40618a:	bf28      	it	cs
  40618c:	46b8      	movcs	r8, r7
  40618e:	4642      	mov	r2, r8
  406190:	4649      	mov	r1, r9
  406192:	f000 f9bd 	bl	406510 <memmove>
  406196:	68a3      	ldr	r3, [r4, #8]
  406198:	6822      	ldr	r2, [r4, #0]
  40619a:	eba3 0308 	sub.w	r3, r3, r8
  40619e:	4442      	add	r2, r8
  4061a0:	60a3      	str	r3, [r4, #8]
  4061a2:	6022      	str	r2, [r4, #0]
  4061a4:	b10b      	cbz	r3, 4061aa <__sfvwrite_r+0x1ca>
  4061a6:	46c2      	mov	sl, r8
  4061a8:	e779      	b.n	40609e <__sfvwrite_r+0xbe>
  4061aa:	4621      	mov	r1, r4
  4061ac:	9800      	ldr	r0, [sp, #0]
  4061ae:	f7ff fcb3 	bl	405b18 <_fflush_r>
  4061b2:	2800      	cmp	r0, #0
  4061b4:	d192      	bne.n	4060dc <__sfvwrite_r+0xfc>
  4061b6:	46c2      	mov	sl, r8
  4061b8:	e771      	b.n	40609e <__sfvwrite_r+0xbe>
  4061ba:	465a      	mov	r2, fp
  4061bc:	4629      	mov	r1, r5
  4061be:	f000 f9a7 	bl	406510 <memmove>
  4061c2:	68a2      	ldr	r2, [r4, #8]
  4061c4:	6823      	ldr	r3, [r4, #0]
  4061c6:	eba2 020b 	sub.w	r2, r2, fp
  4061ca:	445b      	add	r3, fp
  4061cc:	60a2      	str	r2, [r4, #8]
  4061ce:	6023      	str	r3, [r4, #0]
  4061d0:	e7af      	b.n	406132 <__sfvwrite_r+0x152>
  4061d2:	6820      	ldr	r0, [r4, #0]
  4061d4:	46b8      	mov	r8, r7
  4061d6:	46ba      	mov	sl, r7
  4061d8:	46bb      	mov	fp, r7
  4061da:	e755      	b.n	406088 <__sfvwrite_r+0xa8>
  4061dc:	6962      	ldr	r2, [r4, #20]
  4061de:	6820      	ldr	r0, [r4, #0]
  4061e0:	6921      	ldr	r1, [r4, #16]
  4061e2:	eb02 0842 	add.w	r8, r2, r2, lsl #1
  4061e6:	eba0 0a01 	sub.w	sl, r0, r1
  4061ea:	eb08 78d8 	add.w	r8, r8, r8, lsr #31
  4061ee:	f10a 0001 	add.w	r0, sl, #1
  4061f2:	ea4f 0868 	mov.w	r8, r8, asr #1
  4061f6:	4438      	add	r0, r7
  4061f8:	4540      	cmp	r0, r8
  4061fa:	4642      	mov	r2, r8
  4061fc:	bf84      	itt	hi
  4061fe:	4680      	movhi	r8, r0
  406200:	4642      	movhi	r2, r8
  406202:	055b      	lsls	r3, r3, #21
  406204:	d544      	bpl.n	406290 <__sfvwrite_r+0x2b0>
  406206:	4611      	mov	r1, r2
  406208:	9800      	ldr	r0, [sp, #0]
  40620a:	f7fd ffad 	bl	404168 <_malloc_r>
  40620e:	4683      	mov	fp, r0
  406210:	2800      	cmp	r0, #0
  406212:	d055      	beq.n	4062c0 <__sfvwrite_r+0x2e0>
  406214:	4652      	mov	r2, sl
  406216:	6921      	ldr	r1, [r4, #16]
  406218:	f7fe fa56 	bl	4046c8 <memcpy>
  40621c:	89a3      	ldrh	r3, [r4, #12]
  40621e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
  406222:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  406226:	81a3      	strh	r3, [r4, #12]
  406228:	eb0b 000a 	add.w	r0, fp, sl
  40622c:	eba8 030a 	sub.w	r3, r8, sl
  406230:	f8c4 b010 	str.w	fp, [r4, #16]
  406234:	f8c4 8014 	str.w	r8, [r4, #20]
  406238:	6020      	str	r0, [r4, #0]
  40623a:	60a3      	str	r3, [r4, #8]
  40623c:	46b8      	mov	r8, r7
  40623e:	46ba      	mov	sl, r7
  406240:	46bb      	mov	fp, r7
  406242:	e721      	b.n	406088 <__sfvwrite_r+0xa8>
  406244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
  406248:	42b9      	cmp	r1, r7
  40624a:	bf28      	it	cs
  40624c:	4639      	movcs	r1, r7
  40624e:	464a      	mov	r2, r9
  406250:	fb91 f1f3 	sdiv	r1, r1, r3
  406254:	9800      	ldr	r0, [sp, #0]
  406256:	6a66      	ldr	r6, [r4, #36]	; 0x24
  406258:	fb03 f301 	mul.w	r3, r3, r1
  40625c:	69e1      	ldr	r1, [r4, #28]
  40625e:	47b0      	blx	r6
  406260:	f1b0 0a00 	subs.w	sl, r0, #0
  406264:	f73f af1b 	bgt.w	40609e <__sfvwrite_r+0xbe>
  406268:	e738      	b.n	4060dc <__sfvwrite_r+0xfc>
  40626a:	461a      	mov	r2, r3
  40626c:	4629      	mov	r1, r5
  40626e:	9301      	str	r3, [sp, #4]
  406270:	f000 f94e 	bl	406510 <memmove>
  406274:	6822      	ldr	r2, [r4, #0]
  406276:	9b01      	ldr	r3, [sp, #4]
  406278:	9800      	ldr	r0, [sp, #0]
  40627a:	441a      	add	r2, r3
  40627c:	6022      	str	r2, [r4, #0]
  40627e:	4621      	mov	r1, r4
  406280:	f7ff fc4a 	bl	405b18 <_fflush_r>
  406284:	9b01      	ldr	r3, [sp, #4]
  406286:	2800      	cmp	r0, #0
  406288:	f47f af28 	bne.w	4060dc <__sfvwrite_r+0xfc>
  40628c:	461f      	mov	r7, r3
  40628e:	e750      	b.n	406132 <__sfvwrite_r+0x152>
  406290:	9800      	ldr	r0, [sp, #0]
  406292:	f000 f9a1 	bl	4065d8 <_realloc_r>
  406296:	4683      	mov	fp, r0
  406298:	2800      	cmp	r0, #0
  40629a:	d1c5      	bne.n	406228 <__sfvwrite_r+0x248>
  40629c:	9d00      	ldr	r5, [sp, #0]
  40629e:	6921      	ldr	r1, [r4, #16]
  4062a0:	4628      	mov	r0, r5
  4062a2:	f7ff fdb7 	bl	405e14 <_free_r>
  4062a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4062aa:	220c      	movs	r2, #12
  4062ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  4062b0:	602a      	str	r2, [r5, #0]
  4062b2:	e715      	b.n	4060e0 <__sfvwrite_r+0x100>
  4062b4:	f106 0901 	add.w	r9, r6, #1
  4062b8:	e722      	b.n	406100 <__sfvwrite_r+0x120>
  4062ba:	f04f 30ff 	mov.w	r0, #4294967295
  4062be:	e6bf      	b.n	406040 <__sfvwrite_r+0x60>
  4062c0:	9a00      	ldr	r2, [sp, #0]
  4062c2:	230c      	movs	r3, #12
  4062c4:	6013      	str	r3, [r2, #0]
  4062c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4062ca:	e709      	b.n	4060e0 <__sfvwrite_r+0x100>
  4062cc:	7ffffc00 	.word	0x7ffffc00

004062d0 <_fwalk_reent>:
  4062d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4062d4:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
  4062d8:	d01f      	beq.n	40631a <_fwalk_reent+0x4a>
  4062da:	4688      	mov	r8, r1
  4062dc:	4606      	mov	r6, r0
  4062de:	f04f 0900 	mov.w	r9, #0
  4062e2:	687d      	ldr	r5, [r7, #4]
  4062e4:	68bc      	ldr	r4, [r7, #8]
  4062e6:	3d01      	subs	r5, #1
  4062e8:	d411      	bmi.n	40630e <_fwalk_reent+0x3e>
  4062ea:	89a3      	ldrh	r3, [r4, #12]
  4062ec:	2b01      	cmp	r3, #1
  4062ee:	f105 35ff 	add.w	r5, r5, #4294967295
  4062f2:	d908      	bls.n	406306 <_fwalk_reent+0x36>
  4062f4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
  4062f8:	3301      	adds	r3, #1
  4062fa:	4621      	mov	r1, r4
  4062fc:	4630      	mov	r0, r6
  4062fe:	d002      	beq.n	406306 <_fwalk_reent+0x36>
  406300:	47c0      	blx	r8
  406302:	ea49 0900 	orr.w	r9, r9, r0
  406306:	1c6b      	adds	r3, r5, #1
  406308:	f104 0468 	add.w	r4, r4, #104	; 0x68
  40630c:	d1ed      	bne.n	4062ea <_fwalk_reent+0x1a>
  40630e:	683f      	ldr	r7, [r7, #0]
  406310:	2f00      	cmp	r7, #0
  406312:	d1e6      	bne.n	4062e2 <_fwalk_reent+0x12>
  406314:	4648      	mov	r0, r9
  406316:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40631a:	46b9      	mov	r9, r7
  40631c:	4648      	mov	r0, r9
  40631e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406322:	bf00      	nop

00406324 <__locale_mb_cur_max>:
  406324:	4b04      	ldr	r3, [pc, #16]	; (406338 <__locale_mb_cur_max+0x14>)
  406326:	4a05      	ldr	r2, [pc, #20]	; (40633c <__locale_mb_cur_max+0x18>)
  406328:	681b      	ldr	r3, [r3, #0]
  40632a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  40632c:	2b00      	cmp	r3, #0
  40632e:	bf08      	it	eq
  406330:	4613      	moveq	r3, r2
  406332:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
  406336:	4770      	bx	lr
  406338:	20400018 	.word	0x20400018
  40633c:	2040085c 	.word	0x2040085c

00406340 <__retarget_lock_init_recursive>:
  406340:	4770      	bx	lr
  406342:	bf00      	nop

00406344 <__retarget_lock_close_recursive>:
  406344:	4770      	bx	lr
  406346:	bf00      	nop

00406348 <__retarget_lock_acquire_recursive>:
  406348:	4770      	bx	lr
  40634a:	bf00      	nop

0040634c <__retarget_lock_release_recursive>:
  40634c:	4770      	bx	lr
  40634e:	bf00      	nop

00406350 <__swhatbuf_r>:
  406350:	b570      	push	{r4, r5, r6, lr}
  406352:	460c      	mov	r4, r1
  406354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406358:	2900      	cmp	r1, #0
  40635a:	b090      	sub	sp, #64	; 0x40
  40635c:	4615      	mov	r5, r2
  40635e:	461e      	mov	r6, r3
  406360:	db14      	blt.n	40638c <__swhatbuf_r+0x3c>
  406362:	aa01      	add	r2, sp, #4
  406364:	f000 fc9e 	bl	406ca4 <_fstat_r>
  406368:	2800      	cmp	r0, #0
  40636a:	db0f      	blt.n	40638c <__swhatbuf_r+0x3c>
  40636c:	9a02      	ldr	r2, [sp, #8]
  40636e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
  406372:	f5a2 5200 	sub.w	r2, r2, #8192	; 0x2000
  406376:	fab2 f282 	clz	r2, r2
  40637a:	0952      	lsrs	r2, r2, #5
  40637c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  406380:	f44f 6000 	mov.w	r0, #2048	; 0x800
  406384:	6032      	str	r2, [r6, #0]
  406386:	602b      	str	r3, [r5, #0]
  406388:	b010      	add	sp, #64	; 0x40
  40638a:	bd70      	pop	{r4, r5, r6, pc}
  40638c:	89a2      	ldrh	r2, [r4, #12]
  40638e:	2300      	movs	r3, #0
  406390:	f012 0080 	ands.w	r0, r2, #128	; 0x80
  406394:	6033      	str	r3, [r6, #0]
  406396:	d004      	beq.n	4063a2 <__swhatbuf_r+0x52>
  406398:	2240      	movs	r2, #64	; 0x40
  40639a:	4618      	mov	r0, r3
  40639c:	602a      	str	r2, [r5, #0]
  40639e:	b010      	add	sp, #64	; 0x40
  4063a0:	bd70      	pop	{r4, r5, r6, pc}
  4063a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  4063a6:	602b      	str	r3, [r5, #0]
  4063a8:	b010      	add	sp, #64	; 0x40
  4063aa:	bd70      	pop	{r4, r5, r6, pc}

004063ac <__smakebuf_r>:
  4063ac:	898a      	ldrh	r2, [r1, #12]
  4063ae:	0792      	lsls	r2, r2, #30
  4063b0:	460b      	mov	r3, r1
  4063b2:	d506      	bpl.n	4063c2 <__smakebuf_r+0x16>
  4063b4:	f101 0243 	add.w	r2, r1, #67	; 0x43
  4063b8:	2101      	movs	r1, #1
  4063ba:	601a      	str	r2, [r3, #0]
  4063bc:	611a      	str	r2, [r3, #16]
  4063be:	6159      	str	r1, [r3, #20]
  4063c0:	4770      	bx	lr
  4063c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  4063c4:	b083      	sub	sp, #12
  4063c6:	ab01      	add	r3, sp, #4
  4063c8:	466a      	mov	r2, sp
  4063ca:	460c      	mov	r4, r1
  4063cc:	4606      	mov	r6, r0
  4063ce:	f7ff ffbf 	bl	406350 <__swhatbuf_r>
  4063d2:	9900      	ldr	r1, [sp, #0]
  4063d4:	4605      	mov	r5, r0
  4063d6:	4630      	mov	r0, r6
  4063d8:	f7fd fec6 	bl	404168 <_malloc_r>
  4063dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  4063e0:	b1d8      	cbz	r0, 40641a <__smakebuf_r+0x6e>
  4063e2:	9a01      	ldr	r2, [sp, #4]
  4063e4:	4f15      	ldr	r7, [pc, #84]	; (40643c <__smakebuf_r+0x90>)
  4063e6:	9900      	ldr	r1, [sp, #0]
  4063e8:	63f7      	str	r7, [r6, #60]	; 0x3c
  4063ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  4063ee:	81a3      	strh	r3, [r4, #12]
  4063f0:	6020      	str	r0, [r4, #0]
  4063f2:	6120      	str	r0, [r4, #16]
  4063f4:	6161      	str	r1, [r4, #20]
  4063f6:	b91a      	cbnz	r2, 406400 <__smakebuf_r+0x54>
  4063f8:	432b      	orrs	r3, r5
  4063fa:	81a3      	strh	r3, [r4, #12]
  4063fc:	b003      	add	sp, #12
  4063fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406400:	4630      	mov	r0, r6
  406402:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406406:	f000 fc61 	bl	406ccc <_isatty_r>
  40640a:	b1a0      	cbz	r0, 406436 <__smakebuf_r+0x8a>
  40640c:	89a3      	ldrh	r3, [r4, #12]
  40640e:	f023 0303 	bic.w	r3, r3, #3
  406412:	f043 0301 	orr.w	r3, r3, #1
  406416:	b21b      	sxth	r3, r3
  406418:	e7ee      	b.n	4063f8 <__smakebuf_r+0x4c>
  40641a:	059a      	lsls	r2, r3, #22
  40641c:	d4ee      	bmi.n	4063fc <__smakebuf_r+0x50>
  40641e:	f023 0303 	bic.w	r3, r3, #3
  406422:	f104 0243 	add.w	r2, r4, #67	; 0x43
  406426:	f043 0302 	orr.w	r3, r3, #2
  40642a:	2101      	movs	r1, #1
  40642c:	81a3      	strh	r3, [r4, #12]
  40642e:	6022      	str	r2, [r4, #0]
  406430:	6122      	str	r2, [r4, #16]
  406432:	6161      	str	r1, [r4, #20]
  406434:	e7e2      	b.n	4063fc <__smakebuf_r+0x50>
  406436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  40643a:	e7dd      	b.n	4063f8 <__smakebuf_r+0x4c>
  40643c:	00405b6d 	.word	0x00405b6d

00406440 <__ascii_mbtowc>:
  406440:	b082      	sub	sp, #8
  406442:	b149      	cbz	r1, 406458 <__ascii_mbtowc+0x18>
  406444:	b15a      	cbz	r2, 40645e <__ascii_mbtowc+0x1e>
  406446:	b16b      	cbz	r3, 406464 <__ascii_mbtowc+0x24>
  406448:	7813      	ldrb	r3, [r2, #0]
  40644a:	600b      	str	r3, [r1, #0]
  40644c:	7812      	ldrb	r2, [r2, #0]
  40644e:	1c10      	adds	r0, r2, #0
  406450:	bf18      	it	ne
  406452:	2001      	movne	r0, #1
  406454:	b002      	add	sp, #8
  406456:	4770      	bx	lr
  406458:	a901      	add	r1, sp, #4
  40645a:	2a00      	cmp	r2, #0
  40645c:	d1f3      	bne.n	406446 <__ascii_mbtowc+0x6>
  40645e:	4610      	mov	r0, r2
  406460:	b002      	add	sp, #8
  406462:	4770      	bx	lr
  406464:	f06f 0001 	mvn.w	r0, #1
  406468:	e7f4      	b.n	406454 <__ascii_mbtowc+0x14>
  40646a:	bf00      	nop
  40646c:	0000      	movs	r0, r0
	...

00406470 <memchr>:
  406470:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  406474:	2a10      	cmp	r2, #16
  406476:	db2b      	blt.n	4064d0 <memchr+0x60>
  406478:	f010 0f07 	tst.w	r0, #7
  40647c:	d008      	beq.n	406490 <memchr+0x20>
  40647e:	f810 3b01 	ldrb.w	r3, [r0], #1
  406482:	3a01      	subs	r2, #1
  406484:	428b      	cmp	r3, r1
  406486:	d02d      	beq.n	4064e4 <memchr+0x74>
  406488:	f010 0f07 	tst.w	r0, #7
  40648c:	b342      	cbz	r2, 4064e0 <memchr+0x70>
  40648e:	d1f6      	bne.n	40647e <memchr+0xe>
  406490:	b4f0      	push	{r4, r5, r6, r7}
  406492:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
  406496:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
  40649a:	f022 0407 	bic.w	r4, r2, #7
  40649e:	f07f 0700 	mvns.w	r7, #0
  4064a2:	2300      	movs	r3, #0
  4064a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
  4064a8:	3c08      	subs	r4, #8
  4064aa:	ea85 0501 	eor.w	r5, r5, r1
  4064ae:	ea86 0601 	eor.w	r6, r6, r1
  4064b2:	fa85 f547 	uadd8	r5, r5, r7
  4064b6:	faa3 f587 	sel	r5, r3, r7
  4064ba:	fa86 f647 	uadd8	r6, r6, r7
  4064be:	faa5 f687 	sel	r6, r5, r7
  4064c2:	b98e      	cbnz	r6, 4064e8 <memchr+0x78>
  4064c4:	d1ee      	bne.n	4064a4 <memchr+0x34>
  4064c6:	bcf0      	pop	{r4, r5, r6, r7}
  4064c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
  4064cc:	f002 0207 	and.w	r2, r2, #7
  4064d0:	b132      	cbz	r2, 4064e0 <memchr+0x70>
  4064d2:	f810 3b01 	ldrb.w	r3, [r0], #1
  4064d6:	3a01      	subs	r2, #1
  4064d8:	ea83 0301 	eor.w	r3, r3, r1
  4064dc:	b113      	cbz	r3, 4064e4 <memchr+0x74>
  4064de:	d1f8      	bne.n	4064d2 <memchr+0x62>
  4064e0:	2000      	movs	r0, #0
  4064e2:	4770      	bx	lr
  4064e4:	3801      	subs	r0, #1
  4064e6:	4770      	bx	lr
  4064e8:	2d00      	cmp	r5, #0
  4064ea:	bf06      	itte	eq
  4064ec:	4635      	moveq	r5, r6
  4064ee:	3803      	subeq	r0, #3
  4064f0:	3807      	subne	r0, #7
  4064f2:	f015 0f01 	tst.w	r5, #1
  4064f6:	d107      	bne.n	406508 <memchr+0x98>
  4064f8:	3001      	adds	r0, #1
  4064fa:	f415 7f80 	tst.w	r5, #256	; 0x100
  4064fe:	bf02      	ittt	eq
  406500:	3001      	addeq	r0, #1
  406502:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
  406506:	3001      	addeq	r0, #1
  406508:	bcf0      	pop	{r4, r5, r6, r7}
  40650a:	3801      	subs	r0, #1
  40650c:	4770      	bx	lr
  40650e:	bf00      	nop

00406510 <memmove>:
  406510:	4288      	cmp	r0, r1
  406512:	b5f0      	push	{r4, r5, r6, r7, lr}
  406514:	d90d      	bls.n	406532 <memmove+0x22>
  406516:	188b      	adds	r3, r1, r2
  406518:	4298      	cmp	r0, r3
  40651a:	d20a      	bcs.n	406532 <memmove+0x22>
  40651c:	1884      	adds	r4, r0, r2
  40651e:	2a00      	cmp	r2, #0
  406520:	d051      	beq.n	4065c6 <memmove+0xb6>
  406522:	4622      	mov	r2, r4
  406524:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
  406528:	f802 4d01 	strb.w	r4, [r2, #-1]!
  40652c:	4299      	cmp	r1, r3
  40652e:	d1f9      	bne.n	406524 <memmove+0x14>
  406530:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406532:	2a0f      	cmp	r2, #15
  406534:	d948      	bls.n	4065c8 <memmove+0xb8>
  406536:	ea41 0300 	orr.w	r3, r1, r0
  40653a:	079b      	lsls	r3, r3, #30
  40653c:	d146      	bne.n	4065cc <memmove+0xbc>
  40653e:	f100 0410 	add.w	r4, r0, #16
  406542:	f101 0310 	add.w	r3, r1, #16
  406546:	4615      	mov	r5, r2
  406548:	f853 6c10 	ldr.w	r6, [r3, #-16]
  40654c:	f844 6c10 	str.w	r6, [r4, #-16]
  406550:	f853 6c0c 	ldr.w	r6, [r3, #-12]
  406554:	f844 6c0c 	str.w	r6, [r4, #-12]
  406558:	f853 6c08 	ldr.w	r6, [r3, #-8]
  40655c:	f844 6c08 	str.w	r6, [r4, #-8]
  406560:	3d10      	subs	r5, #16
  406562:	f853 6c04 	ldr.w	r6, [r3, #-4]
  406566:	f844 6c04 	str.w	r6, [r4, #-4]
  40656a:	2d0f      	cmp	r5, #15
  40656c:	f103 0310 	add.w	r3, r3, #16
  406570:	f104 0410 	add.w	r4, r4, #16
  406574:	d8e8      	bhi.n	406548 <memmove+0x38>
  406576:	f1a2 0310 	sub.w	r3, r2, #16
  40657a:	f023 030f 	bic.w	r3, r3, #15
  40657e:	f002 0e0f 	and.w	lr, r2, #15
  406582:	3310      	adds	r3, #16
  406584:	f1be 0f03 	cmp.w	lr, #3
  406588:	4419      	add	r1, r3
  40658a:	4403      	add	r3, r0
  40658c:	d921      	bls.n	4065d2 <memmove+0xc2>
  40658e:	1f1e      	subs	r6, r3, #4
  406590:	460d      	mov	r5, r1
  406592:	4674      	mov	r4, lr
  406594:	3c04      	subs	r4, #4
  406596:	f855 7b04 	ldr.w	r7, [r5], #4
  40659a:	f846 7f04 	str.w	r7, [r6, #4]!
  40659e:	2c03      	cmp	r4, #3
  4065a0:	d8f8      	bhi.n	406594 <memmove+0x84>
  4065a2:	f1ae 0404 	sub.w	r4, lr, #4
  4065a6:	f024 0403 	bic.w	r4, r4, #3
  4065aa:	3404      	adds	r4, #4
  4065ac:	4421      	add	r1, r4
  4065ae:	4423      	add	r3, r4
  4065b0:	f002 0203 	and.w	r2, r2, #3
  4065b4:	b162      	cbz	r2, 4065d0 <memmove+0xc0>
  4065b6:	3b01      	subs	r3, #1
  4065b8:	440a      	add	r2, r1
  4065ba:	f811 4b01 	ldrb.w	r4, [r1], #1
  4065be:	f803 4f01 	strb.w	r4, [r3, #1]!
  4065c2:	428a      	cmp	r2, r1
  4065c4:	d1f9      	bne.n	4065ba <memmove+0xaa>
  4065c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4065c8:	4603      	mov	r3, r0
  4065ca:	e7f3      	b.n	4065b4 <memmove+0xa4>
  4065cc:	4603      	mov	r3, r0
  4065ce:	e7f2      	b.n	4065b6 <memmove+0xa6>
  4065d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  4065d2:	4672      	mov	r2, lr
  4065d4:	e7ee      	b.n	4065b4 <memmove+0xa4>
  4065d6:	bf00      	nop

004065d8 <_realloc_r>:
  4065d8:	2900      	cmp	r1, #0
  4065da:	f000 8095 	beq.w	406708 <_realloc_r+0x130>
  4065de:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  4065e2:	460d      	mov	r5, r1
  4065e4:	4616      	mov	r6, r2
  4065e6:	b083      	sub	sp, #12
  4065e8:	4680      	mov	r8, r0
  4065ea:	f106 070b 	add.w	r7, r6, #11
  4065ee:	f7fe f953 	bl	404898 <__malloc_lock>
  4065f2:	f855 ec04 	ldr.w	lr, [r5, #-4]
  4065f6:	2f16      	cmp	r7, #22
  4065f8:	f02e 0403 	bic.w	r4, lr, #3
  4065fc:	f1a5 0908 	sub.w	r9, r5, #8
  406600:	d83c      	bhi.n	40667c <_realloc_r+0xa4>
  406602:	2210      	movs	r2, #16
  406604:	4617      	mov	r7, r2
  406606:	42be      	cmp	r6, r7
  406608:	d83d      	bhi.n	406686 <_realloc_r+0xae>
  40660a:	4294      	cmp	r4, r2
  40660c:	da43      	bge.n	406696 <_realloc_r+0xbe>
  40660e:	4bc4      	ldr	r3, [pc, #784]	; (406920 <_realloc_r+0x348>)
  406610:	6899      	ldr	r1, [r3, #8]
  406612:	eb09 0004 	add.w	r0, r9, r4
  406616:	4288      	cmp	r0, r1
  406618:	f000 80b4 	beq.w	406784 <_realloc_r+0x1ac>
  40661c:	6843      	ldr	r3, [r0, #4]
  40661e:	f023 0101 	bic.w	r1, r3, #1
  406622:	4401      	add	r1, r0
  406624:	6849      	ldr	r1, [r1, #4]
  406626:	07c9      	lsls	r1, r1, #31
  406628:	d54c      	bpl.n	4066c4 <_realloc_r+0xec>
  40662a:	f01e 0f01 	tst.w	lr, #1
  40662e:	f000 809b 	beq.w	406768 <_realloc_r+0x190>
  406632:	4631      	mov	r1, r6
  406634:	4640      	mov	r0, r8
  406636:	f7fd fd97 	bl	404168 <_malloc_r>
  40663a:	4606      	mov	r6, r0
  40663c:	2800      	cmp	r0, #0
  40663e:	d03a      	beq.n	4066b6 <_realloc_r+0xde>
  406640:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406644:	f023 0301 	bic.w	r3, r3, #1
  406648:	444b      	add	r3, r9
  40664a:	f1a0 0208 	sub.w	r2, r0, #8
  40664e:	429a      	cmp	r2, r3
  406650:	f000 8121 	beq.w	406896 <_realloc_r+0x2be>
  406654:	1f22      	subs	r2, r4, #4
  406656:	2a24      	cmp	r2, #36	; 0x24
  406658:	f200 8107 	bhi.w	40686a <_realloc_r+0x292>
  40665c:	2a13      	cmp	r2, #19
  40665e:	f200 80db 	bhi.w	406818 <_realloc_r+0x240>
  406662:	4603      	mov	r3, r0
  406664:	462a      	mov	r2, r5
  406666:	6811      	ldr	r1, [r2, #0]
  406668:	6019      	str	r1, [r3, #0]
  40666a:	6851      	ldr	r1, [r2, #4]
  40666c:	6059      	str	r1, [r3, #4]
  40666e:	6892      	ldr	r2, [r2, #8]
  406670:	609a      	str	r2, [r3, #8]
  406672:	4629      	mov	r1, r5
  406674:	4640      	mov	r0, r8
  406676:	f7ff fbcd 	bl	405e14 <_free_r>
  40667a:	e01c      	b.n	4066b6 <_realloc_r+0xde>
  40667c:	f027 0707 	bic.w	r7, r7, #7
  406680:	2f00      	cmp	r7, #0
  406682:	463a      	mov	r2, r7
  406684:	dabf      	bge.n	406606 <_realloc_r+0x2e>
  406686:	2600      	movs	r6, #0
  406688:	230c      	movs	r3, #12
  40668a:	4630      	mov	r0, r6
  40668c:	f8c8 3000 	str.w	r3, [r8]
  406690:	b003      	add	sp, #12
  406692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  406696:	462e      	mov	r6, r5
  406698:	1be3      	subs	r3, r4, r7
  40669a:	2b0f      	cmp	r3, #15
  40669c:	d81e      	bhi.n	4066dc <_realloc_r+0x104>
  40669e:	f8d9 3004 	ldr.w	r3, [r9, #4]
  4066a2:	f003 0301 	and.w	r3, r3, #1
  4066a6:	4323      	orrs	r3, r4
  4066a8:	444c      	add	r4, r9
  4066aa:	f8c9 3004 	str.w	r3, [r9, #4]
  4066ae:	6863      	ldr	r3, [r4, #4]
  4066b0:	f043 0301 	orr.w	r3, r3, #1
  4066b4:	6063      	str	r3, [r4, #4]
  4066b6:	4640      	mov	r0, r8
  4066b8:	f7fe f8f4 	bl	4048a4 <__malloc_unlock>
  4066bc:	4630      	mov	r0, r6
  4066be:	b003      	add	sp, #12
  4066c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  4066c4:	f023 0303 	bic.w	r3, r3, #3
  4066c8:	18e1      	adds	r1, r4, r3
  4066ca:	4291      	cmp	r1, r2
  4066cc:	db1f      	blt.n	40670e <_realloc_r+0x136>
  4066ce:	68c3      	ldr	r3, [r0, #12]
  4066d0:	6882      	ldr	r2, [r0, #8]
  4066d2:	462e      	mov	r6, r5
  4066d4:	60d3      	str	r3, [r2, #12]
  4066d6:	460c      	mov	r4, r1
  4066d8:	609a      	str	r2, [r3, #8]
  4066da:	e7dd      	b.n	406698 <_realloc_r+0xc0>
  4066dc:	f8d9 2004 	ldr.w	r2, [r9, #4]
  4066e0:	eb09 0107 	add.w	r1, r9, r7
  4066e4:	f002 0201 	and.w	r2, r2, #1
  4066e8:	444c      	add	r4, r9
  4066ea:	f043 0301 	orr.w	r3, r3, #1
  4066ee:	4317      	orrs	r7, r2
  4066f0:	f8c9 7004 	str.w	r7, [r9, #4]
  4066f4:	604b      	str	r3, [r1, #4]
  4066f6:	6863      	ldr	r3, [r4, #4]
  4066f8:	f043 0301 	orr.w	r3, r3, #1
  4066fc:	3108      	adds	r1, #8
  4066fe:	6063      	str	r3, [r4, #4]
  406700:	4640      	mov	r0, r8
  406702:	f7ff fb87 	bl	405e14 <_free_r>
  406706:	e7d6      	b.n	4066b6 <_realloc_r+0xde>
  406708:	4611      	mov	r1, r2
  40670a:	f7fd bd2d 	b.w	404168 <_malloc_r>
  40670e:	f01e 0f01 	tst.w	lr, #1
  406712:	d18e      	bne.n	406632 <_realloc_r+0x5a>
  406714:	f855 1c08 	ldr.w	r1, [r5, #-8]
  406718:	eba9 0a01 	sub.w	sl, r9, r1
  40671c:	f8da 1004 	ldr.w	r1, [sl, #4]
  406720:	f021 0103 	bic.w	r1, r1, #3
  406724:	440b      	add	r3, r1
  406726:	4423      	add	r3, r4
  406728:	4293      	cmp	r3, r2
  40672a:	db25      	blt.n	406778 <_realloc_r+0x1a0>
  40672c:	68c2      	ldr	r2, [r0, #12]
  40672e:	6881      	ldr	r1, [r0, #8]
  406730:	4656      	mov	r6, sl
  406732:	60ca      	str	r2, [r1, #12]
  406734:	6091      	str	r1, [r2, #8]
  406736:	f8da 100c 	ldr.w	r1, [sl, #12]
  40673a:	f856 0f08 	ldr.w	r0, [r6, #8]!
  40673e:	1f22      	subs	r2, r4, #4
  406740:	2a24      	cmp	r2, #36	; 0x24
  406742:	60c1      	str	r1, [r0, #12]
  406744:	6088      	str	r0, [r1, #8]
  406746:	f200 8094 	bhi.w	406872 <_realloc_r+0x29a>
  40674a:	2a13      	cmp	r2, #19
  40674c:	d96f      	bls.n	40682e <_realloc_r+0x256>
  40674e:	6829      	ldr	r1, [r5, #0]
  406750:	f8ca 1008 	str.w	r1, [sl, #8]
  406754:	6869      	ldr	r1, [r5, #4]
  406756:	f8ca 100c 	str.w	r1, [sl, #12]
  40675a:	2a1b      	cmp	r2, #27
  40675c:	f200 80a2 	bhi.w	4068a4 <_realloc_r+0x2cc>
  406760:	3508      	adds	r5, #8
  406762:	f10a 0210 	add.w	r2, sl, #16
  406766:	e063      	b.n	406830 <_realloc_r+0x258>
  406768:	f855 3c08 	ldr.w	r3, [r5, #-8]
  40676c:	eba9 0a03 	sub.w	sl, r9, r3
  406770:	f8da 1004 	ldr.w	r1, [sl, #4]
  406774:	f021 0103 	bic.w	r1, r1, #3
  406778:	1863      	adds	r3, r4, r1
  40677a:	4293      	cmp	r3, r2
  40677c:	f6ff af59 	blt.w	406632 <_realloc_r+0x5a>
  406780:	4656      	mov	r6, sl
  406782:	e7d8      	b.n	406736 <_realloc_r+0x15e>
  406784:	6841      	ldr	r1, [r0, #4]
  406786:	f021 0b03 	bic.w	fp, r1, #3
  40678a:	44a3      	add	fp, r4
  40678c:	f107 0010 	add.w	r0, r7, #16
  406790:	4583      	cmp	fp, r0
  406792:	da56      	bge.n	406842 <_realloc_r+0x26a>
  406794:	f01e 0f01 	tst.w	lr, #1
  406798:	f47f af4b 	bne.w	406632 <_realloc_r+0x5a>
  40679c:	f855 1c08 	ldr.w	r1, [r5, #-8]
  4067a0:	eba9 0a01 	sub.w	sl, r9, r1
  4067a4:	f8da 1004 	ldr.w	r1, [sl, #4]
  4067a8:	f021 0103 	bic.w	r1, r1, #3
  4067ac:	448b      	add	fp, r1
  4067ae:	4558      	cmp	r0, fp
  4067b0:	dce2      	bgt.n	406778 <_realloc_r+0x1a0>
  4067b2:	4656      	mov	r6, sl
  4067b4:	f8da 100c 	ldr.w	r1, [sl, #12]
  4067b8:	f856 0f08 	ldr.w	r0, [r6, #8]!
  4067bc:	1f22      	subs	r2, r4, #4
  4067be:	2a24      	cmp	r2, #36	; 0x24
  4067c0:	60c1      	str	r1, [r0, #12]
  4067c2:	6088      	str	r0, [r1, #8]
  4067c4:	f200 808f 	bhi.w	4068e6 <_realloc_r+0x30e>
  4067c8:	2a13      	cmp	r2, #19
  4067ca:	f240 808a 	bls.w	4068e2 <_realloc_r+0x30a>
  4067ce:	6829      	ldr	r1, [r5, #0]
  4067d0:	f8ca 1008 	str.w	r1, [sl, #8]
  4067d4:	6869      	ldr	r1, [r5, #4]
  4067d6:	f8ca 100c 	str.w	r1, [sl, #12]
  4067da:	2a1b      	cmp	r2, #27
  4067dc:	f200 808a 	bhi.w	4068f4 <_realloc_r+0x31c>
  4067e0:	3508      	adds	r5, #8
  4067e2:	f10a 0210 	add.w	r2, sl, #16
  4067e6:	6829      	ldr	r1, [r5, #0]
  4067e8:	6011      	str	r1, [r2, #0]
  4067ea:	6869      	ldr	r1, [r5, #4]
  4067ec:	6051      	str	r1, [r2, #4]
  4067ee:	68a9      	ldr	r1, [r5, #8]
  4067f0:	6091      	str	r1, [r2, #8]
  4067f2:	eb0a 0107 	add.w	r1, sl, r7
  4067f6:	ebab 0207 	sub.w	r2, fp, r7
  4067fa:	f042 0201 	orr.w	r2, r2, #1
  4067fe:	6099      	str	r1, [r3, #8]
  406800:	604a      	str	r2, [r1, #4]
  406802:	f8da 3004 	ldr.w	r3, [sl, #4]
  406806:	f003 0301 	and.w	r3, r3, #1
  40680a:	431f      	orrs	r7, r3
  40680c:	4640      	mov	r0, r8
  40680e:	f8ca 7004 	str.w	r7, [sl, #4]
  406812:	f7fe f847 	bl	4048a4 <__malloc_unlock>
  406816:	e751      	b.n	4066bc <_realloc_r+0xe4>
  406818:	682b      	ldr	r3, [r5, #0]
  40681a:	6003      	str	r3, [r0, #0]
  40681c:	686b      	ldr	r3, [r5, #4]
  40681e:	6043      	str	r3, [r0, #4]
  406820:	2a1b      	cmp	r2, #27
  406822:	d82d      	bhi.n	406880 <_realloc_r+0x2a8>
  406824:	f100 0308 	add.w	r3, r0, #8
  406828:	f105 0208 	add.w	r2, r5, #8
  40682c:	e71b      	b.n	406666 <_realloc_r+0x8e>
  40682e:	4632      	mov	r2, r6
  406830:	6829      	ldr	r1, [r5, #0]
  406832:	6011      	str	r1, [r2, #0]
  406834:	6869      	ldr	r1, [r5, #4]
  406836:	6051      	str	r1, [r2, #4]
  406838:	68a9      	ldr	r1, [r5, #8]
  40683a:	6091      	str	r1, [r2, #8]
  40683c:	461c      	mov	r4, r3
  40683e:	46d1      	mov	r9, sl
  406840:	e72a      	b.n	406698 <_realloc_r+0xc0>
  406842:	eb09 0107 	add.w	r1, r9, r7
  406846:	ebab 0b07 	sub.w	fp, fp, r7
  40684a:	f04b 0201 	orr.w	r2, fp, #1
  40684e:	6099      	str	r1, [r3, #8]
  406850:	604a      	str	r2, [r1, #4]
  406852:	f855 3c04 	ldr.w	r3, [r5, #-4]
  406856:	f003 0301 	and.w	r3, r3, #1
  40685a:	431f      	orrs	r7, r3
  40685c:	4640      	mov	r0, r8
  40685e:	f845 7c04 	str.w	r7, [r5, #-4]
  406862:	f7fe f81f 	bl	4048a4 <__malloc_unlock>
  406866:	462e      	mov	r6, r5
  406868:	e728      	b.n	4066bc <_realloc_r+0xe4>
  40686a:	4629      	mov	r1, r5
  40686c:	f7ff fe50 	bl	406510 <memmove>
  406870:	e6ff      	b.n	406672 <_realloc_r+0x9a>
  406872:	4629      	mov	r1, r5
  406874:	4630      	mov	r0, r6
  406876:	461c      	mov	r4, r3
  406878:	46d1      	mov	r9, sl
  40687a:	f7ff fe49 	bl	406510 <memmove>
  40687e:	e70b      	b.n	406698 <_realloc_r+0xc0>
  406880:	68ab      	ldr	r3, [r5, #8]
  406882:	6083      	str	r3, [r0, #8]
  406884:	68eb      	ldr	r3, [r5, #12]
  406886:	60c3      	str	r3, [r0, #12]
  406888:	2a24      	cmp	r2, #36	; 0x24
  40688a:	d017      	beq.n	4068bc <_realloc_r+0x2e4>
  40688c:	f100 0310 	add.w	r3, r0, #16
  406890:	f105 0210 	add.w	r2, r5, #16
  406894:	e6e7      	b.n	406666 <_realloc_r+0x8e>
  406896:	f850 3c04 	ldr.w	r3, [r0, #-4]
  40689a:	f023 0303 	bic.w	r3, r3, #3
  40689e:	441c      	add	r4, r3
  4068a0:	462e      	mov	r6, r5
  4068a2:	e6f9      	b.n	406698 <_realloc_r+0xc0>
  4068a4:	68a9      	ldr	r1, [r5, #8]
  4068a6:	f8ca 1010 	str.w	r1, [sl, #16]
  4068aa:	68e9      	ldr	r1, [r5, #12]
  4068ac:	f8ca 1014 	str.w	r1, [sl, #20]
  4068b0:	2a24      	cmp	r2, #36	; 0x24
  4068b2:	d00c      	beq.n	4068ce <_realloc_r+0x2f6>
  4068b4:	3510      	adds	r5, #16
  4068b6:	f10a 0218 	add.w	r2, sl, #24
  4068ba:	e7b9      	b.n	406830 <_realloc_r+0x258>
  4068bc:	692b      	ldr	r3, [r5, #16]
  4068be:	6103      	str	r3, [r0, #16]
  4068c0:	696b      	ldr	r3, [r5, #20]
  4068c2:	6143      	str	r3, [r0, #20]
  4068c4:	f105 0218 	add.w	r2, r5, #24
  4068c8:	f100 0318 	add.w	r3, r0, #24
  4068cc:	e6cb      	b.n	406666 <_realloc_r+0x8e>
  4068ce:	692a      	ldr	r2, [r5, #16]
  4068d0:	f8ca 2018 	str.w	r2, [sl, #24]
  4068d4:	696a      	ldr	r2, [r5, #20]
  4068d6:	f8ca 201c 	str.w	r2, [sl, #28]
  4068da:	3518      	adds	r5, #24
  4068dc:	f10a 0220 	add.w	r2, sl, #32
  4068e0:	e7a6      	b.n	406830 <_realloc_r+0x258>
  4068e2:	4632      	mov	r2, r6
  4068e4:	e77f      	b.n	4067e6 <_realloc_r+0x20e>
  4068e6:	4629      	mov	r1, r5
  4068e8:	4630      	mov	r0, r6
  4068ea:	9301      	str	r3, [sp, #4]
  4068ec:	f7ff fe10 	bl	406510 <memmove>
  4068f0:	9b01      	ldr	r3, [sp, #4]
  4068f2:	e77e      	b.n	4067f2 <_realloc_r+0x21a>
  4068f4:	68a9      	ldr	r1, [r5, #8]
  4068f6:	f8ca 1010 	str.w	r1, [sl, #16]
  4068fa:	68e9      	ldr	r1, [r5, #12]
  4068fc:	f8ca 1014 	str.w	r1, [sl, #20]
  406900:	2a24      	cmp	r2, #36	; 0x24
  406902:	d003      	beq.n	40690c <_realloc_r+0x334>
  406904:	3510      	adds	r5, #16
  406906:	f10a 0218 	add.w	r2, sl, #24
  40690a:	e76c      	b.n	4067e6 <_realloc_r+0x20e>
  40690c:	692a      	ldr	r2, [r5, #16]
  40690e:	f8ca 2018 	str.w	r2, [sl, #24]
  406912:	696a      	ldr	r2, [r5, #20]
  406914:	f8ca 201c 	str.w	r2, [sl, #28]
  406918:	3518      	adds	r5, #24
  40691a:	f10a 0220 	add.w	r2, sl, #32
  40691e:	e762      	b.n	4067e6 <_realloc_r+0x20e>
  406920:	20400448 	.word	0x20400448

00406924 <__sread>:
  406924:	b510      	push	{r4, lr}
  406926:	460c      	mov	r4, r1
  406928:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40692c:	f000 f9f6 	bl	406d1c <_read_r>
  406930:	2800      	cmp	r0, #0
  406932:	db03      	blt.n	40693c <__sread+0x18>
  406934:	6d23      	ldr	r3, [r4, #80]	; 0x50
  406936:	4403      	add	r3, r0
  406938:	6523      	str	r3, [r4, #80]	; 0x50
  40693a:	bd10      	pop	{r4, pc}
  40693c:	89a3      	ldrh	r3, [r4, #12]
  40693e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  406942:	81a3      	strh	r3, [r4, #12]
  406944:	bd10      	pop	{r4, pc}
  406946:	bf00      	nop

00406948 <__swrite>:
  406948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  40694c:	4616      	mov	r6, r2
  40694e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
  406952:	461f      	mov	r7, r3
  406954:	05d3      	lsls	r3, r2, #23
  406956:	460c      	mov	r4, r1
  406958:	4605      	mov	r5, r0
  40695a:	d507      	bpl.n	40696c <__swrite+0x24>
  40695c:	2200      	movs	r2, #0
  40695e:	2302      	movs	r3, #2
  406960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  406964:	f000 f9c4 	bl	406cf0 <_lseek_r>
  406968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  40696c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
  406970:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
  406974:	81a2      	strh	r2, [r4, #12]
  406976:	463b      	mov	r3, r7
  406978:	4632      	mov	r2, r6
  40697a:	4628      	mov	r0, r5
  40697c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  406980:	f000 b8a4 	b.w	406acc <_write_r>

00406984 <__sseek>:
  406984:	b510      	push	{r4, lr}
  406986:	460c      	mov	r4, r1
  406988:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  40698c:	f000 f9b0 	bl	406cf0 <_lseek_r>
  406990:	89a3      	ldrh	r3, [r4, #12]
  406992:	1c42      	adds	r2, r0, #1
  406994:	bf0e      	itee	eq
  406996:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
  40699a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
  40699e:	6520      	strne	r0, [r4, #80]	; 0x50
  4069a0:	81a3      	strh	r3, [r4, #12]
  4069a2:	bd10      	pop	{r4, pc}

004069a4 <__sclose>:
  4069a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
  4069a8:	f000 b908 	b.w	406bbc <_close_r>

004069ac <__swbuf_r>:
  4069ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4069ae:	460d      	mov	r5, r1
  4069b0:	4614      	mov	r4, r2
  4069b2:	4606      	mov	r6, r0
  4069b4:	b110      	cbz	r0, 4069bc <__swbuf_r+0x10>
  4069b6:	6b83      	ldr	r3, [r0, #56]	; 0x38
  4069b8:	2b00      	cmp	r3, #0
  4069ba:	d04b      	beq.n	406a54 <__swbuf_r+0xa8>
  4069bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  4069c0:	69a3      	ldr	r3, [r4, #24]
  4069c2:	60a3      	str	r3, [r4, #8]
  4069c4:	b291      	uxth	r1, r2
  4069c6:	0708      	lsls	r0, r1, #28
  4069c8:	d539      	bpl.n	406a3e <__swbuf_r+0x92>
  4069ca:	6923      	ldr	r3, [r4, #16]
  4069cc:	2b00      	cmp	r3, #0
  4069ce:	d036      	beq.n	406a3e <__swbuf_r+0x92>
  4069d0:	b2ed      	uxtb	r5, r5
  4069d2:	0489      	lsls	r1, r1, #18
  4069d4:	462f      	mov	r7, r5
  4069d6:	d515      	bpl.n	406a04 <__swbuf_r+0x58>
  4069d8:	6822      	ldr	r2, [r4, #0]
  4069da:	6961      	ldr	r1, [r4, #20]
  4069dc:	1ad3      	subs	r3, r2, r3
  4069de:	428b      	cmp	r3, r1
  4069e0:	da1c      	bge.n	406a1c <__swbuf_r+0x70>
  4069e2:	3301      	adds	r3, #1
  4069e4:	68a1      	ldr	r1, [r4, #8]
  4069e6:	1c50      	adds	r0, r2, #1
  4069e8:	3901      	subs	r1, #1
  4069ea:	60a1      	str	r1, [r4, #8]
  4069ec:	6020      	str	r0, [r4, #0]
  4069ee:	7015      	strb	r5, [r2, #0]
  4069f0:	6962      	ldr	r2, [r4, #20]
  4069f2:	429a      	cmp	r2, r3
  4069f4:	d01a      	beq.n	406a2c <__swbuf_r+0x80>
  4069f6:	89a3      	ldrh	r3, [r4, #12]
  4069f8:	07db      	lsls	r3, r3, #31
  4069fa:	d501      	bpl.n	406a00 <__swbuf_r+0x54>
  4069fc:	2d0a      	cmp	r5, #10
  4069fe:	d015      	beq.n	406a2c <__swbuf_r+0x80>
  406a00:	4638      	mov	r0, r7
  406a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  406a04:	6e61      	ldr	r1, [r4, #100]	; 0x64
  406a06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
  406a0a:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  406a0e:	81a2      	strh	r2, [r4, #12]
  406a10:	6822      	ldr	r2, [r4, #0]
  406a12:	6661      	str	r1, [r4, #100]	; 0x64
  406a14:	6961      	ldr	r1, [r4, #20]
  406a16:	1ad3      	subs	r3, r2, r3
  406a18:	428b      	cmp	r3, r1
  406a1a:	dbe2      	blt.n	4069e2 <__swbuf_r+0x36>
  406a1c:	4621      	mov	r1, r4
  406a1e:	4630      	mov	r0, r6
  406a20:	f7ff f87a 	bl	405b18 <_fflush_r>
  406a24:	b940      	cbnz	r0, 406a38 <__swbuf_r+0x8c>
  406a26:	6822      	ldr	r2, [r4, #0]
  406a28:	2301      	movs	r3, #1
  406a2a:	e7db      	b.n	4069e4 <__swbuf_r+0x38>
  406a2c:	4621      	mov	r1, r4
  406a2e:	4630      	mov	r0, r6
  406a30:	f7ff f872 	bl	405b18 <_fflush_r>
  406a34:	2800      	cmp	r0, #0
  406a36:	d0e3      	beq.n	406a00 <__swbuf_r+0x54>
  406a38:	f04f 37ff 	mov.w	r7, #4294967295
  406a3c:	e7e0      	b.n	406a00 <__swbuf_r+0x54>
  406a3e:	4621      	mov	r1, r4
  406a40:	4630      	mov	r0, r6
  406a42:	f7fe ff55 	bl	4058f0 <__swsetup_r>
  406a46:	2800      	cmp	r0, #0
  406a48:	d1f6      	bne.n	406a38 <__swbuf_r+0x8c>
  406a4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
  406a4e:	6923      	ldr	r3, [r4, #16]
  406a50:	b291      	uxth	r1, r2
  406a52:	e7bd      	b.n	4069d0 <__swbuf_r+0x24>
  406a54:	f7ff f8b8 	bl	405bc8 <__sinit>
  406a58:	e7b0      	b.n	4069bc <__swbuf_r+0x10>
  406a5a:	bf00      	nop

00406a5c <_wcrtomb_r>:
  406a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
  406a5e:	4606      	mov	r6, r0
  406a60:	b085      	sub	sp, #20
  406a62:	461f      	mov	r7, r3
  406a64:	b189      	cbz	r1, 406a8a <_wcrtomb_r+0x2e>
  406a66:	4c10      	ldr	r4, [pc, #64]	; (406aa8 <_wcrtomb_r+0x4c>)
  406a68:	4d10      	ldr	r5, [pc, #64]	; (406aac <_wcrtomb_r+0x50>)
  406a6a:	6824      	ldr	r4, [r4, #0]
  406a6c:	6b64      	ldr	r4, [r4, #52]	; 0x34
  406a6e:	2c00      	cmp	r4, #0
  406a70:	bf08      	it	eq
  406a72:	462c      	moveq	r4, r5
  406a74:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
  406a78:	47a0      	blx	r4
  406a7a:	1c43      	adds	r3, r0, #1
  406a7c:	d103      	bne.n	406a86 <_wcrtomb_r+0x2a>
  406a7e:	2200      	movs	r2, #0
  406a80:	238a      	movs	r3, #138	; 0x8a
  406a82:	603a      	str	r2, [r7, #0]
  406a84:	6033      	str	r3, [r6, #0]
  406a86:	b005      	add	sp, #20
  406a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
  406a8a:	460c      	mov	r4, r1
  406a8c:	4906      	ldr	r1, [pc, #24]	; (406aa8 <_wcrtomb_r+0x4c>)
  406a8e:	4a07      	ldr	r2, [pc, #28]	; (406aac <_wcrtomb_r+0x50>)
  406a90:	6809      	ldr	r1, [r1, #0]
  406a92:	6b49      	ldr	r1, [r1, #52]	; 0x34
  406a94:	2900      	cmp	r1, #0
  406a96:	bf08      	it	eq
  406a98:	4611      	moveq	r1, r2
  406a9a:	4622      	mov	r2, r4
  406a9c:	f8d1 40e0 	ldr.w	r4, [r1, #224]	; 0xe0
  406aa0:	a901      	add	r1, sp, #4
  406aa2:	47a0      	blx	r4
  406aa4:	e7e9      	b.n	406a7a <_wcrtomb_r+0x1e>
  406aa6:	bf00      	nop
  406aa8:	20400018 	.word	0x20400018
  406aac:	2040085c 	.word	0x2040085c

00406ab0 <__ascii_wctomb>:
  406ab0:	b121      	cbz	r1, 406abc <__ascii_wctomb+0xc>
  406ab2:	2aff      	cmp	r2, #255	; 0xff
  406ab4:	d804      	bhi.n	406ac0 <__ascii_wctomb+0x10>
  406ab6:	700a      	strb	r2, [r1, #0]
  406ab8:	2001      	movs	r0, #1
  406aba:	4770      	bx	lr
  406abc:	4608      	mov	r0, r1
  406abe:	4770      	bx	lr
  406ac0:	238a      	movs	r3, #138	; 0x8a
  406ac2:	6003      	str	r3, [r0, #0]
  406ac4:	f04f 30ff 	mov.w	r0, #4294967295
  406ac8:	4770      	bx	lr
  406aca:	bf00      	nop

00406acc <_write_r>:
  406acc:	b570      	push	{r4, r5, r6, lr}
  406ace:	460d      	mov	r5, r1
  406ad0:	4c08      	ldr	r4, [pc, #32]	; (406af4 <_write_r+0x28>)
  406ad2:	4611      	mov	r1, r2
  406ad4:	4606      	mov	r6, r0
  406ad6:	461a      	mov	r2, r3
  406ad8:	4628      	mov	r0, r5
  406ada:	2300      	movs	r3, #0
  406adc:	6023      	str	r3, [r4, #0]
  406ade:	f7f9 fed5 	bl	40088c <_write>
  406ae2:	1c43      	adds	r3, r0, #1
  406ae4:	d000      	beq.n	406ae8 <_write_r+0x1c>
  406ae6:	bd70      	pop	{r4, r5, r6, pc}
  406ae8:	6823      	ldr	r3, [r4, #0]
  406aea:	2b00      	cmp	r3, #0
  406aec:	d0fb      	beq.n	406ae6 <_write_r+0x1a>
  406aee:	6033      	str	r3, [r6, #0]
  406af0:	bd70      	pop	{r4, r5, r6, pc}
  406af2:	bf00      	nop
  406af4:	2040c81c 	.word	0x2040c81c

00406af8 <__register_exitproc>:
  406af8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  406afc:	4d2c      	ldr	r5, [pc, #176]	; (406bb0 <__register_exitproc+0xb8>)
  406afe:	4606      	mov	r6, r0
  406b00:	6828      	ldr	r0, [r5, #0]
  406b02:	4698      	mov	r8, r3
  406b04:	460f      	mov	r7, r1
  406b06:	4691      	mov	r9, r2
  406b08:	f7ff fc1e 	bl	406348 <__retarget_lock_acquire_recursive>
  406b0c:	4b29      	ldr	r3, [pc, #164]	; (406bb4 <__register_exitproc+0xbc>)
  406b0e:	681c      	ldr	r4, [r3, #0]
  406b10:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  406b14:	2b00      	cmp	r3, #0
  406b16:	d03e      	beq.n	406b96 <__register_exitproc+0x9e>
  406b18:	685a      	ldr	r2, [r3, #4]
  406b1a:	2a1f      	cmp	r2, #31
  406b1c:	dc1c      	bgt.n	406b58 <__register_exitproc+0x60>
  406b1e:	f102 0e01 	add.w	lr, r2, #1
  406b22:	b176      	cbz	r6, 406b42 <__register_exitproc+0x4a>
  406b24:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  406b28:	2401      	movs	r4, #1
  406b2a:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  406b2e:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  406b32:	4094      	lsls	r4, r2
  406b34:	4320      	orrs	r0, r4
  406b36:	2e02      	cmp	r6, #2
  406b38:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  406b3c:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  406b40:	d023      	beq.n	406b8a <__register_exitproc+0x92>
  406b42:	3202      	adds	r2, #2
  406b44:	f8c3 e004 	str.w	lr, [r3, #4]
  406b48:	6828      	ldr	r0, [r5, #0]
  406b4a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  406b4e:	f7ff fbfd 	bl	40634c <__retarget_lock_release_recursive>
  406b52:	2000      	movs	r0, #0
  406b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406b58:	4b17      	ldr	r3, [pc, #92]	; (406bb8 <__register_exitproc+0xc0>)
  406b5a:	b30b      	cbz	r3, 406ba0 <__register_exitproc+0xa8>
  406b5c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  406b60:	f7fd fafa 	bl	404158 <malloc>
  406b64:	4603      	mov	r3, r0
  406b66:	b1d8      	cbz	r0, 406ba0 <__register_exitproc+0xa8>
  406b68:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  406b6c:	6002      	str	r2, [r0, #0]
  406b6e:	2100      	movs	r1, #0
  406b70:	6041      	str	r1, [r0, #4]
  406b72:	460a      	mov	r2, r1
  406b74:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  406b78:	f04f 0e01 	mov.w	lr, #1
  406b7c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  406b80:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  406b84:	2e00      	cmp	r6, #0
  406b86:	d0dc      	beq.n	406b42 <__register_exitproc+0x4a>
  406b88:	e7cc      	b.n	406b24 <__register_exitproc+0x2c>
  406b8a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  406b8e:	430c      	orrs	r4, r1
  406b90:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  406b94:	e7d5      	b.n	406b42 <__register_exitproc+0x4a>
  406b96:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  406b9a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  406b9e:	e7bb      	b.n	406b18 <__register_exitproc+0x20>
  406ba0:	6828      	ldr	r0, [r5, #0]
  406ba2:	f7ff fbd3 	bl	40634c <__retarget_lock_release_recursive>
  406ba6:	f04f 30ff 	mov.w	r0, #4294967295
  406baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  406bae:	bf00      	nop
  406bb0:	20400858 	.word	0x20400858
  406bb4:	0041231c 	.word	0x0041231c
  406bb8:	00404159 	.word	0x00404159

00406bbc <_close_r>:
  406bbc:	b538      	push	{r3, r4, r5, lr}
  406bbe:	4c07      	ldr	r4, [pc, #28]	; (406bdc <_close_r+0x20>)
  406bc0:	2300      	movs	r3, #0
  406bc2:	4605      	mov	r5, r0
  406bc4:	4608      	mov	r0, r1
  406bc6:	6023      	str	r3, [r4, #0]
  406bc8:	f7fb f8ec 	bl	401da4 <_close>
  406bcc:	1c43      	adds	r3, r0, #1
  406bce:	d000      	beq.n	406bd2 <_close_r+0x16>
  406bd0:	bd38      	pop	{r3, r4, r5, pc}
  406bd2:	6823      	ldr	r3, [r4, #0]
  406bd4:	2b00      	cmp	r3, #0
  406bd6:	d0fb      	beq.n	406bd0 <_close_r+0x14>
  406bd8:	602b      	str	r3, [r5, #0]
  406bda:	bd38      	pop	{r3, r4, r5, pc}
  406bdc:	2040c81c 	.word	0x2040c81c

00406be0 <_fclose_r>:
  406be0:	b570      	push	{r4, r5, r6, lr}
  406be2:	b159      	cbz	r1, 406bfc <_fclose_r+0x1c>
  406be4:	4605      	mov	r5, r0
  406be6:	460c      	mov	r4, r1
  406be8:	b110      	cbz	r0, 406bf0 <_fclose_r+0x10>
  406bea:	6b83      	ldr	r3, [r0, #56]	; 0x38
  406bec:	2b00      	cmp	r3, #0
  406bee:	d03c      	beq.n	406c6a <_fclose_r+0x8a>
  406bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406bf2:	07d8      	lsls	r0, r3, #31
  406bf4:	d505      	bpl.n	406c02 <_fclose_r+0x22>
  406bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406bfa:	b92b      	cbnz	r3, 406c08 <_fclose_r+0x28>
  406bfc:	2600      	movs	r6, #0
  406bfe:	4630      	mov	r0, r6
  406c00:	bd70      	pop	{r4, r5, r6, pc}
  406c02:	89a3      	ldrh	r3, [r4, #12]
  406c04:	0599      	lsls	r1, r3, #22
  406c06:	d53c      	bpl.n	406c82 <_fclose_r+0xa2>
  406c08:	4621      	mov	r1, r4
  406c0a:	4628      	mov	r0, r5
  406c0c:	f7fe fee4 	bl	4059d8 <__sflush_r>
  406c10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  406c12:	4606      	mov	r6, r0
  406c14:	b133      	cbz	r3, 406c24 <_fclose_r+0x44>
  406c16:	69e1      	ldr	r1, [r4, #28]
  406c18:	4628      	mov	r0, r5
  406c1a:	4798      	blx	r3
  406c1c:	2800      	cmp	r0, #0
  406c1e:	bfb8      	it	lt
  406c20:	f04f 36ff 	movlt.w	r6, #4294967295
  406c24:	89a3      	ldrh	r3, [r4, #12]
  406c26:	061a      	lsls	r2, r3, #24
  406c28:	d422      	bmi.n	406c70 <_fclose_r+0x90>
  406c2a:	6b21      	ldr	r1, [r4, #48]	; 0x30
  406c2c:	b141      	cbz	r1, 406c40 <_fclose_r+0x60>
  406c2e:	f104 0340 	add.w	r3, r4, #64	; 0x40
  406c32:	4299      	cmp	r1, r3
  406c34:	d002      	beq.n	406c3c <_fclose_r+0x5c>
  406c36:	4628      	mov	r0, r5
  406c38:	f7ff f8ec 	bl	405e14 <_free_r>
  406c3c:	2300      	movs	r3, #0
  406c3e:	6323      	str	r3, [r4, #48]	; 0x30
  406c40:	6c61      	ldr	r1, [r4, #68]	; 0x44
  406c42:	b121      	cbz	r1, 406c4e <_fclose_r+0x6e>
  406c44:	4628      	mov	r0, r5
  406c46:	f7ff f8e5 	bl	405e14 <_free_r>
  406c4a:	2300      	movs	r3, #0
  406c4c:	6463      	str	r3, [r4, #68]	; 0x44
  406c4e:	f7fe ffe7 	bl	405c20 <__sfp_lock_acquire>
  406c52:	6e63      	ldr	r3, [r4, #100]	; 0x64
  406c54:	2200      	movs	r2, #0
  406c56:	07db      	lsls	r3, r3, #31
  406c58:	81a2      	strh	r2, [r4, #12]
  406c5a:	d50e      	bpl.n	406c7a <_fclose_r+0x9a>
  406c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c5e:	f7ff fb71 	bl	406344 <__retarget_lock_close_recursive>
  406c62:	f7fe ffe3 	bl	405c2c <__sfp_lock_release>
  406c66:	4630      	mov	r0, r6
  406c68:	bd70      	pop	{r4, r5, r6, pc}
  406c6a:	f7fe ffad 	bl	405bc8 <__sinit>
  406c6e:	e7bf      	b.n	406bf0 <_fclose_r+0x10>
  406c70:	6921      	ldr	r1, [r4, #16]
  406c72:	4628      	mov	r0, r5
  406c74:	f7ff f8ce 	bl	405e14 <_free_r>
  406c78:	e7d7      	b.n	406c2a <_fclose_r+0x4a>
  406c7a:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c7c:	f7ff fb66 	bl	40634c <__retarget_lock_release_recursive>
  406c80:	e7ec      	b.n	406c5c <_fclose_r+0x7c>
  406c82:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c84:	f7ff fb60 	bl	406348 <__retarget_lock_acquire_recursive>
  406c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
  406c8c:	2b00      	cmp	r3, #0
  406c8e:	d1bb      	bne.n	406c08 <_fclose_r+0x28>
  406c90:	6e66      	ldr	r6, [r4, #100]	; 0x64
  406c92:	f016 0601 	ands.w	r6, r6, #1
  406c96:	d1b1      	bne.n	406bfc <_fclose_r+0x1c>
  406c98:	6da0      	ldr	r0, [r4, #88]	; 0x58
  406c9a:	f7ff fb57 	bl	40634c <__retarget_lock_release_recursive>
  406c9e:	4630      	mov	r0, r6
  406ca0:	bd70      	pop	{r4, r5, r6, pc}
  406ca2:	bf00      	nop

00406ca4 <_fstat_r>:
  406ca4:	b538      	push	{r3, r4, r5, lr}
  406ca6:	460b      	mov	r3, r1
  406ca8:	4c07      	ldr	r4, [pc, #28]	; (406cc8 <_fstat_r+0x24>)
  406caa:	4605      	mov	r5, r0
  406cac:	4611      	mov	r1, r2
  406cae:	4618      	mov	r0, r3
  406cb0:	2300      	movs	r3, #0
  406cb2:	6023      	str	r3, [r4, #0]
  406cb4:	f7fb f879 	bl	401daa <_fstat>
  406cb8:	1c43      	adds	r3, r0, #1
  406cba:	d000      	beq.n	406cbe <_fstat_r+0x1a>
  406cbc:	bd38      	pop	{r3, r4, r5, pc}
  406cbe:	6823      	ldr	r3, [r4, #0]
  406cc0:	2b00      	cmp	r3, #0
  406cc2:	d0fb      	beq.n	406cbc <_fstat_r+0x18>
  406cc4:	602b      	str	r3, [r5, #0]
  406cc6:	bd38      	pop	{r3, r4, r5, pc}
  406cc8:	2040c81c 	.word	0x2040c81c

00406ccc <_isatty_r>:
  406ccc:	b538      	push	{r3, r4, r5, lr}
  406cce:	4c07      	ldr	r4, [pc, #28]	; (406cec <_isatty_r+0x20>)
  406cd0:	2300      	movs	r3, #0
  406cd2:	4605      	mov	r5, r0
  406cd4:	4608      	mov	r0, r1
  406cd6:	6023      	str	r3, [r4, #0]
  406cd8:	f7fb f86c 	bl	401db4 <_isatty>
  406cdc:	1c43      	adds	r3, r0, #1
  406cde:	d000      	beq.n	406ce2 <_isatty_r+0x16>
  406ce0:	bd38      	pop	{r3, r4, r5, pc}
  406ce2:	6823      	ldr	r3, [r4, #0]
  406ce4:	2b00      	cmp	r3, #0
  406ce6:	d0fb      	beq.n	406ce0 <_isatty_r+0x14>
  406ce8:	602b      	str	r3, [r5, #0]
  406cea:	bd38      	pop	{r3, r4, r5, pc}
  406cec:	2040c81c 	.word	0x2040c81c

00406cf0 <_lseek_r>:
  406cf0:	b570      	push	{r4, r5, r6, lr}
  406cf2:	460d      	mov	r5, r1
  406cf4:	4c08      	ldr	r4, [pc, #32]	; (406d18 <_lseek_r+0x28>)
  406cf6:	4611      	mov	r1, r2
  406cf8:	4606      	mov	r6, r0
  406cfa:	461a      	mov	r2, r3
  406cfc:	4628      	mov	r0, r5
  406cfe:	2300      	movs	r3, #0
  406d00:	6023      	str	r3, [r4, #0]
  406d02:	f7fb f859 	bl	401db8 <_lseek>
  406d06:	1c43      	adds	r3, r0, #1
  406d08:	d000      	beq.n	406d0c <_lseek_r+0x1c>
  406d0a:	bd70      	pop	{r4, r5, r6, pc}
  406d0c:	6823      	ldr	r3, [r4, #0]
  406d0e:	2b00      	cmp	r3, #0
  406d10:	d0fb      	beq.n	406d0a <_lseek_r+0x1a>
  406d12:	6033      	str	r3, [r6, #0]
  406d14:	bd70      	pop	{r4, r5, r6, pc}
  406d16:	bf00      	nop
  406d18:	2040c81c 	.word	0x2040c81c

00406d1c <_read_r>:
  406d1c:	b570      	push	{r4, r5, r6, lr}
  406d1e:	460d      	mov	r5, r1
  406d20:	4c08      	ldr	r4, [pc, #32]	; (406d44 <_read_r+0x28>)
  406d22:	4611      	mov	r1, r2
  406d24:	4606      	mov	r6, r0
  406d26:	461a      	mov	r2, r3
  406d28:	4628      	mov	r0, r5
  406d2a:	2300      	movs	r3, #0
  406d2c:	6023      	str	r3, [r4, #0]
  406d2e:	f7f9 fd8f 	bl	400850 <_read>
  406d32:	1c43      	adds	r3, r0, #1
  406d34:	d000      	beq.n	406d38 <_read_r+0x1c>
  406d36:	bd70      	pop	{r4, r5, r6, pc}
  406d38:	6823      	ldr	r3, [r4, #0]
  406d3a:	2b00      	cmp	r3, #0
  406d3c:	d0fb      	beq.n	406d36 <_read_r+0x1a>
  406d3e:	6033      	str	r3, [r6, #0]
  406d40:	bd70      	pop	{r4, r5, r6, pc}
  406d42:	bf00      	nop
  406d44:	2040c81c 	.word	0x2040c81c

00406d48 <__aeabi_uldivmod>:
  406d48:	b953      	cbnz	r3, 406d60 <__aeabi_uldivmod+0x18>
  406d4a:	b94a      	cbnz	r2, 406d60 <__aeabi_uldivmod+0x18>
  406d4c:	2900      	cmp	r1, #0
  406d4e:	bf08      	it	eq
  406d50:	2800      	cmpeq	r0, #0
  406d52:	bf1c      	itt	ne
  406d54:	f04f 31ff 	movne.w	r1, #4294967295
  406d58:	f04f 30ff 	movne.w	r0, #4294967295
  406d5c:	f000 b97a 	b.w	407054 <__aeabi_idiv0>
  406d60:	f1ad 0c08 	sub.w	ip, sp, #8
  406d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  406d68:	f000 f806 	bl	406d78 <__udivmoddi4>
  406d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
  406d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  406d74:	b004      	add	sp, #16
  406d76:	4770      	bx	lr

00406d78 <__udivmoddi4>:
  406d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  406d7c:	468c      	mov	ip, r1
  406d7e:	460d      	mov	r5, r1
  406d80:	4604      	mov	r4, r0
  406d82:	9e08      	ldr	r6, [sp, #32]
  406d84:	2b00      	cmp	r3, #0
  406d86:	d151      	bne.n	406e2c <__udivmoddi4+0xb4>
  406d88:	428a      	cmp	r2, r1
  406d8a:	4617      	mov	r7, r2
  406d8c:	d96d      	bls.n	406e6a <__udivmoddi4+0xf2>
  406d8e:	fab2 fe82 	clz	lr, r2
  406d92:	f1be 0f00 	cmp.w	lr, #0
  406d96:	d00b      	beq.n	406db0 <__udivmoddi4+0x38>
  406d98:	f1ce 0c20 	rsb	ip, lr, #32
  406d9c:	fa01 f50e 	lsl.w	r5, r1, lr
  406da0:	fa20 fc0c 	lsr.w	ip, r0, ip
  406da4:	fa02 f70e 	lsl.w	r7, r2, lr
  406da8:	ea4c 0c05 	orr.w	ip, ip, r5
  406dac:	fa00 f40e 	lsl.w	r4, r0, lr
  406db0:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  406db4:	0c25      	lsrs	r5, r4, #16
  406db6:	fbbc f8fa 	udiv	r8, ip, sl
  406dba:	fa1f f987 	uxth.w	r9, r7
  406dbe:	fb0a cc18 	mls	ip, sl, r8, ip
  406dc2:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  406dc6:	fb08 f309 	mul.w	r3, r8, r9
  406dca:	42ab      	cmp	r3, r5
  406dcc:	d90a      	bls.n	406de4 <__udivmoddi4+0x6c>
  406dce:	19ed      	adds	r5, r5, r7
  406dd0:	f108 32ff 	add.w	r2, r8, #4294967295
  406dd4:	f080 8123 	bcs.w	40701e <__udivmoddi4+0x2a6>
  406dd8:	42ab      	cmp	r3, r5
  406dda:	f240 8120 	bls.w	40701e <__udivmoddi4+0x2a6>
  406dde:	f1a8 0802 	sub.w	r8, r8, #2
  406de2:	443d      	add	r5, r7
  406de4:	1aed      	subs	r5, r5, r3
  406de6:	b2a4      	uxth	r4, r4
  406de8:	fbb5 f0fa 	udiv	r0, r5, sl
  406dec:	fb0a 5510 	mls	r5, sl, r0, r5
  406df0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  406df4:	fb00 f909 	mul.w	r9, r0, r9
  406df8:	45a1      	cmp	r9, r4
  406dfa:	d909      	bls.n	406e10 <__udivmoddi4+0x98>
  406dfc:	19e4      	adds	r4, r4, r7
  406dfe:	f100 33ff 	add.w	r3, r0, #4294967295
  406e02:	f080 810a 	bcs.w	40701a <__udivmoddi4+0x2a2>
  406e06:	45a1      	cmp	r9, r4
  406e08:	f240 8107 	bls.w	40701a <__udivmoddi4+0x2a2>
  406e0c:	3802      	subs	r0, #2
  406e0e:	443c      	add	r4, r7
  406e10:	eba4 0409 	sub.w	r4, r4, r9
  406e14:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406e18:	2100      	movs	r1, #0
  406e1a:	2e00      	cmp	r6, #0
  406e1c:	d061      	beq.n	406ee2 <__udivmoddi4+0x16a>
  406e1e:	fa24 f40e 	lsr.w	r4, r4, lr
  406e22:	2300      	movs	r3, #0
  406e24:	6034      	str	r4, [r6, #0]
  406e26:	6073      	str	r3, [r6, #4]
  406e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406e2c:	428b      	cmp	r3, r1
  406e2e:	d907      	bls.n	406e40 <__udivmoddi4+0xc8>
  406e30:	2e00      	cmp	r6, #0
  406e32:	d054      	beq.n	406ede <__udivmoddi4+0x166>
  406e34:	2100      	movs	r1, #0
  406e36:	e886 0021 	stmia.w	r6, {r0, r5}
  406e3a:	4608      	mov	r0, r1
  406e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406e40:	fab3 f183 	clz	r1, r3
  406e44:	2900      	cmp	r1, #0
  406e46:	f040 808e 	bne.w	406f66 <__udivmoddi4+0x1ee>
  406e4a:	42ab      	cmp	r3, r5
  406e4c:	d302      	bcc.n	406e54 <__udivmoddi4+0xdc>
  406e4e:	4282      	cmp	r2, r0
  406e50:	f200 80fa 	bhi.w	407048 <__udivmoddi4+0x2d0>
  406e54:	1a84      	subs	r4, r0, r2
  406e56:	eb65 0503 	sbc.w	r5, r5, r3
  406e5a:	2001      	movs	r0, #1
  406e5c:	46ac      	mov	ip, r5
  406e5e:	2e00      	cmp	r6, #0
  406e60:	d03f      	beq.n	406ee2 <__udivmoddi4+0x16a>
  406e62:	e886 1010 	stmia.w	r6, {r4, ip}
  406e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406e6a:	b912      	cbnz	r2, 406e72 <__udivmoddi4+0xfa>
  406e6c:	2701      	movs	r7, #1
  406e6e:	fbb7 f7f2 	udiv	r7, r7, r2
  406e72:	fab7 fe87 	clz	lr, r7
  406e76:	f1be 0f00 	cmp.w	lr, #0
  406e7a:	d134      	bne.n	406ee6 <__udivmoddi4+0x16e>
  406e7c:	1beb      	subs	r3, r5, r7
  406e7e:	0c3a      	lsrs	r2, r7, #16
  406e80:	fa1f fc87 	uxth.w	ip, r7
  406e84:	2101      	movs	r1, #1
  406e86:	fbb3 f8f2 	udiv	r8, r3, r2
  406e8a:	0c25      	lsrs	r5, r4, #16
  406e8c:	fb02 3318 	mls	r3, r2, r8, r3
  406e90:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406e94:	fb0c f308 	mul.w	r3, ip, r8
  406e98:	42ab      	cmp	r3, r5
  406e9a:	d907      	bls.n	406eac <__udivmoddi4+0x134>
  406e9c:	19ed      	adds	r5, r5, r7
  406e9e:	f108 30ff 	add.w	r0, r8, #4294967295
  406ea2:	d202      	bcs.n	406eaa <__udivmoddi4+0x132>
  406ea4:	42ab      	cmp	r3, r5
  406ea6:	f200 80d1 	bhi.w	40704c <__udivmoddi4+0x2d4>
  406eaa:	4680      	mov	r8, r0
  406eac:	1aed      	subs	r5, r5, r3
  406eae:	b2a3      	uxth	r3, r4
  406eb0:	fbb5 f0f2 	udiv	r0, r5, r2
  406eb4:	fb02 5510 	mls	r5, r2, r0, r5
  406eb8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  406ebc:	fb0c fc00 	mul.w	ip, ip, r0
  406ec0:	45a4      	cmp	ip, r4
  406ec2:	d907      	bls.n	406ed4 <__udivmoddi4+0x15c>
  406ec4:	19e4      	adds	r4, r4, r7
  406ec6:	f100 33ff 	add.w	r3, r0, #4294967295
  406eca:	d202      	bcs.n	406ed2 <__udivmoddi4+0x15a>
  406ecc:	45a4      	cmp	ip, r4
  406ece:	f200 80b8 	bhi.w	407042 <__udivmoddi4+0x2ca>
  406ed2:	4618      	mov	r0, r3
  406ed4:	eba4 040c 	sub.w	r4, r4, ip
  406ed8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  406edc:	e79d      	b.n	406e1a <__udivmoddi4+0xa2>
  406ede:	4631      	mov	r1, r6
  406ee0:	4630      	mov	r0, r6
  406ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  406ee6:	f1ce 0420 	rsb	r4, lr, #32
  406eea:	fa05 f30e 	lsl.w	r3, r5, lr
  406eee:	fa07 f70e 	lsl.w	r7, r7, lr
  406ef2:	fa20 f804 	lsr.w	r8, r0, r4
  406ef6:	0c3a      	lsrs	r2, r7, #16
  406ef8:	fa25 f404 	lsr.w	r4, r5, r4
  406efc:	ea48 0803 	orr.w	r8, r8, r3
  406f00:	fbb4 f1f2 	udiv	r1, r4, r2
  406f04:	ea4f 4518 	mov.w	r5, r8, lsr #16
  406f08:	fb02 4411 	mls	r4, r2, r1, r4
  406f0c:	fa1f fc87 	uxth.w	ip, r7
  406f10:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  406f14:	fb01 f30c 	mul.w	r3, r1, ip
  406f18:	42ab      	cmp	r3, r5
  406f1a:	fa00 f40e 	lsl.w	r4, r0, lr
  406f1e:	d909      	bls.n	406f34 <__udivmoddi4+0x1bc>
  406f20:	19ed      	adds	r5, r5, r7
  406f22:	f101 30ff 	add.w	r0, r1, #4294967295
  406f26:	f080 808a 	bcs.w	40703e <__udivmoddi4+0x2c6>
  406f2a:	42ab      	cmp	r3, r5
  406f2c:	f240 8087 	bls.w	40703e <__udivmoddi4+0x2c6>
  406f30:	3902      	subs	r1, #2
  406f32:	443d      	add	r5, r7
  406f34:	1aeb      	subs	r3, r5, r3
  406f36:	fa1f f588 	uxth.w	r5, r8
  406f3a:	fbb3 f0f2 	udiv	r0, r3, r2
  406f3e:	fb02 3310 	mls	r3, r2, r0, r3
  406f42:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  406f46:	fb00 f30c 	mul.w	r3, r0, ip
  406f4a:	42ab      	cmp	r3, r5
  406f4c:	d907      	bls.n	406f5e <__udivmoddi4+0x1e6>
  406f4e:	19ed      	adds	r5, r5, r7
  406f50:	f100 38ff 	add.w	r8, r0, #4294967295
  406f54:	d26f      	bcs.n	407036 <__udivmoddi4+0x2be>
  406f56:	42ab      	cmp	r3, r5
  406f58:	d96d      	bls.n	407036 <__udivmoddi4+0x2be>
  406f5a:	3802      	subs	r0, #2
  406f5c:	443d      	add	r5, r7
  406f5e:	1aeb      	subs	r3, r5, r3
  406f60:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  406f64:	e78f      	b.n	406e86 <__udivmoddi4+0x10e>
  406f66:	f1c1 0720 	rsb	r7, r1, #32
  406f6a:	fa22 f807 	lsr.w	r8, r2, r7
  406f6e:	408b      	lsls	r3, r1
  406f70:	fa05 f401 	lsl.w	r4, r5, r1
  406f74:	ea48 0303 	orr.w	r3, r8, r3
  406f78:	fa20 fe07 	lsr.w	lr, r0, r7
  406f7c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  406f80:	40fd      	lsrs	r5, r7
  406f82:	ea4e 0e04 	orr.w	lr, lr, r4
  406f86:	fbb5 f9fc 	udiv	r9, r5, ip
  406f8a:	ea4f 441e 	mov.w	r4, lr, lsr #16
  406f8e:	fb0c 5519 	mls	r5, ip, r9, r5
  406f92:	fa1f f883 	uxth.w	r8, r3
  406f96:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  406f9a:	fb09 f408 	mul.w	r4, r9, r8
  406f9e:	42ac      	cmp	r4, r5
  406fa0:	fa02 f201 	lsl.w	r2, r2, r1
  406fa4:	fa00 fa01 	lsl.w	sl, r0, r1
  406fa8:	d908      	bls.n	406fbc <__udivmoddi4+0x244>
  406faa:	18ed      	adds	r5, r5, r3
  406fac:	f109 30ff 	add.w	r0, r9, #4294967295
  406fb0:	d243      	bcs.n	40703a <__udivmoddi4+0x2c2>
  406fb2:	42ac      	cmp	r4, r5
  406fb4:	d941      	bls.n	40703a <__udivmoddi4+0x2c2>
  406fb6:	f1a9 0902 	sub.w	r9, r9, #2
  406fba:	441d      	add	r5, r3
  406fbc:	1b2d      	subs	r5, r5, r4
  406fbe:	fa1f fe8e 	uxth.w	lr, lr
  406fc2:	fbb5 f0fc 	udiv	r0, r5, ip
  406fc6:	fb0c 5510 	mls	r5, ip, r0, r5
  406fca:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  406fce:	fb00 f808 	mul.w	r8, r0, r8
  406fd2:	45a0      	cmp	r8, r4
  406fd4:	d907      	bls.n	406fe6 <__udivmoddi4+0x26e>
  406fd6:	18e4      	adds	r4, r4, r3
  406fd8:	f100 35ff 	add.w	r5, r0, #4294967295
  406fdc:	d229      	bcs.n	407032 <__udivmoddi4+0x2ba>
  406fde:	45a0      	cmp	r8, r4
  406fe0:	d927      	bls.n	407032 <__udivmoddi4+0x2ba>
  406fe2:	3802      	subs	r0, #2
  406fe4:	441c      	add	r4, r3
  406fe6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  406fea:	eba4 0408 	sub.w	r4, r4, r8
  406fee:	fba0 8902 	umull	r8, r9, r0, r2
  406ff2:	454c      	cmp	r4, r9
  406ff4:	46c6      	mov	lr, r8
  406ff6:	464d      	mov	r5, r9
  406ff8:	d315      	bcc.n	407026 <__udivmoddi4+0x2ae>
  406ffa:	d012      	beq.n	407022 <__udivmoddi4+0x2aa>
  406ffc:	b156      	cbz	r6, 407014 <__udivmoddi4+0x29c>
  406ffe:	ebba 030e 	subs.w	r3, sl, lr
  407002:	eb64 0405 	sbc.w	r4, r4, r5
  407006:	fa04 f707 	lsl.w	r7, r4, r7
  40700a:	40cb      	lsrs	r3, r1
  40700c:	431f      	orrs	r7, r3
  40700e:	40cc      	lsrs	r4, r1
  407010:	6037      	str	r7, [r6, #0]
  407012:	6074      	str	r4, [r6, #4]
  407014:	2100      	movs	r1, #0
  407016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40701a:	4618      	mov	r0, r3
  40701c:	e6f8      	b.n	406e10 <__udivmoddi4+0x98>
  40701e:	4690      	mov	r8, r2
  407020:	e6e0      	b.n	406de4 <__udivmoddi4+0x6c>
  407022:	45c2      	cmp	sl, r8
  407024:	d2ea      	bcs.n	406ffc <__udivmoddi4+0x284>
  407026:	ebb8 0e02 	subs.w	lr, r8, r2
  40702a:	eb69 0503 	sbc.w	r5, r9, r3
  40702e:	3801      	subs	r0, #1
  407030:	e7e4      	b.n	406ffc <__udivmoddi4+0x284>
  407032:	4628      	mov	r0, r5
  407034:	e7d7      	b.n	406fe6 <__udivmoddi4+0x26e>
  407036:	4640      	mov	r0, r8
  407038:	e791      	b.n	406f5e <__udivmoddi4+0x1e6>
  40703a:	4681      	mov	r9, r0
  40703c:	e7be      	b.n	406fbc <__udivmoddi4+0x244>
  40703e:	4601      	mov	r1, r0
  407040:	e778      	b.n	406f34 <__udivmoddi4+0x1bc>
  407042:	3802      	subs	r0, #2
  407044:	443c      	add	r4, r7
  407046:	e745      	b.n	406ed4 <__udivmoddi4+0x15c>
  407048:	4608      	mov	r0, r1
  40704a:	e708      	b.n	406e5e <__udivmoddi4+0xe6>
  40704c:	f1a8 0802 	sub.w	r8, r8, #2
  407050:	443d      	add	r5, r7
  407052:	e72b      	b.n	406eac <__udivmoddi4+0x134>

00407054 <__aeabi_idiv0>:
  407054:	4770      	bx	lr
  407056:	bf00      	nop
  407058:	454c4449 	.word	0x454c4449
  40705c:	00000000 	.word	0x00000000
  407060:	51726d54 	.word	0x51726d54
  407064:	00000000 	.word	0x00000000
  407068:	20726d54 	.word	0x20726d54
  40706c:	00637653 	.word	0x00637653
  407070:	0a05000d 	.word	0x0a05000d
  407074:	0000004b 	.word	0x0000004b
  407078:	00001932 	.word	0x00001932
  40707c:	0e00008b 	.word	0x0e00008b
  407080:	32800008 	.word	0x32800008
  407084:	030a0205 	.word	0x030a0205
  407088:	0f022003 	.word	0x0f022003
  40708c:	00000a0f 	.word	0x00000a0f
  407090:	18180000 	.word	0x18180000
  407094:	00002020 	.word	0x00002020
  407098:	0a000000 	.word	0x0a000000
  40709c:	02020000 	.word	0x02020000
  4070a0:	18180000 	.word	0x18180000
  4070a4:	00030000 	.word	0x00030000
  4070a8:	00000000 	.word	0x00000000
  4070ac:	18010002 	.word	0x18010002
  4070b0:	1e1e1e1e 	.word	0x1e1e1e1e
  4070b4:	1e1e1e1e 	.word	0x1e1e1e1e
  4070b8:	1e1e1e1e 	.word	0x1e1e1e1e
  4070bc:	00001e1e 	.word	0x00001e1e
	...

004070d0 <image_data_ar>:
  4070d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4070e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4070f0:	ffffffff ffffffff ffffffff ffffffff     ................
  407100:	ffffffff ffffffff ffffffff ffffffff     ................
  407110:	ffffffff ffffffff ffffffff ffffffff     ................
  407120:	ffffffff ffffffff ffffffff ffffffff     ................
  407130:	c4ffffff 7676c4c4 4f4f4f76 23373737     ......vvvOOO777#
  407140:	18182323 10101018 05090909 03030505     ##..............
  407150:	00000003 03000000 05050303 09090905     ................
  407160:	18101010 23231818 37373723 774f4f4f     ......###777OOOw
  407170:	c4c47777 ffffffc4 ffffffff ffffffff     ww..............
  407180:	ffffffff ffffffff ffffffff ffffffff     ................
  407190:	ffffffff ffffffff ffffffff ffffffff     ................
  4071a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4071b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4071c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4071d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4071e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4071f0:	ffffffff ffffffff ffffffff ffffffff     ................
  407200:	ffffffff ffffffff ffffffff ffffffff     ................
  407210:	ffffffff ffffffff ffffffff ffffffff     ................
  407220:	ffffffff ffffffff ffffffff 78dfdfdf     ...............x
  407230:	3f3f7878 1d1d1d3f 00070707 00000000     xx???...........
	...
  40727c:	07070700 3f1d1d1d 78783f3f e2e2e278     .......???xxx...
  40728c:	ffffffff ffffffff ffffffff ffffffff     ................
  40729c:	ffffffff ffffffff ffffffff ffffffff     ................
  4072ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4072bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4072cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4072dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4072ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4072fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40730c:	ffffffff ffffffff ffffffff ffffffff     ................
  40731c:	ffffffff ffffffff ffffffff a9ffffff     ................
  40732c:	4747a9a9 1b1b1b47 00020202 00000000     ..GGG...........
	...
  407390:	03030300 491b1b1b a9a94949 ffffffa9     .......III......
  4073a0:	ffffffff ffffffff ffffffff ffffffff     ................
  4073b0:	ffffffff ffffffff ffffffff ffffffff     ................
  4073c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4073d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4073e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4073f0:	ffffffff ffffffff ffffffff ffffffff     ................
  407400:	ffffffff ffffffff ffffffff ffffffff     ................
  407410:	ffffffff ffffffff ffffffff ffffffff     ................
  407420:	ffffffff ffffffff b7b7ffff 444444b7     .............DDD
  407430:	00121212 00000000 00000000 00000000     ................
	...
  4074a4:	13131300 b9444444 ffffb9b9 ffffffff     ....DDD.........
  4074b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4074c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4074d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4074e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4074f4:	ffffffff ffffffff ffffffff ffffffff     ................
  407504:	ffffffff ffffffff ffffffff ffffffff     ................
  407514:	ffffffff ffffffff ffffffff ffffffff     ................
  407524:	ffffffff f9f9f9ff 1e6c6c6c 01011e1e     ........lll.....
  407534:	00000001 00000000 00000000 00000000     ................
	...
  4075b0:	01000000 1e1e0101 6c6c6c1e fff9f9f9     .........lll....
  4075c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4075d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4075e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4075f0:	ffffffff ffffffff ffffffff ffffffff     ................
  407600:	ffffffff ffffffff ffffffff ffffffff     ................
  407610:	ffffffff ffffffff ffffffff ffffffff     ................
  407620:	ffffffff ffffffff f3ffffff 5a5af3f3     ..............ZZ
  407630:	0f0f0f5a 00000000 00000000 00000000     Z...............
	...
  407664:	11040404 21211111 2c2c2c21 3a323232     ......!!!,,,222:
  407674:	44443a3a 4e4e4e44 444e4e4e 3a3a4444     ::DDDNNNNNNDDD::
  407684:	3232323a 212c2c2c 11112121 04040411     :222,,,!!!......
	...
  4076c4:	5a0f0f0f f3f35a5a fffffff3 ffffffff     ...ZZZ..........
  4076d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4076e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4076f4:	ffffffff ffffffff ffffffff ffffffff     ................
  407704:	ffffffff ffffffff ffffffff ffffffff     ................
  407714:	ffffffff ffffffff ffffffff ffffffff     ................
  407724:	ffffffff ffffffff eaeaeaff 0c515151     ............QQQ.
  407734:	00000c0c 00000000 00000000 00000000     ................
	...
  40775c:	0d0d0d00 54292929 81815454 bfbfbf81     ....)))TTT......
  40776c:	ffffffff ffffffff ffffffff ffffffff     ................
  40777c:	ffffffff ffffffff ffffffff ffffffff     ................
  40778c:	ffffffff ffffffff ffffffff ffffffff     ................
  40779c:	80bfbfbf 54548080 28282854 000c0c0c     ......TTT(((....
	...
  4077d0:	0c0c0000 5252520c ffeaeaea ffffffff     .....RRR........
  4077e0:	ffffffff ffffffff ffffffff ffffffff     ................
  4077f0:	ffffffff ffffffff ffffffff ffffffff     ................
  407800:	ffffffff ffffffff ffffffff ffffffff     ................
  407810:	ffffffff ffffffff ffffffff ffffffff     ................
  407820:	ffffffff ffffffff ffffffff f9ffffff     ................
  407830:	5454f9f9 09090954 00000000 00000000     ..TTT...........
	...
  407858:	09090900 622e2e2e bfbf6262 ffffffbf     .......bbb......
  407868:	ffffffff ffffffff ffffffff ffffffff     ................
  407878:	ffffffff ffffffff ffffffff ffffffff     ................
  407888:	ffffffff ffffffff ffffffff ffffffff     ................
  407898:	ffffffff ffffffff ffffffff ffffffff     ................
  4078a8:	ffffffff ffffffff bdffffff 6161bdbd     ..............aa
  4078b8:	2e2e2e61 00090909 00000000 00000000     a...............
	...
  4078e0:	54090909 fcfc5454 fffffffc ffffffff     ...TTT..........
  4078f0:	ffffffff ffffffff ffffffff ffffffff     ................
  407900:	ffffffff ffffffff ffffffff ffffffff     ................
  407910:	ffffffff ffffffff ffffffff ffffffff     ................
  407920:	ffffffff ffffffff ffffffff ffffffff     ................
  407930:	ffffffff 15949494 00001515 00000000     ................
	...
  407958:	27060606 6b6b2727 f3f3f36b ffffffff     ...'''kkk.......
  407968:	ffffffff ffffffff ffffffff ffffffff     ................
  407978:	ffffffff ffffffff ffffffff ffffffff     ................
  407988:	ffffffff ffffffff ffffffff ffffffff     ................
  407998:	ffffffff ffffffff ffffffff ffffffff     ................
  4079a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4079b8:	ffffffff ffffffff ffffffff 81f9f9f9     ................
  4079c8:	32328181 07070732 00000000 00000000     ..222...........
	...
  4079ec:	13130000 8a8a8a13 ffffffff ffffffff     ................
  4079fc:	ffffffff ffffffff ffffffff ffffffff     ................
  407a0c:	ffffffff ffffffff ffffffff ffffffff     ................
  407a1c:	ffffffff ffffffff ffffffff ffffffff     ................
  407a2c:	ffffffff ffffffff d5d5ffff 323232d5     .............222
  407a3c:	00010101 00000000 00000000 00000000     ................
	...
  407a58:	1a1a0000 6c6c6c1a fff3f3f3 ffffffff     .....lll........
  407a68:	ffffffff ffffffff ffffffff ffffffff     ................
  407a78:	ffffffff ffffffff ffffffff ffffffff     ................
  407a88:	ffffffff ffffffff ffffffff ffffffff     ................
  407a98:	ffffffff ffffffff ffffffff ffffffff     ................
  407aa8:	ffffffff ffffffff ffffffff ffffffff     ................
  407ab8:	ffffffff ffffffff ffffffff ffffffff     ................
  407ac8:	ffffffff ffffffff ffffffff f3f3f3ff     ................
  407ad8:	1a6b6b6b 00001a1a 00000000 00000000     kkk.............
	...
  407af8:	01010100 d7323232 ffffd7d7 ffffffff     ....222.........
  407b08:	ffffffff ffffffff ffffffff ffffffff     ................
  407b18:	ffffffff ffffffff ffffffff ffffffff     ................
  407b28:	ffffffff ffffffff ffffffff ffffffff     ................
  407b38:	6bffffff 09096b6b 00000009 00000000     ...kkk..........
	...
  407b58:	02020200 94272727 ffff9494 ffffffff     ....'''.........
  407b68:	ffffffff ffffffff ffffffff ffffffff     ................
  407b78:	ffffffff ffffffff ffffffff ffffffff     ................
  407b88:	ffffffff ffffffff ffffffff ffffffff     ................
  407b98:	ffffffff ffffffff ffffffff ffffffff     ................
  407ba8:	ffffffff ffffffff ffffffff ffffffff     ................
  407bb8:	ffffffff ffffffff ffffffff ffffffff     ................
  407bc8:	ffffffff ffffffff ffffffff ffffffff     ................
  407bd8:	ffffffff ffffffff ffffffff 9393ffff     ................
  407be8:	27272793 00020202 00000000 00000000     .'''............
	...
  407c04:	09000000 6c6c0909 ffffff6c ffffffff     ......lll.......
  407c14:	ffffffff ffffffff ffffffff ffffffff     ................
  407c24:	ffffffff ffffffff ffffffff ffffffff     ................
  407c34:	ffffffff ffffffff f0f0f0ff 00343434     ............444.
	...
  407c58:	02000000 30300202 bbbbbb30 ffffffff     ......000.......
  407c68:	ffffffff ffffffff ffffffff ffffffff     ................
  407c78:	ffffffff ffffffff ffffffff ffffffff     ................
  407c88:	ffffffff ffffffff ffffffff ffffffff     ................
  407c98:	ffffffff ffffffff ffffffff ffffffff     ................
  407ca8:	ffffffff ffffffff ffffffff ffffffff     ................
  407cb8:	ffffffff ffffffff ffffffff ffffffff     ................
  407cc8:	ffffffff ffffffff ffffffff ffffffff     ................
  407cd8:	ffffffff ffffffff ffffffff ffffffff     ................
  407ce8:	ffffffff ffffffff ffffffff 2eb9b9b9     ................
  407cf8:	01012e2e 00000001 00000000 00000000     ................
	...
  407d14:	34343400 fff0f0f0 ffffffff ffffffff     .444............
  407d24:	ffffffff ffffffff ffffffff ffffffff     ................
  407d34:	ffffffff ffffffff ffffffff b5b5ffff     ................
  407d44:	151515b5 00000000 00000000 00000000     ................
	...
  407d60:	991a1a1a ffff9999 ffffffff ffffffff     ................
  407d70:	ffffffff ffffffff ffffffff ffffffff     ................
  407d80:	ffffffff ffffffff ffffffff ffffffff     ................
  407d90:	ffffffff ffffffff ffffffff ffffffff     ................
  407da0:	ffffffff ffffffff ffffffff ffffffff     ................
  407db0:	ffffffff ffffffff ffffffff ffffffff     ................
  407dc0:	ffffffff ffffffff ffffffff ffffffff     ................
  407dd0:	ffffffff ffffffff ffffffff ffffffff     ................
  407de0:	ffffffff ffffffff ffffffff ffffffff     ................
  407df0:	ffffffff ffffffff ffffffff ffffffff     ................
  407e00:	a2a2ffff 1e1e1ea2 00000000 00000000     ................
	...
  407e20:	ad141414 ffffadad ffffffff ffffffff     ................
  407e30:	ffffffff ffffffff ffffffff ffffffff     ................
  407e40:	ffffffff 6bffffff 06066b6b 00000006     .......kkk......
	...
  407e60:	0f0f0000 7373730f ffffffff ffffffff     .....sss........
  407e70:	ffffffff ffffffff ffffffff ffffffff     ................
  407e80:	ffffffff ffffffff ffffffff ffffffff     ................
  407e90:	ffffffff ffffffff ffffffff ffffffff     ................
  407ea0:	ffffffff ffffffff ffffffff ffffffff     ................
  407eb0:	ffffffff ffffffff ffffffff ffffffff     ................
  407ec0:	ffffffff ffffffff ffffffff ffffffff     ................
  407ed0:	ffffffff ffffffff ffffffff ffffffff     ................
  407ee0:	ffffffff ffffffff ffffffff ffffffff     ................
  407ef0:	ffffffff ffffffff ffffffff ffffffff     ................
  407f00:	ffffffff ffffffff ffffffff ffffffff     ................
  407f10:	0f717171 00000f0f 00000000 00000000     qqq.............
	...
  407f28:	06000000 6b6b0606 ffffff6b ffffffff     ......kkk.......
  407f38:	ffffffff ffffffff ffffffff ffffffff     ................
  407f48:	ffffffff 014c4c4c 00000101 00000000     ....LLL.........
	...
  407f64:	32010101 eded3232 ffffffed ffffffff     ...222..........
  407f74:	ffffffff ffffffff ffffffff ffffffff     ................
  407f84:	ffffffff ffffffff ffffffff ffffffff     ................
  407f94:	ffffffff ffffffff ffffffff ffffffff     ................
  407fa4:	ffffffff ffffffff ffffffff ffffffff     ................
  407fb4:	ffffffff ffffffff ffffffff ffffffff     ................
  407fc4:	ffffffff ffffffff ffffffff ffffffff     ................
  407fd4:	ffffffff ffffffff ffffffff ffffffff     ................
  407fe4:	ffffffff ffffffff ffffffff ffffffff     ................
  407ff4:	ffffffff ffffffff ffffffff ffffffff     ................
  408004:	ffffffff ffffffff ffffffff ffffffff     ................
  408014:	ffffffff f0ffffff 3d3df0f0 0101013d     ..........===...
	...
  408038:	45454500 ffffffff ffffffff ffffffff     .EEE............
  408048:	ffffffff fcfcffff 3d3d3dfc 00000000     .........===....
	...
  408068:	0b0b0b00 ff7c7c7c ffffffff ffffffff     ....|||.........
  408078:	ffffffff ffffffff ffffffff ffffffff     ................
  408088:	ffffffff ffffffff ffffffff ffffffff     ................
  408098:	ffffffff ffffffff ffffffff ffffffff     ................
  4080a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4080b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4080c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4080d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4080e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4080f8:	ffffffff ffffffff ffffffff ffffffff     ................
  408108:	ffffffff ffffffff ffffffff ffffffff     ................
  408118:	ffffffff ffffffff ffffffff ffffffff     ................
  408128:	858585ff 000c0c0c 00000000 00000000     ................
	...
  408144:	fc323232 fffffcfc ffffffff f3ffffff     222.............
  408154:	2a2af3f3 0000002a 00000000 00000000     ..***...........
	...
  40816c:	28280000 d7d7d728 ffffffff ffffffff     ..(((...........
  40817c:	ffffffff ffffffff ffffffff ffffffff     ................
  40818c:	ffffffff ffffffff ffffffff ffffffff     ................
  40819c:	ffffffff ffffffff ffffffff ffffffff     ................
  4081ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4081bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4081cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4081dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4081ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4081fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40820c:	ffffffff ffffffff ffffffff ffffffff     ................
  40821c:	ffffffff ffffffff ffffffff ffffffff     ................
  40822c:	ffffffff ffffffff 27d7d7d7 00002727     ...........'''..
	...
  40824c:	29000000 f3f32929 fffffff3 1ee4e4e4     ...)))..........
  40825c:	00001e1e 00000000 00000000 00000000     ................
  40826c:	00000000 4f010101 ffff4f4f ffffffff     .......OOO......
  40827c:	ffffffff ffffffff ffffffff ffffffff     ................
  40828c:	ffffffff ffffffff ffffffff ffffffff     ................
  40829c:	ffffffff ffffffff ffffffff ffffffff     ................
  4082ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4082bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4082cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4082dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4082ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4082fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40830c:	ffffffff ffffffff ffffffff ffffffff     ................
  40831c:	ffffffff ffffffff ffffffff ffffffff     ................
  40832c:	ffffffff ffffffff ffffffff ffffffff     ................
  40833c:	ffffffff 4c4cffff 0101014c 00000000     ......LLL.......
	...
  408358:	1e1e0000 e4e4e41e 002e2e2e 00000000     ................
	...
  408374:	04040400 ff737373 ffffffff ffffffff     ....sss.........
  408384:	ffffffff ffffffff ffffffff ffffffff     ................
  408394:	ffffffff ffffffff ffffffff ffffffff     ................
  4083a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4083b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4083c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4083d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4083e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4083f4:	ffffffff ffffffff ffffffff ffffffff     ................
  408404:	ffffffff ffffffff ffffffff ffffffff     ................
  408414:	ffffffff ffffffff ffffffff ffffffff     ................
  408424:	ffffffff ffffffff ffffffff ffffffff     ................
  408434:	ffffffff ffffffff ffffffff ffffffff     ................
  408444:	ffffffff ffffffff 707070ff 00040404     .........ppp....
	...
  408464:	2e2e2e00 00050505 00000000 00000000     ................
  408474:	00000000 0b0b0000 9999990b ffffffff     ................
  408484:	ffffffff ffffffff ffffffff ffffffff     ................
  408494:	ffffffff ffffffff ffffffff ffffffff     ................
  4084a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4084b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4084c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4084d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4084e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4084f4:	ffffffff ffffffff ffffffff ffffffff     ................
  408504:	ffffffff ffffffff ffffffff ffffffff     ................
  408514:	ffffffff ffffffff ffffffff ffffffff     ................
  408524:	ffffffff ffffffff ffffffff ffffffff     ................
  408534:	ffffffff ffffffff ffffffff ffffffff     ................
  408544:	ffffffff ffffffff ffffffff ffffffff     ................
  408554:	ffffffff 0b989898 00000b0b 00000000     ................
	...
  40856c:	06060600 000b0b0b 00000000 00000000     ................
  40857c:	00000000 6d6d0000 ffffff6d ffffffff     ......mmm.......
  40858c:	ffffffff ffffffff ffffffff ffffffff     ................
  40859c:	ffffffff ffffffff ffffffff ffffffff     ................
  4085ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4085bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4085cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4085dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4085ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4085fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40860c:	ffffffff ffffffff ffffffff ffffffff     ................
  40861c:	ffffffff ffffffff ffffffff ffffffff     ................
  40862c:	ffffffff ffffffff ffffffff ffffffff     ................
  40863c:	ffffffff ffffffff ffffffff ffffffff     ................
  40864c:	ffffffff ffffffff ffffffff ffffffff     ................
  40865c:	ffffffff 6cffffff 00006c6c 00000000     .......lll......
	...
  408674:	0b0b0b00 00464646 00000000 00000000     ....FFF.........
  408684:	00000000 13130000 f9f9f913 ffffffff     ................
  408694:	ffffffff ffffffff ffffffff ffffffff     ................
  4086a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4086b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4086c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4086d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4086e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4086f4:	ffffffff ffffffff ffffffff ffffffff     ................
  408704:	ffffffff ffffffff ffffffff ffffffff     ................
  408714:	ffffffff ffffffff ffffffff ffffffff     ................
  408724:	ffffffff ffffffff ffffffff ffffffff     ................
  408734:	ffffffff ffffffff ffffffff ffffffff     ................
  408744:	ffffffff ffffffff ffffffff ffffffff     ................
  408754:	ffffffff ffffffff ffffffff ffffffff     ................
  408764:	ffffffff 13f9f9f9 00001313 00000000     ................
	...
  40877c:	46464600 0fededed 00000f0f 00000000     .FFF............
	...
  408794:	52525200 ffffffff ffffffff ffffffff     .RRR............
  4087a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4087b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4087c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4087d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4087e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4087f4:	ffffffff ffffffff ffffffff ffffffff     ................
  408804:	ffffffff ffffffff ffffffff ffffffff     ................
  408814:	ffffffff ffffffff ffffffff ffffffff     ................
  408824:	ffffffff ffffffff ffffffff ffffffff     ................
  408834:	ffffffff ffffffff ffffffff ffffffff     ................
  408844:	ffffffff ffffffff ffffffff ffffffff     ................
  408854:	ffffffff ffffffff ffffffff ffffffff     ................
  408864:	ffffffff ffffffff ffffffff 00515151     ............QQQ.
	...
  408880:	0d0d0000 eaeaea0d 76ffffff 00007676     ...........vvv..
	...
  40889c:	06060600 ffcbcbcb ffffffff ffffffff     ................
  4088ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4088bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4088cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4088dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4088ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4088fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40890c:	ffffffff ffffffff ffffffff ffffffff     ................
  40891c:	ffffffff ffffffff ffffffff ffffffff     ................
  40892c:	ffffffff ffffffff ffffffff ffffffff     ................
  40893c:	ffffffff ffffffff ffffffff ffffffff     ................
  40894c:	ffffffff ffffffff ffffffff ffffffff     ................
  40895c:	ffffffff ffffffff ffffffff ffffffff     ................
  40896c:	ffffffff ffffffff d0d0d0ff 00060606     ................
	...
  408988:	71710000 ffffff71 ffffffff 2020ffff     ..qqq.........  
  408998:	00000020 00000000 00000000 00000000      ...............
  4089a8:	ff303030 ffffffff ffffffff ffffffff     000.............
  4089b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4089c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4089d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4089e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4089f8:	ffffffff ffffffff ffffffff ffffffff     ................
  408a08:	ffffffff ffffffff ffffffff ffffffff     ................
  408a18:	ffffffff ffffffff ffffffff ffffffff     ................
  408a28:	ffffffff ffffffff ffffffff ffffffff     ................
  408a38:	ffffffff ffffffff ffffffff ffffffff     ................
  408a48:	ffffffff ffffffff ffffffff ffffffff     ................
  408a58:	ffffffff ffffffff ffffffff ffffffff     ................
  408a68:	ffffffff ffffffff ffffffff ffffffff     ................
  408a78:	ffffffff 2e2e2eff 00000000 00000000     ................
  408a88:	00000000 21000000 ffff2121 ffffffff     .......!!!......
  408a98:	ffffffff b3b3ffff 030303b3 00000000     ................
	...
  408ab0:	93010101 ffff9393 ffffffff ffffffff     ................
  408ac0:	ffffffff ffffffff ffffffff ffffffff     ................
  408ad0:	ffffffff ffffffff ffffffff ffffffff     ................
  408ae0:	ffffffff ffffffff ffffffff ffffffff     ................
  408af0:	ffffffff ffffffff ffffffff ffffffff     ................
  408b00:	ffffffff ffffffff ffffffff ffffffff     ................
  408b10:	ffffffff ffffffff ffffffff ffffffff     ................
  408b20:	ffffffff ffffffff ffffffff ffffffff     ................
  408b30:	ffffffff ffffffff ffffffff ffffffff     ................
  408b40:	ffffffff ffffffff ffffffff ffffffff     ................
  408b50:	ffffffff ffffffff ffffffff ffffffff     ................
  408b60:	ffffffff ffffffff ffffffff ffffffff     ................
  408b70:	ffffffff ffffffff ffffffff ffffffff     ................
  408b80:	9191ffff 01010191 00000000 00000000     ................
  408b90:	00000000 ad030303 ffffadad ffffffff     ................
  408ba0:	ffffffff ffffffff 3d3d3dff 00000000     .........===....
	...
  408bb8:	17000000 fcfc1717 fffffffc ffffffff     ................
  408bc8:	ffffffff ffffffff ffffffff ffffffff     ................
  408bd8:	ffffffff ffffffff ffffffff ffffffff     ................
  408be8:	ffffffff ffffffff ffffffff 32dfdfdf     ...............2
  408bf8:	4e4e3232 ffffff4e ffffffff ffffffff     22NNN...........
  408c08:	ffffffff ffffffff ffffffff ffffffff     ................
  408c18:	ffffffff f6f6ffff 3d3d3df6 f63d3d3d     .........======.
  408c28:	fffff6f6 ffffffff ffffffff ffffffff     ................
  408c38:	ffffffff ffffffff ffffffff ffffffff     ................
  408c48:	4fffffff 32324f4f dfdfdf32 ffffffff     ...OOO222.......
  408c58:	ffffffff ffffffff ffffffff ffffffff     ................
  408c68:	ffffffff ffffffff ffffffff ffffffff     ................
  408c78:	ffffffff ffffffff ffffffff fcffffff     ................
  408c88:	1717fcfc 00000017 00000000 00000000     ................
  408c98:	00000000 ff3d3d3d ffffffff ffffffff     ....===.........
  408ca8:	ffffffff ffffffff e7e7e7ff 000c0c0c     ................
	...
  408cc4:	5b5b0000 ffffff5b ffffffff ffffffff     ..[[[...........
  408cd4:	ffffffff ffffffff ffffffff ffffffff     ................
  408ce4:	ffffffff ffffffff ffffffff ffffffff     ................
  408cf4:	ffffffff e2e2e2ff 00181818 00000000     ................
  408d04:	36363600 ffffffff ffffffff ffffffff     .666............
  408d14:	ffffffff ffffffff ffffffff f6ffffff     ................
  408d24:	2727f6f6 00000027 23000000 f3f32323     ..'''......###..
  408d34:	fffffff3 ffffffff ffffffff ffffffff     ................
  408d44:	ffffffff ffffffff ffffffff 003d3d3d     ............===.
  408d54:	00000000 17171700 ffdcdcdc ffffffff     ................
  408d64:	ffffffff ffffffff ffffffff ffffffff     ................
  408d74:	ffffffff ffffffff ffffffff ffffffff     ................
  408d84:	ffffffff ffffffff 5affffff 00005a5a     ...........ZZZ..
	...
  408da0:	0a0a0a00 ffe2e2e2 ffffffff ffffffff     ................
  408db0:	ffffffff ffffffff ffffffff 00696969     ............iii.
	...
  408dcc:	07070000 d5d5d507 ffffffff ffffffff     ................
  408ddc:	ffffffff ffffffff ffffffff ffffffff     ................
  408dec:	ffffffff ffffffff ffffffff ffffffff     ................
  408dfc:	e2e2ffff 181818e2 00000000 00000000     ................
  408e0c:	00000000 ff373737 ffffffff ffffffff     ....777.........
  408e1c:	ffffffff ffffffff ffffffff 27f6f6f6     ...............'
  408e2c:	00002727 00000000 00000000 23230000     ''............##
  408e3c:	f3f3f323 ffffffff ffffffff ffffffff     #...............
  408e4c:	ffffffff ffffffff 3d3d3dff 00000000     .........===....
	...
  408e64:	dc171717 ffffdcdc ffffffff ffffffff     ................
  408e74:	ffffffff ffffffff ffffffff ffffffff     ................
  408e84:	ffffffff ffffffff ffffffff ffffffff     ................
  408e94:	09dadada 00000909 00000000 00000000     ................
  408ea4:	00000000 6b6b6b00 ffffffff ffffffff     .....kkk........
  408eb4:	ffffffff ffffffff ffffffff ffffffff     ................
  408ec4:	1dffffff 00001d1d 00000000 00000000     ................
  408ed4:	00000000 34343400 ffffffff ffffffff     .....444........
  408ee4:	ffffffff ffffffff ffffffff ffffffff     ................
  408ef4:	ffffffff ffffffff ffffffff e2ffffff     ................
  408f04:	1818e2e2 00000018 00000000 00000000     ................
  408f14:	00000000 37000000 ffff3737 ffffffff     .......777......
  408f24:	ffffffff ffffffff f6f6f6ff 00272727     ............'''.
	...
  408f44:	23232300 fff3f3f3 ffffffff ffffffff     .###............
  408f54:	ffffffff 3d3dffff 0000003d 00000000     ......===.......
	...
  408f6c:	17000000 dcdc1717 ffffffdc ffffffff     ................
  408f7c:	ffffffff ffffffff ffffffff ffffffff     ................
  408f8c:	ffffffff ffffffff ffffffff ffffffff     ................
  408f9c:	00343434 00000000 00000000 00000000     444.............
  408fac:	1b1b0000 ffffff1b ffffffff ffffffff     ................
  408fbc:	ffffffff ffffffff ffffffff ffffffff     ................
  408fcc:	a8ffffff 0202a8a8 00000002 00000000     ................
  408fdc:	00000000 01010100 ff999999 ffffffff     ................
  408fec:	ffffffff ffffffff ffffffff ffffffff     ................
  408ffc:	ffffffff ffffffff ffffffff 1ae2e2e2     ................
  40900c:	00001a1a 00000000 00000000 00000000     ................
	...
  409024:	3d3d0000 ffffff3d ffffffff f6f6ffff     ..===...........
  409034:	272727f6 00000000 00000000 00000000     .'''............
	...
  409050:	f3232323 fffff3f3 ffffffff 3dffffff     ###............=
  409060:	00003d3d 00000000 00000000 00000000     ==..............
	...
  409078:	17170000 dcdcdc17 ffffffff ffffffff     ................
  409088:	ffffffff ffffffff ffffffff ffffffff     ................
  409098:	ffffffff ffffffff 9e9e9eff 00020202     ................
	...
  4090b0:	02000000 a2a20202 ffffffa2 ffffffff     ................
  4090c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4090d0:	ffffffff ffffffff 3838ffff 00000038     ..........888...
	...
  4090ec:	ff1a1a1a ffffffff ffffffff ffffffff     ................
  4090fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40910c:	f6f6f6ff 00181818 00000000 00000000     ................
	...
  409130:	45454500 ffffffff 2b2bffff 0000002b     .EEE......+++...
	...
  409158:	2b000000 ffff2b2b ffffffff 00444444     ...+++......DDD.
	...
  409184:	1a1a1a00 fff6f6f6 ffffffff ffffffff     ................
  409194:	ffffffff ffffffff ffffffff ffffffff     ................
  4091a4:	ffffffff 1a1a1aff 00000000 00000000     ................
  4091b4:	00000000 38000000 ffff3838 ffffffff     .......888......
  4091c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4091d4:	ffffffff ffffffff ffffffff dcdcffff     ................
  4091e4:	0a0a0adc 00000000 00000000 00000000     ................
  4091f4:	65000000 ffff6565 ffffffff ffffffff     ...eee..........
  409204:	ffffffff ffffffff ffffffff ffffffff     ................
  409214:	999999ff 00000000 00000000 00000000     ................
	...
  409238:	0b0b0b00 e4ffffff 0101e4e4 00000001     ................
	...
  409260:	01000000 eaea0101 ffffffea 000b0b0b     ................
	...
  409290:	ff9e9e9e ffffffff ffffffff ffffffff     ................
  4092a0:	ffffffff ffffffff ffffffff 6464ffff     ..............dd
  4092b0:	00000064 00000000 00000000 00000000     d...............
  4092c0:	dc0a0a0a ffffdcdc ffffffff ffffffff     ................
  4092d0:	ffffffff ffffffff ffffffff ffffffff     ................
  4092e0:	ffffffff ffffffff ffffffff 5f5f5fff     .............___
	...
  4092fc:	0a000000 e2e20a0a ffffffe2 ffffffff     ................
  40930c:	ffffffff ffffffff ffffffff ffffffff     ................
  40931c:	ffffffff 2c4d4d4d 2c2c2c2c 0d0d0d2c     ....MMM,,,,,,...
	...
  409338:	27000000 2e2e2727 7b7b7b2e ffffffff     ...'''...{{{....
  409348:	6262ffff 2c2c2c62 0a2c2c2c 00000a0a     ..bbb,,,,,,.....
	...
  409364:	2b2b2b00 642c2c2c ffff6464 ffffffff     .+++,,,ddd......
  409374:	2e7a7a7a 2c2c2e2e 0707072c 00000000     zzz...,,,.......
	...
  40938c:	2c030303 2c2c2c2c 4f4f4f2c ffffffff     ...,,,,,,OOO....
  40939c:	ffffffff ffffffff ffffffff ffffffff     ................
  4093ac:	ffffffff e2ffffff 0a0ae2e2 0000000a     ................
	...
  4093c8:	ff5f5f5f ffffffff ffffffff ffffffff     ___.............
  4093d8:	ffffffff ffffffff ffffffff ffffffff     ................
  4093e8:	ffffffff ffffffff ffffffff ffffffff     ................
  4093f8:	00181818 00000000 00000000 00000000     ................
  409408:	3b3b0000 ffffff3b ffffffff ffffffff     ..;;;...........
  409418:	ffffffff ffffffff ffffffff ffffffff     ................
  409428:	ffffffff ffffffff 525252ff 00000000     .........RRR....
	...
  409440:	69000000 ffff6969 ffffffff ffffffff     ...iii..........
  409450:	ffffffff ffffffff 41ffffff 00004141     ...........AAA..
	...
  40946c:	85858500 ffffffff ffffffff ffffffff     ................
  40947c:	ffffffff ffffffff 323232ff 00000000     .........222....
	...
  409494:	a5000000 ffffa5a5 ffffffff ffffffff     ................
  4094a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4094b4:	ffffffff 3affffff 00003a3a 00000000     .......:::......
	...
  4094cc:	17171700 fffcfcfc ffffffff ffffffff     ................
  4094dc:	ffffffff ffffffff ffffffff ffffffff     ................
  4094ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4094fc:	ffffffff 01999999 00000101 00000000     ................
  40950c:	00000000 03030000 a9a9a903 ffffffff     ................
  40951c:	ffffffff ffffffff ffffffff ffffffff     ................
  40952c:	ffffffff ffffffff ffffffff c9c9c9ff     ................
  40953c:	00010101 00000000 00000000 2c000000     ...............,
  40954c:	ffff2c2c ffffffff ffffffff ffffffff     ,,..............
  40955c:	ffffffff a8ffffff 0000a8a8 00000000     ................
	...
  409574:	3a3a3a00 ffffffff ffffffff ffffffff     .:::............
  409584:	ffffffff ffffffff 848484ff 00000000     ................
	...
  40959c:	4a000000 ffff4a4a ffffffff ffffffff     ...JJJ..........
  4095ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4095bc:	ffffffff 03a9a9a9 00000303 00000000     ................
  4095cc:	00000000 01010000 99999901 dfffffff     ................
  4095dc:	b1b1dfdf ffffffb1 ffffffff ffffffff     ................
  4095ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4095fc:	ffffffff ffffffff ffffffff 32ffffff     ...............2
  40960c:	00003232 00000000 00000000 00000000     22..............
  40961c:	1e1e1e00 ffffffff ffffffff ffffffff     ................
  40962c:	ffffffff ffffffff ffffffff ffffffff     ................
  40963c:	ffffffff ffffffff 001b1b1b 00000000     ................
  40964c:	00000000 11000000 ffff1111 ffffffff     ................
  40965c:	ffffffff ffffffff ffffffff ffffffff     ................
  40966c:	1111ffff 00000011 00000000 00000000     ................
  40967c:	1a1a1a00 ffffffff ffffffff ffffffff     ................
  40968c:	ffffffff ffffffff fcfcfcff 000a0a0a     ................
	...
  4096a4:	25000000 ffff2525 ffffffff ffffffff     ...%%%..........
  4096b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4096c4:	ffffffff 001e1e1e 00000000 00000000     ................
  4096d4:	00000000 32320000 ffffff32 092c2c2c     ......222...,,,.
  4096e4:	09090909 0d0d0d09 ff989898 ffffffff     ................
  4096f4:	ffffffff ffffffff ffffffff ffffffff     ................
  409704:	ffffffff ffffffff ffffffff d2ffffff     ................
  409714:	0707d2d2 00000007 00000000 00000000     ................
  409724:	00000000 ff6f6f6f ffffffff ffffffff     ....ooo.........
  409734:	ffffffff ffffffff ffffffff ffffffff     ................
  409744:	ffffffff ffffffff 00424242 00000000     ........BBB.....
  409754:	00000000 01000000 eaea0101 ffffffea     ................
  409764:	ffffffff ffffffff ffffffff ffffffff     ................
  409774:	3434ffff 00000034 00000000 00000000     ..444...........
  409784:	06060600 ffffffff ffffffff ffffffff     ................
  409794:	ffffffff ffffffff ffffffff 00272727     ............'''.
	...
  4097ac:	0f000000 ffff0f0f ffffffff ffffffff     ................
  4097bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4097cc:	6d6d6dff 00000000 00000000 00000000     .mmm............
  4097dc:	07000000 d2d20707 5a5a5ad2 00040404     .........ZZZ....
	...
  4097f4:	ff0f0f0f ffffffff ffffffff ffffffff     ................
  409804:	ffffffff ffffffff ffffffff ffffffff     ................
  409814:	ffffffff ffffffff 5757ffff 00000057     ..........WWW...
	...
  409830:	ea0c0c0c ffffeaea ffffffff ffffffff     ................
  409840:	ffffffff ffffffff ffffffff ffffffff     ................
  409850:	ffffffff 006c6c6c 00000000 00000000     ....lll.........
  409860:	00000000 b9b90000 ffffffb9 ffffffff     ................
  409870:	ffffffff ffffffff ffffffff 5757ffff     ..............WW
  409880:	00000057 00000000 00000000 00000000     W...............
  409890:	fff0f0f0 ffffffff ffffffff ffffffff     ................
  4098a0:	ffffffff ffffffff 00444444 00000000     ........DDD.....
  4098b0:	00000000 05000000 ffff0505 ffffffff     ................
  4098c0:	ffffffff ffffffff ffffffff ffffffff     ................
  4098d0:	eaeaffff 0c0c0cea 00000000 00000000     ................
  4098e0:	00000000 57000000 ffff5757 1d1d1dff     .......WWW......
	...
  4098fc:	04000000 05050404 05050505 ffffffff     ................
  40990c:	ffffffff ffffffff ffffffff ffffffff     ................
  40991c:	ffffffff ffffffff fcfcffff 151515fc     ................
	...
  409938:	41000000 ffff4141 ffffffff ffffffff     ...AAA..........
  409948:	ffffffff ffffffff ffffffff ffffffff     ................
  409958:	ffffffff 00848484 00000000 00000000     ................
  409968:	00000000 9d9d0000 ffffff9d ffffffff     ................
  409978:	ffffffff ffffffff ffffffff 6969ffff     ..............ii
  409988:	00000069 00000000 00000000 00000000     i...............
  409998:	ffc6c6c6 ffffffff ffffffff ffffffff     ................
  4099a8:	ffffffff ffffffff 00545454 00000000     ........TTT.....
	...
  4099c0:	fcfc0000 fffffffc ffffffff ffffffff     ................
  4099d0:	ffffffff ffffffff 4040ffff 00000040     ..........@@@...
	...
  4099ec:	fc151515 fffffcfc 303030ff 00000000     .........000....
	...
  409a04:	4d050505 52524d4d 52525252 ffffffff     ...MMMRRRRRR....
  409a14:	ffffffff ffffffff ffffffff ffffffff     ................
  409a24:	ffffffff ffffffff ffffffff 8f8f8fff     ................
  409a34:	00010101 00000000 00000000 03000000     ................
  409a44:	b1b10303 ffffffb1 ffffffff ffffffff     ................
  409a54:	ffffffff ffffffff ffffffff ffffffff     ................
  409a64:	00747474 00000000 00000000 00000000     ttt.............
  409a74:	b3b30000 ffffffb3 ffffffff ffffffff     ................
  409a84:	ffffffff ffffffff 5c5cffff 0000005c     ..........\\\...
	...
  409aa0:	ffe4e4e4 ffffffff ffffffff ffffffff     ................
  409ab0:	ffffffff ffffffff 00494949 00000000     ........III.....
  409ac0:	00000000 03000000 ffff0303 ffffffff     ................
  409ad0:	ffffffff ffffffff ffffffff b7ffffff     ................
  409ae0:	0303b7b7 00000003 00000000 00000000     ................
  409af0:	01010100 ff898989 ffffffff c2c2c2ff     ................
  409b00:	000b0b0b 00000000 05050500 ff303030     ............000.
  409b10:	ffffffff ffffffff ffffffff ffffffff     ................
  409b20:	ffffffff ffffffff ffffffff ffffffff     ................
  409b30:	ffffffff ffffffff ffffffff 002c2c2c     ............,,,.
	...
  409b4c:	23230000 ffffff23 ffffffff ffffffff     ..###...........
  409b5c:	ffffffff ffffffff ffffffff ffffffff     ................
  409b6c:	004f4f4f 00000000 00000000 00000000     OOO.............
  409b7c:	dcdc0000 ffffffdc ffffffff ffffffff     ................
  409b8c:	ffffffff ffffffff 3d3dffff 0000003d     ..........===...
	...
  409ba4:	03030300 ffffffff ffffffff ffffffff     ................
  409bb4:	ffffffff ffffffff ffffffff 00303030     ............000.
	...
  409bcc:	0a000000 ffff0a0a ffffffff ffffffff     ................
  409bdc:	ffffffff ffffffff 23ffffff 00002323     ...........###..
	...
  409bf8:	2c2c2c00 ffffffff ffffffff ffffffff     .,,,............
  409c08:	30c2c2c2 1e1e3030 6161611e ffffffff     ...000...aaa....
  409c18:	ffffffff ffffffff ffffffff ffffffff     ................
  409c28:	ffffffff ffffffff ffffffff ffffffff     ................
  409c38:	ffffffff ffffffff ffffffff 06c9c9c9     ................
  409c48:	00000606 00000000 00000000 00000000     ................
  409c58:	78787800 ffffffff ffffffff ffffffff     .xxx............
  409c68:	ffffffff ffffffff ffffffff 00272727     ............'''.
	...
  409c80:	0b000000 ffff0b0b ffffffff ffffffff     ................
  409c90:	ffffffff ffffffff ffffffff 1c1cffff     ................
  409ca0:	0000001c 00000000 00000000 14141400     ................
  409cb0:	ffffffff ffffffff ffffffff ffffffff     ................
  409cc0:	ffffffff ffffffff 00131313 00000000     ................
  409cd0:	00000000 1d000000 ffff1d1d ffffffff     ................
  409ce0:	ffffffff ffffffff ffffffff 00777777     ............www.
	...
  409cfc:	06060000 c9c9c906 ffffffff ffffffff     ................
  409d0c:	ffffffff ffffffff ffffffff ffffffff     ................
  409d1c:	ffffffff ffffffff ffffffff ffffffff     ................
  409d2c:	ffffffff ffffffff ffffffff ffffffff     ................
  409d3c:	ffffffff ffffffff ffffffff ffffffff     ................
  409d4c:	4effffff 00004e4e 00000000 00000000     ...NNN..........
  409d5c:	00000000 0f0f0f00 fff0f0f0 ffffffff     ................
  409d6c:	ffffffff ffffffff ffffffff edededff     ................
  409d7c:	00050505 00000000 00000000 21000000     ...............!
  409d8c:	ffff2121 ffffffff ffffffff ffffffff     !!..............
  409d9c:	ffffffff d0ffffff 0202d0d0 00000002     ................
	...
  409db4:	2e2e2e00 ffffffff ffffffff ffffffff     ................
  409dc4:	ffffffff ffffffff afafafff 00000000     ................
	...
  409ddc:	3c000000 ffff3c3c ffffffff ffffffff     ...<<<..........
  409dec:	ffffffff f0f0f0ff 000f0f0f 00000000     ................
	...
  409e04:	4e4e0000 ffffff4e ffffffff ffffffff     ..NNN...........
  409e14:	ffffffff ffffffff ffffffff ffffffff     ................
  409e24:	ffffffff ffffffff ffffffff ffffffff     ................
  409e34:	ffffffff ffffffff ffffffff ffffffff     ................
  409e44:	ffffffff ffffffff ffffffff ffffffff     ................
  409e54:	f6ffffff 1111f6f6 00000011 00000000     ................
	...
  409e6c:	ff494949 ffffffff ffffffff ffffffff     III.............
  409e7c:	ffffffff 6b6b6bff 00000000 00000000     .....kkk........
  409e8c:	00000000 57000000 ffff5757 ffffffff     .......WWW......
  409e9c:	ffffffff ffffffff ffffffff 55ffffff     ...............U
  409eac:	00005555 00000000 00000000 00000000     UU..............
  409ebc:	6f6f6f00 ffffffff ffffffff ffffffff     .ooo............
  409ecc:	ffffffff ffffffff 444444ff 00000000     .........DDD....
	...
  409ee4:	8a000000 ffff8a8a ffffffff ffffffff     ................
  409ef4:	ffffffff 474747ff 00000000 00000000     .....GGG........
  409f04:	00000000 10000000 f3f31010 fffffff3     ................
  409f14:	ffffffff ffffffff ffffffff ffffffff     ................
  409f24:	ffffffff ffffffff ffffffff ffffffff     ................
  409f34:	ffffffff ffffffff ffffffff ffffffff     ................
  409f44:	ffffffff ffffffff ffffffff ffffffff     ................
  409f54:	ffffffff ffffffff ffffffff 8181ffff     ................
  409f64:	00000081 00000000 00000000 00000000     ................
  409f74:	bf050505 ffffbfbf ffffffff ffffffff     ................
  409f84:	ffffffff 272727ff 00000000 00000000     .....'''........
  409f94:	00000000 d0020202 ffffd0d0 ffffffff     ................
  409fa4:	ffffffff ffffffff ffffffff 1dffffff     ................
  409fb4:	00001d1d 00000000 00000000 05050000     ................
  409fc4:	ededed05 ffffffff ffffffff ffffffff     ................
  409fd4:	ffffffff ffffffff 131313ff 00000000     ................
	...
  409fec:	fc0b0b0b fffffcfc ffffffff ffffffff     ................
  409ffc:	bfbfffff 040404bf 00000000 00000000     ................
  40a00c:	00000000 81000000 ffff8181 ffffffff     ................
  40a01c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a02c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a03c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a04c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a05c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a06c:	272727ff 00000000 00000000 00000000     .'''............
  40a07c:	28000000 ffff2828 ffffffff ffffffff     ...(((..........
  40a08c:	eaeaffff 050505ea 00000000 00000000     ................
  40a09c:	00000000 ff1d1d1d ffffffff ffffffff     ................
  40a0ac:	ffffffff ffffffff ffffffff 02d0d0d0     ................
  40a0bc:	00000202 00000000 00000000 28280000     ..............((
  40a0cc:	ffffff28 ffffffff ffffffff ffffffff     (...............
  40a0dc:	ffffffff adadffff 000000ad 00000000     ................
	...
  40a0f4:	ff363636 ffffffff ffffffff ffffffff     666.............
  40a104:	2727ffff 00000027 00000000 00000000     ..'''...........
  40a114:	00000000 ff272727 ffffffff ffffffff     ....'''.........
  40a124:	ffffffff ffffffff ffffffff ffffffff     ................
  40a134:	ffffffff ffffffff ffffffff ffffffff     ................
  40a144:	ffffffff ffffffff ffffffff ffffffff     ................
  40a154:	ffffffff ffffffff ffffffff ffffffff     ................
  40a164:	ffffffff ffffffff ffffffff ffffffff     ................
  40a174:	bdbdbdff 00040404 00000000 00000000     ................
  40a184:	00000000 84840000 ffffff84 ffffffff     ................
  40a194:	6c6cffff 0000006c 00000000 00000000     ..lll...........
  40a1a4:	00000000 ff575757 ffffffff ffffffff     ....WWW.........
  40a1b4:	ffffffff ffffffff ffffffff 00575757     ............WWW.
	...
  40a1d0:	6c6c0000 ffffff6c ffffffff ffffffff     ..lll...........
  40a1e0:	ffffffff ffffffff 4444ffff 00000044     ..........DDD...
	...
  40a1fc:	ff898989 ffffffff ffffffff 84ffffff     ................
  40a20c:	00008484 00000000 00000000 00000000     ................
  40a21c:	04040400 ffbdbdbd ffffffff ffffffff     ................
  40a22c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a23c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a24c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a25c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a26c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a27c:	ffffffff 00464646 00000000 00000000     ....FFF.........
  40a28c:	00000000 11110000 f6f6f611 ffffffff     ................
  40a29c:	2727ffff 00000027 00000000 00000000     ..'''...........
  40a2ac:	02020200 ffcdcdcd ffffffff ffffffff     ................
  40a2bc:	ffffffff ffffffff ffffffff 001c1c1c     ................
	...
  40a2d4:	05000000 eded0505 ffffffed ffffffff     ................
  40a2e4:	ffffffff ffffffff ffffffff 1313ffff     ................
  40a2f4:	00000013 00000000 00000000 0b0b0b00     ................
  40a304:	fffcfcfc ffffffff ffffffff 14f9f9f9     ................
  40a314:	00001414 00000000 00000000 00000000     ................
  40a324:	47474700 ffffffff ffffffff ffffffff     .GGG............
  40a334:	ffffffff ffffffff ffffffff ffffffff     ................
  40a344:	ffffffff ffffffff ffffffff ffffffff     ................
  40a354:	ffffffff ffffffff ffffffff ffffffff     ................
  40a364:	ffffffff ffffffff ffffffff ffffffff     ................
  40a374:	ffffffff ffffffff ffffffff ffffffff     ................
  40a384:	ffffffff 0ff0f0f0 00000f0f 00000000     ................
	...
  40a39c:	4f4f4f00 ffffffff 0606ffff 00000006     .OOO............
	...
  40a3b4:	1e1e1e00 ffffffff ffffffff ffffffff     ................
  40a3c4:	ffffffff ffffffff e4e4e4ff 00020202     ................
	...
  40a3dc:	28000000 ffff2828 ffffffff ffffffff     ...(((..........
  40a3ec:	ffffffff ffffffff bdffffff 0000bdbd     ................
	...
  40a408:	36363600 ffffffff ffffffff ffffffff     .666............
  40a418:	004f4f4f 00000000 00000000 00000000     OOO.............
  40a428:	0f0f0000 f0f0f00f ffffffff ffffffff     ................
  40a438:	ffffffff ffffffff ffffffff ffffffff     ................
  40a448:	ffffffff ffffffff ffffffff ffffffff     ................
  40a458:	ffffffff ffffffff ffffffff ffffffff     ................
  40a468:	ffffffff ffffffff ffffffff ffffffff     ................
  40a478:	ffffffff ffffffff ffffffff ffffffff     ................
  40a488:	ffffffff ffffffff 76ffffff 00007676     ...........vvv..
	...
  40a4a4:	06060600 b5cbcbcb 0000b5b5 00000000     ................
	...
  40a4bc:	57575700 ffffffff ffffffff ffffffff     .WWW............
  40a4cc:	ffffffff ffffffff 8f8f8fff 00000000     ................
	...
  40a4e4:	6d000000 ffff6d6d ffffffff ffffffff     ...mmm..........
  40a4f4:	ffffffff ffffffff 73ffffff 00007373     ...........sss..
	...
  40a510:	89898900 ffffffff ffffffff cbcbcbff     ................
  40a520:	00060606 00000000 00000000 00000000     ................
  40a530:	76760000 ffffff76 ffffffff ffffffff     ..vvv...........
  40a540:	ffffffff ffffffff ffffffff ffffffff     ................
  40a550:	ffffffff ffffffff ffffffff ffffffff     ................
  40a560:	ffffffff ffffffff ffffffff ffffffff     ................
  40a570:	ffffffff ffffffff ffffffff ffffffff     ................
  40a580:	ffffffff ffffffff ffffffff ffffffff     ................
  40a590:	ffffffff ffffffff ffffffff 2121ffff     ..............!!
  40a5a0:	00000021 00000000 00000000 00000000     !...............
  40a5b0:	6f2e2e2e 00006f6f 00000000 00000000     ...ooo..........
  40a5c0:	00000000 a8a8a800 ffffffff ffffffff     ................
  40a5d0:	ffffffff ffffffff ffffffff 585858ff     .............XXX
	...
  40a5ec:	d0000000 ffffd0d0 ffffffff ffffffff     ................
  40a5fc:	ffffffff ffffffff 46ffffff 00004646     ...........FFF..
	...
  40a614:	03030000 f3f3f303 ffffffff ffffffff     ................
  40a624:	2c2c2cff 00000000 00000000 00000000     .,,,............
  40a634:	22000000 ffff2222 ffffffff ffffffff     ..."""..........
  40a644:	ffffffff ffffffff ffffffff ffffffff     ................
  40a654:	ffffffff ffffffff ffffffff ffffffff     ................
  40a664:	ffffffff ffffffff ffffffff ffffffff     ................
  40a674:	ffffffff ffffffff ffffffff ffffffff     ................
  40a684:	ffffffff ffffffff ffffffff ffffffff     ................
  40a694:	ffffffff ffffffff ffffffff ffffffff     ................
  40a6a4:	b3b3ffff 030303b3 00000000 00000000     ................
  40a6b4:	00000000 0f010101 00000f0f 00000000     ................
	...
  40a6cc:	1a1a1a00 1a1a1a1a 1a1a1a1a 1a1a1a1a     ................
  40a6dc:	1a1a1a1a 1a1a1a1a 0c0c0c1a 00000000     ................
	...
  40a6f4:	1a010101 1a1a1a1a 1a1a1a1a 1a1a1a1a     ................
  40a704:	1a1a1a1a 1a1a1a1a 0a1a1a1a 00000a0a     ................
	...
  40a71c:	03030000 1a1a1a03 1a1a1a1a 1a1a1a1a     ................
  40a72c:	0101011a 00000000 00000000 00000000     ................
  40a73c:	b3030303 ffffb3b3 ffffffff ffffffff     ................
  40a74c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a75c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a76c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a77c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a78c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a79c:	ffffffff ffffffff ffffffff ffffffff     ................
  40a7ac:	ffffffff 3f3f3fff 00000000 00000000     .....???........
	...
  40a844:	ff3f3f3f ffffffff ffffffff ffffffff     ???.............
  40a854:	ffffffff ffffffff ffffffff ffffffff     ................
  40a864:	ffffffff ffffffff ffffffff ffffffff     ................
  40a874:	ffffffff ffffffff ffffffff ffffffff     ................
  40a884:	ffffffff ffffffff ffffffff ffffffff     ................
  40a894:	ffffffff ffffffff ffffffff ffffffff     ................
  40a8a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40a8b4:	ffffffff eaeaeaff 000d0d0d 00000000     ................
	...
  40a948:	0c0c0c00 ffe7e7e7 ffffffff ffffffff     ................
  40a958:	ffffffff ffffffff ffffffff ffffffff     ................
  40a968:	ffffffff ffffffff ffffffff ffffffff     ................
  40a978:	ffffffff ffffffff ffffffff ffffffff     ................
  40a988:	ffffffff ffffffff ffffffff ffffffff     ................
  40a998:	ffffffff ffffffff ffffffff ffffffff     ................
  40a9a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40a9b8:	ffffffff ffffffff ffffffff 006b6b6b     ............kkk.
	...
  40aa50:	6c6c6c00 ffffffff ffffffff ffffffff     .lll............
  40aa60:	ffffffff ffffffff ffffffff ffffffff     ................
  40aa70:	ffffffff ffffffff ffffffff ffffffff     ................
  40aa80:	ffffffff ffffffff ffffffff ffffffff     ................
  40aa90:	ffffffff ffffffff ffffffff ffffffff     ................
  40aaa0:	ffffffff ffffffff ffffffff ffffffff     ................
  40aab0:	ffffffff ffffffff ffffffff ffffffff     ................
  40aac0:	ffffffff ffffffff ffffffff 23ffffff     ...............#
  40aad0:	00002323 00000000 00000000 00000000     ##..............
	...
  40ab54:	23230000 ffffff23 ffffffff ffffffff     ..###...........
  40ab64:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab74:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab84:	ffffffff ffffffff ffffffff ffffffff     ................
  40ab94:	ffffffff ffffffff ffffffff ffffffff     ................
  40aba4:	ffffffff ffffffff ffffffff ffffffff     ................
  40abb4:	ffffffff ffffffff ffffffff ffffffff     ................
  40abc4:	ffffffff ffffffff ffffffff ffffffff     ................
  40abd4:	edffffff 4949eded 25252549 23232323     ......III%%%####
  40abe4:	04042323 00000004 00000000 00000000     ##..............
  40abf4:	05050500 23232323 23232323 23232323     ....############
  40ac04:	23232323 23232323 23232323 00020202     ############....
	...
  40ac1c:	09000000 23230909 23232323 23232323     ......##########
  40ac2c:	23232323 23232323 21232323 00002121     ###########!!!..
	...
  40ac48:	0b0b0b00 23232323 23232323 23232323     ....############
  40ac58:	49252525 f0f04949 fffffff0 ffffffff     %%%III..........
  40ac68:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac78:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac88:	ffffffff ffffffff ffffffff ffffffff     ................
  40ac98:	ffffffff ffffffff ffffffff ffffffff     ................
  40aca8:	ffffffff ffffffff ffffffff ffffffff     ................
  40acb8:	ffffffff ffffffff ffffffff ffffffff     ................
  40acc8:	ffffffff ffffffff ffffffff ffffffff     ................
  40acd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ace8:	ffffffff 2a2affff 0000002a 00000000     ......***.......
  40acf8:	00000000 02020200 ffcdcdcd ffffffff     ................
  40ad08:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad18:	001e1e1e 00000000 00000000 05000000     ................
  40ad28:	eaea0505 ffffffea ffffffff ffffffff     ................
  40ad38:	ffffffff ffffffff 1414ffff 00000014     ................
	...
  40ad50:	0b0b0b00 fffcfcfc ffffffff ffffffff     ................
  40ad60:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad70:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad80:	ffffffff ffffffff ffffffff ffffffff     ................
  40ad90:	ffffffff ffffffff ffffffff ffffffff     ................
  40ada0:	ffffffff ffffffff ffffffff ffffffff     ................
  40adb0:	ffffffff ffffffff ffffffff ffffffff     ................
  40adc0:	ffffffff ffffffff ffffffff ffffffff     ................
  40add0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ade0:	ffffffff ffffffff ffffffff ffffffff     ................
  40adf0:	ffffffff 7171ffff 00000071 00000000     ......qqq.......
	...
  40ae08:	ff525252 ffffffff ffffffff ffffffff     RRR.............
  40ae18:	ffffffff ffffffff 005a5a5a 00000000     ........ZZZ.....
	...
  40ae30:	68680000 ffffff68 ffffffff ffffffff     ..hhh...........
  40ae40:	ffffffff ffffffff 4747ffff 00000047     ..........GGG...
	...
  40ae5c:	ff848484 ffffffff ffffffff ffffffff     ................
  40ae6c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae7c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae8c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ae9c:	ffffffff ffffffff ffffffff ffffffff     ................
  40aeac:	ffffffff ffffffff ffffffff ffffffff     ................
  40aebc:	ffffffff ffffffff ffffffff ffffffff     ................
  40aecc:	ffffffff ffffffff ffffffff ffffffff     ................
  40aedc:	ffffffff ffffffff ffffffff ffffffff     ................
  40aeec:	ffffffff ffffffff ffffffff ffffffff     ................
  40aefc:	f0f0ffff 060606f0 00000000 00000000     ................
  40af0c:	00000000 ff1b1b1b ffffffff ffffffff     ................
  40af1c:	ffffffff ffffffff ffffffff 03d7d7d7     ................
  40af2c:	00000303 00000000 00000000 25250000     ..............%%
  40af3c:	ffffff25 ffffffff ffffffff ffffffff     %...............
  40af4c:	ffffffff b5b5ffff 000000b5 00000000     ................
	...
  40af64:	ff323232 ffffffff ffffffff ffffffff     222.............
  40af74:	ffffffff ffffffff ffffffff ffffffff     ................
  40af84:	ffffffff ffffffff ffffffff ffffffff     ................
  40af94:	ffffffff ffffffff ffffffff ffffffff     ................
  40afa4:	ffffffff ffffffff ffffffff ffffffff     ................
  40afb4:	ffffffff ffffffff ffffffff ffffffff     ................
  40afc4:	ffffffff ffffffff ffffffff ffffffff     ................
  40afd4:	ffffffff ffffffff ffffffff ffffffff     ................
  40afe4:	ffffffff ffffffff ffffffff ffffffff     ................
  40aff4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b004:	ffffffff 2a2a2aff 00000000 00000000     .....***........
  40b014:	00000000 c9010101 ffffc9c9 ffffffff     ................
  40b024:	ffffffff ffffffff ffffffff 1effffff     ................
  40b034:	00001e1e 00000000 00000000 04040000     ................
  40b044:	e7e7e704 ffffffff ffffffff ffffffff     ................
  40b054:	ffffffff ffffffff 151515ff 00000000     ................
	...
  40b06c:	f90a0a0a fffff9f9 ffffffff ffffffff     ................
  40b07c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b08c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b09c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b0ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40b0bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b0cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b0dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b0ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40b0fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b10c:	ffffffff 737373ff 00000000 00000000     .....sss........
  40b11c:	00000000 52000000 ffff5252 ffffffff     .......RRR......
  40b12c:	ffffffff ffffffff ffffffff 5bffffff     ...............[
  40b13c:	00005b5b 00000000 00000000 00000000     [[..............
  40b14c:	68686800 ffffffff ffffffff ffffffff     .hhh............
  40b15c:	ffffffff ffffffff 474747ff 00000000     .........GGG....
	...
  40b174:	82000000 ffff8282 ffffffff ffffffff     ................
  40b184:	ffffffff ffffffff ffffffff ffffffff     ................
  40b194:	ffffffff ffffffff ffffffff ffffffff     ................
  40b1a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b1b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b1c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b1d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b1e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b1f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b204:	ffffffff ffffffff ffffffff ffffffff     ................
  40b214:	ffffffff f0f0f0ff 00060606 00000000     ................
  40b224:	00000000 20000000 ffff2020 ffffffff     .......   ......
  40b234:	ffffffff ffffffff ffffffff d7ffffff     ................
  40b244:	0303d7d7 00000003 00000000 00000000     ................
  40b254:	2c2c2c00 ffffffff ffffffff ffffffff     .,,,............
  40b264:	ffffffff ffffffff b5b5b5ff 00000000     ................
	...
  40b27c:	3a000000 ffff3a3a ffffffff ffffffff     ...:::..........
  40b28c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b29c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b2ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40b2bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b2cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b2dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b2ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40b2fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b30c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b31c:	ffffffff ffffffff 00292929 00000000     ........))).....
  40b32c:	00000000 0a000000 ffff0a0a ffffffff     ................
  40b33c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b34c:	1e1effff 0000001e 00000000 00000000     ................
  40b35c:	13131300 ffffffff ffffffff ffffffff     ................
  40b36c:	ffffffff ffffffff ffffffff 00141414     ................
	...
  40b384:	1c000000 ffff1c1c ffffffff ffffffff     ................
  40b394:	ffffffff ffffffff ffffffff ffffffff     ................
  40b3a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b3b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b3c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b3d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b3e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b3f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40b404:	ffffffff ffffffff ffffffff ffffffff     ................
  40b414:	ffffffff ffffffff ffffffff ffffffff     ................
  40b424:	ffffffff ffffffff 00525252 00000000     ........RRR.....
	...
  40b43c:	d7d70000 ffffffd7 ffffffff ffffffff     ................
  40b44c:	ffffffff ffffffff 4040ffff 00000040     ..........@@@...
	...
  40b464:	03030300 ffffffff ffffffff ffffffff     ................
  40b474:	ffffffff ffffffff ffffffff 00323232     ............222.
	...
  40b48c:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40b49c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b4ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40b4bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b4cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b4dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b4ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40b4fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40b50c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b51c:	ffffffff ffffffff ffffffff ffffffff     ................
  40b52c:	ffffffff ffffffff 00777777 00000000     ........www.....
	...
  40b544:	adad0000 ffffffad ffffffff ffffffff     ................
  40b554:	ffffffff ffffffff 5e5effff 0000005e     ..........^^^...
	...
  40b570:	ffdfdfdf ffffffff ffffffff ffffffff     ................
  40b580:	ffffffff ffffffff 004a4a4a 00000000     ........JJJ.....
  40b590:	00000000 03000000 ffff0303 ffffffff     ................
  40b5a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b5b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b5c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b5d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b5e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b5f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b600:	ffffffff ffffffff ffffffff ffffffff     ................
  40b610:	ffffffff ffffffff ffffffff ffffffff     ................
  40b620:	ffffffff ffffffff ffffffff ffffffff     ................
  40b630:	ffffffff ffffffff ffffffff 00a0a0a0     ................
	...
  40b64c:	adad0000 ffffffad ffffffff ffffffff     ................
  40b65c:	ffffffff ffffffff 7e7effff 0000007e     ..........~~~...
	...
  40b678:	ffd7d7d7 ffffffff ffffffff ffffffff     ................
  40b688:	ffffffff ffffffff 00656565 00000000     ........eee.....
  40b698:	00000000 03000000 fcfc0303 fffffffc     ................
  40b6a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b6b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b6c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b6d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b6e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b6f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b708:	ffffffff ffffffff ffffffff ffffffff     ................
  40b718:	ffffffff ffffffff ffffffff ffffffff     ................
  40b728:	ffffffff ffffffff ffffffff ffffffff     ................
  40b738:	ffffffff ffffffff ffffffff 0df6f6f6     ................
  40b748:	00000d0d 00000000 0f000000 fcfc0f0f     ................
  40b758:	fffffffc ffffffff ffffffff ffffffff     ................
  40b768:	ffffffff dcdcffff 090909dc 00000000     ................
  40b778:	00000000 17171700 ffffffff ffffffff     ................
  40b788:	ffffffff ffffffff ffffffff ffffffff     ................
  40b798:	04c2c2c2 00000404 00000000 22000000     ..............."
  40b7a8:	ffff2222 ffffffff ffffffff ffffffff     ""..............
  40b7b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b7c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b7d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b7e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b7f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b808:	ffffffff ffffffff ffffffff ffffffff     ................
  40b818:	ffffffff ffffffff ffffffff ffffffff     ................
  40b828:	ffffffff ffffffff ffffffff ffffffff     ................
  40b838:	ffffffff ffffffff ffffffff ffffffff     ................
  40b848:	ffffffff 9effffff 18189e9e 04040418     ................
  40b858:	a51a1a1a ffffa5a5 ffffffff ffffffff     ................
  40b868:	ffffffff ffffffff ffffffff ffffffff     ................
  40b878:	8d8d8dff 04141414 1e1e0404 b7b7b71e     ................
  40b888:	ffffffff ffffffff ffffffff ffffffff     ................
  40b898:	ffffffff ffffffff 7bffffff 11117b7b     ...........{{{..
  40b8a8:	05050511 c9232323 ffffc9c9 ffffffff     ....###.........
  40b8b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b8c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b8d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b8e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40b8f8:	ffffffff ffffffff                       ........

0040b900 <image_data_soneca>:
  40b900:	ffffffff ffffffff ffffffff ffffffff     ................
  40b910:	ffffffff ffffffff ffffffff ffffffff     ................
  40b920:	ffffffff ffffffff ffffffff ffffffff     ................
  40b930:	ffffffff ffffffff ffffffff ffffffff     ................
  40b940:	ffffffff ffffffff ffffffff ffffffff     ................
  40b950:	ffffffff ffffffff ffffffff ffffffff     ................
  40b960:	ffffffff ffffffff ffffffff ffffffff     ................
  40b970:	ffffffff ffffffff ffffffff ffffffff     ................
  40b980:	ffffffff 1ebbbbbb 03031e1e 0f0f0f03     ................
  40b990:	ea4f4f4f ffffeaea ffffffff ffffffff     OOO.............
  40b9a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40b9f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba00:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba10:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba20:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba30:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba40:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba50:	17ffffff 00001717 00000000 00000000     ................
  40ba60:	0a0a0000 5454540a fff9f9f9 ffffffff     .....TTT........
  40ba70:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba80:	ffffffff ffffffff ffffffff ffffffff     ................
  40ba90:	ffffffff ffffffff ffffffff ffffffff     ................
  40baa0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bab0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bac0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bad0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bae0:	ffffffff ffffffff ffffffff ffffffff     ................
  40baf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb00:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb10:	ffffffff ffffffff ffffffff cdffffff     ................
  40bb20:	0000cdcd 00000000 00000000 00000000     ................
  40bb30:	00000000 14000000 8d8d1414 ffffff8d     ................
  40bb40:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb50:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb60:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb70:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb80:	ffffffff ffffffff ffffffff ffffffff     ................
  40bb90:	ffffffff ffffffff ffffffff ffffffff     ................
  40bba0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bbb0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bbc0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bbd0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bbe0:	ffffffff ffffffff ffffffff eaeaffff     ................
  40bbf0:	030303ea 00000000 00000000 00000000     ................
	...
  40bc08:	01010100 f03c3c3c fffff0f0 ffffffff     ....<<<.........
  40bc18:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc28:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc38:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc48:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc58:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc68:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc78:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc88:	ffffffff ffffffff ffffffff ffffffff     ................
  40bc98:	ffffffff ffffffff ffffffff ffffffff     ................
  40bca8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bcb8:	ffffffff ffffffff 00252525 00000000     ........%%%.....
	...
  40bcdc:	14140000 b9b9b914 ffffffff ffffffff     ................
  40bcec:	ffffffff ffffffff ffffffff ffffffff     ................
  40bcfc:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd1c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd2c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd3c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd4c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd5c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd6c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd7c:	ffffffff ffffffff ffffffff ffffffff     ................
  40bd8c:	78ffffff 00007878 00000000 00000000     ...xxx..........
	...
  40bdb0:	82090909 ffff8282 ffffffff ffffffff     ................
  40bdc0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bdd0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bde0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bdf0:	ffffffff ffffffff ffffffff ededffff     ................
  40be00:	3f3f3fed 1e141414 85851e1e ffffff85     .???............
  40be10:	ffffffff ffffffff ffffffff ffffffff     ................
  40be20:	ffffffff ffffffff ffffffff ffffffff     ................
  40be30:	ffffffff ffffffff ffffffff ffffffff     ................
  40be40:	ffffffff ffffffff ffffffff ffffffff     ................
  40be50:	ffffffff ffffffff ffffffff fcfcffff     ................
  40be60:	0c0c0cfc 00000000 00000000 00000000     ................
	...
  40be80:	03030000 6b6b6b03 ffffffff ffffffff     .....kkk........
  40be90:	ffffffff ffffffff ffffffff ffffffff     ................
  40bea0:	ffffffff ffffffff ffffffff ffffffff     ................
  40beb0:	ffffffff ffffffff ffffffff ffffffff     ................
  40bec0:	ffffffff ffffffff ffffffff 303030ff     .............000
	...
  40bed8:	01010100 f9414141 fffff9f9 ffffffff     ....AAA.........
  40bee8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bef8:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf08:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf18:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf28:	ffffffff ffffffff 00343434 00000000     ........444.....
	...
  40bf54:	5f010101 ffff5f5f ffffffff ffffffff     ...___..........
  40bf64:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf74:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf84:	ffffffff ffffffff ffffffff ffffffff     ................
  40bf94:	ffffffff ffffffff 00040404 00000000     ................
	...
  40bfac:	1b1b0000 c4c4c41b ffffffff ffffffff     ................
  40bfbc:	ffffffff ffffffff ffffffff ffffffff     ................
  40bfcc:	c9ffffff 7474c9c9 9e9e9e74 ffffffff     ......ttt.......
  40bfdc:	ffffffff ffffffff ffffffff ffffffff     ................
  40bfec:	ffffffff ffffffff ffffffff ffffffff     ................
  40bffc:	73ffffff 00007373 00000000 00000000     ...sss..........
	...
  40c024:	02020000 6b6b6b02 ffffffff ffffffff     .....kkk........
  40c034:	ffffffff ffffffff ffffffff ffffffff     ................
  40c044:	ffffffff ffffffff ffffffff ffffffff     ................
  40c054:	ffffffff ffffffff ffffffff ffffffff     ................
  40c064:	ffffffff 00f6f6f6 00000000 00000000     ................
	...
  40c080:	7b090909 ffff7b7b ffffffff ffffffff     ...{{{..........
  40c090:	ffffffff d0d0d0ff 1b555555 01011b1b     ........UUU.....
  40c0a0:	00000001 30000000 ffff3030 ffffffff     .......000......
  40c0b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c0c0:	ffffffff ffffffff ffffffff e2e2ffff     ................
  40c0d0:	030303e2 00000000 00000000 00000000     ................
  40c0e0:	1b1a1a1a 00001b1b 00000000 00000000     ................
	...
  40c0f8:	82030303 ffff8282 ffffffff ffffffff     ................
  40c108:	ffffffff ffffffff ffffffff ffffffff     ................
  40c118:	ffffffff ffffffff ffffffff ffffffff     ................
  40c128:	ffffffff ffffffff ffffffff ffffffff     ................
  40c138:	0000ffff 00000000 00000000 00000000     ................
	...
  40c150:	01010000 3f3f3f01 d5f9f9f9 5a5ad5d5     .....???......ZZ
  40c160:	1e1e1e5a 00020202 00000000 00000000     Z...............
	...
  40c178:	78787800 ffffffff ffffffff ffffffff     .xxx............
  40c188:	ffffffff ffffffff ffffffff ffffffff     ................
  40c198:	ffffffff ffffffff 00131313 00000000     ................
  40c1a8:	00000000 0f000000 f3f30f0f 2e2e2ef3     ................
	...
  40c1c8:	07070000 b5b5b507 ffffffff ffffffff     ................
  40c1d8:	ffffffff ffffffff ffffffff ffffffff     ................
  40c1e8:	ffffffff ffffffff ffffffff ffffffff     ................
  40c1f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40c208:	010101ff 00000000 00000000 00000000     ................
	...
  40c224:	0d000000 02020d0d 00000002 00000000     ................
	...
  40c248:	ff4a4a4a ffffffff ffffffff ffffffff     JJJ.............
  40c258:	ffffffff ffffffff ffffffff ffffffff     ................
  40c268:	ffffffff 27ffffff 00002727 00000000     .......'''......
  40c278:	00000000 02020000 f3f3f302 34ffffff     ...............4
  40c288:	00003434 00000000 00000000 00000000     44..............
  40c298:	00000000 f0141414 fffff0f0 ffffffff     ................
  40c2a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40c2b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40c2c8:	ffffffff ffffffff ffffffff ffffffff     ................
  40c2d8:	00020202 00000000 00000000 00000000     ................
	...
  40c314:	76000000 ffff7676 ffffffff ffffffff     ...vvv..........
  40c324:	ffffffff ffffffff ffffffff ffffffff     ................
  40c334:	ffffffff ffffffff 4141ffff 00000041     ..........AAA...
	...
  40c350:	ffa8a8a8 fcfcffff 282828fc 00000000     .........(((....
	...
  40c36c:	3b3b0000 ffffff3b ffffffff ffffffff     ..;;;...........
  40c37c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c38c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c39c:	ffffffff ffffffff 03ffffff 00000303     ................
	...
  40c3e0:	06000000 f3f30606 fffffff3 ffffffff     ................
  40c3f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c400:	ffffffff ffffffff ffffffff 5d5d5dff     .............]]]
	...
  40c41c:	89000000 ffff8989 ffffffff 1ef3f3f3     ................
  40c42c:	00001e1e 00000000 00000000 00000000     ................
  40c43c:	01010100 ff898989 ffffffff ffffffff     ................
  40c44c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c45c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c46c:	ffffffff ffffffff 0404ffff 00000004     ................
	...
  40c484:	0a0a0a00 00010101 00000000 00000000     ................
	...
  40c4b0:	2c2c0000 ffffff2c ffffffff ffffffff     ..,,,...........
  40c4c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40c4d0:	ffffffff ffffffff ffffffff 006b6b6b     ............kkk.
	...
  40c4ec:	77770000 ffffff77 ffffffff d5d5ffff     ..www...........
  40c4fc:	0b0b0bd5 00000000 00000000 00000000     ................
  40c50c:	12000000 f6f61212 fffffff6 ffffffff     ................
  40c51c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c52c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c53c:	ffffffff ffffffff 050505ff 00000000     ................
	...
  40c554:	84282828 0a0a8484 0000000a 00000000     (((.............
	...
  40c56c:	01000000 00000101 00000000 00000000     ................
  40c57c:	00000000 78787800 ffffffff ffffffff     .....xxx........
  40c58c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c59c:	ffffffff ffffffff ffffffff 7cffffff     ...............|
  40c5ac:	00007c7c 00000000 00000000 00000000     ||..............
  40c5bc:	67676700 ffffffff ffffffff ffffffff     .ggg............
  40c5cc:	01858585 00000101 00000000 00000000     ................
  40c5dc:	00000000 51515100 ffffffff ffffffff     .....QQQ........
  40c5ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40c5fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c60c:	ffffffff cdcdcdff 00040404 00000000     ................
  40c61c:	00000000 27000000 ffff2727 cdcdcdff     .......'''......
  40c62c:	00232323 00000000 0d0d0d00 933c3c3c     ###.........<<<.
  40c63c:	05059393 00000005 00000000 00000000     ................
  40c64c:	07070700 fff6f6f6 ffffffff ffffffff     ................
  40c65c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c66c:	ffffffff ffffffff ffffffff 8989ffff     ................
  40c67c:	00000089 00000000 00000000 00000000     ................
  40c68c:	ff5e5e5e ffffffff ffffffff ffffffff     ^^^.............
  40c69c:	3d3dffff 0000003d 00000000 00000000     ..===...........
  40c6ac:	00000000 e7090909 ffffe7e7 ffffffff     ................
  40c6bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c6cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40c6dc:	777777ff 000a0a0a 00000000 00000000     .www............
  40c6ec:	00000000 25250000 ffffff25 ffffffff     ......%%%.......
  40c6fc:	c4c4ffff bbbbbbc4 ffffffff 6d6dffff     ..............mm
  40c70c:	0000006d 00000000 00000000 00000000     m...............
  40c71c:	ff303030 ffffffff ffffffff ffffffff     000.............
  40c72c:	ffffffff ffffffff ffffffff ffffffff     ................
  40c73c:	ffffffff ffffffff ffffffff 787878ff     .............xxx
	...
  40c758:	6b000000 ffff6b6b ffffffff ffffffff     ...kkk..........
  40c768:	ffffffff edededff 000c0c0c 00000000     ................
	...
  40c780:	4a4a0000 ffffff4a ffffffff ffffffff     ..JJJ...........
  40c790:	ffffffff ffffffff ffffffff ffffffff     ................
  40c7a0:	ffffffff eaeaffff 343434ea 00010101     .........444....
	...
  40c7c0:	2e2e2e00 ffffffff ffffffff ffffffff     ................
  40c7d0:	ffffffff ffffffff 272727ff 00000000     .........'''....
	...
  40c7e8:	7e000000 ffff7e7e ffffffff ffffffff     ...~~~..........
  40c7f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40c808:	ffffffff ffffffff ffffffff ffffffff     ................
  40c818:	00696969 00000000 00000000 00000000     iii.............
  40c828:	7b7b0000 ffffff7b ffffffff ffffffff     ..{{{...........
  40c838:	ffffffff 62ffffff 00006262 00000000     .......bbb......
	...
  40c850:	0a0a0a00 fff3f3f3 ffffffff ffffffff     ................
  40c860:	ffffffff ffffffff ffffffff ffffffff     ................
  40c870:	9b9bffff 1111119b 00000000 00000000     ................
	...
  40c88c:	01010100 ff868686 ffffffff ffffffff     ................
  40c89c:	ffffffff ffffffff ffffffff 00060606     ................
	...
  40c8b4:	03000000 eded0303 ffffffed ffffffff     ................
  40c8c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c8d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40c8e4:	58ffffff 00005858 00000000 00000000     ...XXX..........
  40c8f4:	00000000 8e8e8e00 ffffffff ffffffff     ................
  40c904:	ffffffff ffffffff ffffffff 151515ff     ................
	...
  40c920:	68000000 ffff6868 ffffffff ffffffff     ...hhh..........
  40c930:	ffffffff ffffffff fcffffff 4c4cfcfc     ..............LL
  40c940:	0303034c 00000000 00000000 00000000     L...............
	...
  40c958:	06060600 ff6c6c6c ffffffff ffffffff     ....lll.........
  40c968:	ffffffff ffffffff ffffffff 03ffffff     ................
  40c978:	00000303 00000000 00000000 00000000     ................
  40c988:	37373700 ffffffff ffffffff ffffffff     .777............
  40c998:	ffffffff ffffffff ffffffff ffffffff     ................
  40c9a8:	ffffffff ffffffff ffffffff 3b3bffff     ..............;;
  40c9b8:	0000003b 00000000 00000000 00000000     ;...............
  40c9c8:	ffb9b9b9 ffffffff ffffffff ffffffff     ................
  40c9d8:	ffffffff ffffffff 00646464 00000000     ........ddd.....
	...
  40c9f0:	1d1d0000 ffffff1d ffffffff ffffffff     ................
  40ca00:	ffffffff ffffffff 2a2affff 0000002a     ..........***...
	...
  40ca24:	1b1b1b00 ffbbbbbb ffffffff ffffffff     ................
  40ca34:	ffffffff ffffffff ffffffff ffffffff     ................
  40ca44:	2b2bffff 0000002b 00000000 00000000     ..+++...........
  40ca54:	00000000 70000000 ffff7070 ffffffff     .......ppp......
  40ca64:	ffffffff ffffffff ffffffff ffffffff     ................
  40ca74:	ffffffff ffffffff ffffffff ffffffff     ................
  40ca84:	222222ff 00000000 00000000 00000000     ."""............
  40ca94:	fc040404 fffffcfc ffffffff ffffffff     ................
  40caa4:	ffffffff ffffffff f6ffffff 0b0bf6f6     ................
  40cab4:	0000000b 00000000 00000000 01010100     ................
  40cac4:	ffc4c4c4 ffffffff ffffffff ffffffff     ................
  40cad4:	9191ffff 00000091 00000000 00000000     ................
	...
  40caf0:	05050500 bd4f4f4f ffffbdbd ffffffff     ....OOO.........
  40cb00:	ffffffff ffffffff ffffffff ffffffff     ................
  40cb10:	ffffffff d7d7d7ff 000c0c0c 00000000     ................
	...
  40cb28:	06060000 b9b9b906 ffffffff ffffffff     ................
  40cb38:	ffffffff ffffffff ffffffff ffffffff     ................
  40cb48:	ffffffff ffffffff ffffffff 000f0f0f     ................
	...
  40cb60:	13000000 ffff1313 ffffffff ffffffff     ................
  40cb70:	ffffffff ffffffff ffffffff ffffffff     ................
  40cb80:	404040ff 00000000 00000000 00000000     .@@@............
  40cb90:	52000000 ffff5252 ffffffff ffffffff     ...RRR..........
  40cba0:	ffffffff 6b6b6bff 00000000 00000000     .....kkk........
	...
  40cbc4:	01010000 15151501 ff5a5a5a ffffffff     ........ZZZ.....
  40cbd4:	ffffffff ffffffff ffffffff ffffffff     ................
  40cbe4:	8fffffff 02028f8f 00000002 00000000     ................
	...
  40cbfc:	f3171717 fffff3f3 ffffffff ffffffff     ................
  40cc0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc1c:	ffffffff 00c6c6c6 00000000 00000000     ................
  40cc2c:	00000000 27270000 ffffff27 ffffffff     ......'''.......
  40cc3c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cc4c:	ffffffff 00a5a5a5 00000000 00000000     ................
  40cc5c:	00000000 20200000 ffffff20 ffffffff     ......   .......
  40cc6c:	ffffffff ffffffff 04c4c4c4 00000404     ................
	...
  40cc9c:	4c4c0000 ffffff4c ffffffff d0d0ffff     ..LLL...........
  40ccac:	515151d0 44444444 44444444 14141444     .QQQDDDDDDDDD...
	...
  40cccc:	39390000 ffffff39 ffffffff ffffffff     ..999...........
  40ccdc:	ffffffff ffffffff ffffffff ffffffff     ................
  40ccec:	61ffffff 00006161 00000000 00000000     ...aaa..........
  40ccfc:	00000000 52525200 ffffffff ffffffff     .....RRR........
  40cd0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40cd1c:	ffffffff 0d0dffff 0000000d 00000000     ................
  40cd2c:	00000000 05050500 fff6f6f6 ffffffff     ................
  40cd3c:	ffffffff ffffffff 6f6fffff 0909096f     ..........ooo...
	...
  40cd6c:	0a0a0a00 fffcfcfc b9b9ffff 0a0a0ab9     ................
	...
  40cd9c:	01010100 ff767676 ffffffff ffffffff     ....vvv.........
  40cdac:	ffffffff ffffffff ffffffff ffffffff     ................
  40cdbc:	2a2affff 0000002a 00000000 00000000     ..***...........
  40cdcc:	00000000 ffa8a8a8 ffffffff ffffffff     ................
  40cddc:	ffffffff ffffffff ffffffff ffffffff     ................
  40cdec:	ffffffff 343434ff 00000000 00000000     .....444........
  40cdfc:	00000000 96000000 ffff9696 ffffffff     ................
  40ce0c:	ffffffff ffffffff ffffffff 7bf6f6f6     ...............{
  40ce1c:	32327b7b 0b0b0b32 00000000 00000000     {{222...........
	...
  40ce3c:	8e000000 f9f98e8e 181818f9 00000000     ................
	...
  40ce6c:	12000000 ffff1212 ffffffff ffffffff     ................
  40ce7c:	ffffffff ffffffff ffffffff e7e7ffff     ................
  40ce8c:	050505e7 00000000 00000000 00000000     ................
  40ce9c:	ff0a0a0a ffffffff ffffffff ffffffff     ................
  40ceac:	ffffffff ffffffff ffffffff ffffffff     ................
  40cebc:	ffffffff 006b6b6b 00000000 00000000     ....kkk.........
  40cecc:	00000000 5a5a0000 ffffff5a ffffffff     ......ZZZ.......
  40cedc:	ffffffff ffffffff ffffffff ffffffff     ................
  40ceec:	ffffffff 96ffffff 3f3f9696 1212123f     ..........???...
	...
  40cf0c:	3b3b0000 4545453b 00000000 00000000     ..;;;EEE........
	...
  40cf3c:	03030000 ffffff03 ffffffff ffffffff     ................
  40cf4c:	ffffffff ffffffff ffffffff 626262ff     .............bbb
	...
  40cf68:	30000000 ffff3030 ffffffff ffffffff     ...000..........
  40cf78:	ffffffff ffffffff ffffffff ffffffff     ................
  40cf88:	ffffffff afffffff 0000afaf 00000000     ................
	...
  40cfa0:	34343400 ffffffff ffffffff ffffffff     .444............
  40cfb0:	ffffffff ffffffff ffffffff ffffffff     ................
  40cfc0:	ffffffff ffffffff afffffff 0303afaf     ................
  40cfd0:	00000003 00000000 00000000 0a0a0a00     ................
  40cfe0:	00020202 00000000 00000000 00000000     ................
	...
  40d00c:	1b1b1b00 ffffffff ffffffff ffffffff     ................
  40d01c:	ffffffff ffffffff ffffffff 001a1a1a     ................
	...
  40d038:	88880000 ffffff88 ffffffff ffffffff     ................
  40d048:	ffffffff ffffffff ffffffff ffffffff     ................
  40d058:	ffffffff fcfcffff 040404fc 00000000     ................
	...
  40d070:	ff202020 ffffffff ffffffff ffffffff        .............
  40d080:	ffffffff ffffffff ffffffff ffffffff     ................
  40d090:	ffffffff ffffffff ffffffff 1e1e1eff     ................
	...
  40d0d8:	11111100 ffafafaf ffffffff ffffffff     ................
  40d0e8:	ffffffff ffffffff ffffffff 00868686     ................
	...
  40d104:	0d0d0000 ffffff0d ffffffff ffffffff     ................
  40d114:	ffffffff ffffffff ffffffff ffffffff     ................
  40d124:	ffffffff ffffffff ffffffff 00141414     ................
	...
  40d13c:	13000000 ffff1313 ffffffff ffffffff     ................
  40d14c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d15c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d16c:	00555555 00000000 00000000 00000000     UUU.............
	...
  40d188:	01010000 74747401 abcdcdcd abababab     .....ttt........
  40d198:	abababab abababab 9393abab ababab93     ................
  40d1a8:	fffcfcfc ffffffff ffffffff ffffffff     ................
  40d1b8:	ffffffff ffffffff 1effffff 00001e1e     ................
	...
  40d1d4:	44444400 ffffffff ffffffff ffffffff     .DDD............
  40d1e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d1f4:	ffffffff ffffffff 1dffffff 00001d1d     ................
	...
  40d20c:	09090000 ffffff09 ffffffff ffffffff     ................
  40d21c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d22c:	ffffffff ffffffff ffffffff cbffffff     ................
  40d23c:	0101cbcb 00000001 00000000 00000000     ................
	...
  40d258:	39393900 ffffffff ffffffff ffffffff     .999............
  40d268:	ffffffff ffffffff ffffffff ffffffff     ................
  40d278:	ffffffff ffffffff ffffffff ffffffff     ................
  40d288:	ffffffff 76ffffff 00007676 00000000     .......vvv......
	...
  40d2a0:	05050500 ffd5d5d5 ffffffff ffffffff     ................
  40d2b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d2c0:	ffffffff ffffffff ffffffff 2525ffff     ..............%%
  40d2d0:	00000025 00000000 00000000 05050500     %...............
  40d2e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d2f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d300:	ffffffff ffffffff ffffffff 171717ff     ................
	...
  40d324:	12121200 ffededed ffffffff ffffffff     ................
  40d334:	ffffffff ffffffff ffffffff ffffffff     ................
  40d344:	ffffffff ffffffff ffffffff ffffffff     ................
  40d354:	ffffffff edffffff 0f0feded 0000000f     ................
	...
  40d370:	ff3d3d3d ffffffff ffffffff ffffffff     ===.............
  40d380:	ffffffff ffffffff ffffffff ffffffff     ................
  40d390:	ffffffff ffffffff ffffffff 2c2c2cff     .............,,,
	...
  40d3ac:	ff020202 ffffffff ffffffff ffffffff     ................
  40d3bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d3cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d3dc:	00474747 00000000 00000000 00000000     GGG.............
  40d3ec:	00000000 03030300 ffa0a0a0 ffffffff     ................
  40d3fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d40c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d41c:	ffffffff ffffffff ffffffff 3d3dffff     ..............==
  40d42c:	0000003d 00000000 00000000 00000000     =...............
  40d43c:	cd050505 ffffcdcd ffffffff ffffffff     ................
  40d44c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d45c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d46c:	002e2e2e 00000000 00000000 02000000     ................
  40d47c:	ffff0202 ffffffff ffffffff ffffffff     ................
  40d48c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d49c:	ffffffff ffffffff ffffffff a9ffffff     ................
  40d4ac:	0000a9a9 00000000 00000000 00000000     ................
  40d4bc:	00000000 ff515151 ffffffff ffffffff     ....QQQ.........
  40d4cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d4dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40d4ec:	ffffffff ffffffff 7c7cffff 0101017c     ..........|||...
	...
  40d508:	4f000000 ffff4f4f ffffffff ffffffff     ...OOO..........
  40d518:	ffffffff ffffffff ffffffff ffffffff     ................
  40d528:	ffffffff ffffffff ffffffff ffffffff     ................
  40d538:	27ffffff 00002727 00000000 00000000     ...'''..........
  40d548:	06060000 ffffff06 ffffffff ffffffff     ................
  40d558:	ffffffff ffffffff ffffffff ffffffff     ................
  40d568:	ffffffff ffffffff ffffffff ffffffff     ................
  40d578:	ffffffff 111111ff 00000000 00000000     ................
  40d588:	00000000 ff1e1e1e ffffffff ffffffff     ................
  40d598:	ffffffff ffffffff ffffffff ffffffff     ................
  40d5a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40d5b8:	ffffffff ffffffff bfbfffff 090909bf     ................
	...
  40d5d4:	13000000 f6f61313 fffffff6 ffffffff     ................
  40d5e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d5f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d604:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40d614:	00000000 0b0b0b00 ffffffff ffffffff     ................
  40d624:	ffffffff ffffffff ffffffff ffffffff     ................
  40d634:	ffffffff ffffffff ffffffff ffffffff     ................
  40d644:	ffffffff ffffffff 02767676 00000202     ........vvv.....
  40d654:	00000000 c60d0d0d ffffc6c6 ffffffff     ................
  40d664:	ffffffff ffffffff ffffffff ffffffff     ................
  40d674:	ffffffff ffffffff ffffffff ffffffff     ................
  40d684:	ffffffff ffffffff d7d7ffff 111111d7     ................
	...
  40d6a0:	02000000 8d8d0202 ffffff8d ffffffff     ................
  40d6b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d6c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d6d0:	ffffffff ffffffff 151515ff 00000000     ................
	...
  40d6e8:	ff111111 ffffffff ffffffff ffffffff     ................
  40d6f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40d708:	ffffffff ffffffff ffffffff ffffffff     ................
  40d718:	ffffffff a8a8ffff 474747a8 da545454     .........GGGTTT.
  40d728:	ffffdada ffffffff ffffffff ffffffff     ................
  40d738:	ffffffff ffffffff ffffffff ffffffff     ................
  40d748:	ffffffff ffffffff ffffffff ffffffff     ................
  40d758:	eaeaffff 1a1a1aea 00000000 00000000     ................
	...
  40d770:	47470000 ffffff47 ffffffff ffffffff     ..GGG...........
  40d780:	ffffffff ffffffff ffffffff ffffffff     ................
  40d790:	ffffffff ffffffff ffffffff ffffffff     ................
  40d7a0:	ffffffff ffffffff 00050505 00000000     ................
  40d7b0:	00000000 20000000 ffff2020 ffffffff     .......   ......
  40d7c0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d7d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d7e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d7f0:	ffffffff ffffffff ffffffff ffffffff     ................
  40d800:	ffffffff ffffffff ffffffff ffffffff     ................
  40d810:	ffffffff ffffffff ffffffff ffffffff     ................
  40d820:	ffffffff dcdcffff 1b1b1bdc 00000000     ................
	...
  40d83c:	1e1e0000 fcfcfc1e ffffffff ffffffff     ................
  40d84c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d85c:	ffffffff ffffffff ffffffff ffffffff     ................
  40d86c:	ffffffff ffffffff 00c4c4c4 00000000     ................
	...
  40d884:	38380000 ffffff38 ffffffff ffffffff     ..888...........
  40d894:	ffffffff ffffffff ffffffff ffffffff     ................
  40d8a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d8b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d8c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d8d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d8e4:	ffffffff ffffffff ffffffff bfbfffff     ................
  40d8f4:	111111bf 00000000 00000000 00000000     ................
  40d904:	00000000 0f0f0000 cdcdcd0f ffffffff     ................
  40d914:	ffffffff ffffffff ffffffff ffffffff     ................
  40d924:	ffffffff ffffffff ffffffff ffffffff     ................
  40d934:	ffffffff ffffffff ffffffff 73ffffff     ...............s
  40d944:	00007373 00000000 00000000 00000000     ss..............
  40d954:	57575700 ffffffff ffffffff ffffffff     .WWW............
  40d964:	ffffffff ffffffff ffffffff ffffffff     ................
  40d974:	ffffffff ffffffff ffffffff ffffffff     ................
  40d984:	ffffffff ffffffff ffffffff ffffffff     ................
  40d994:	ffffffff ffffffff ffffffff ffffffff     ................
  40d9a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d9b4:	ffffffff ffffffff 7a7affff 0909097a     ..........zzz...
	...
  40d9d4:	0a0a0000 b3b3b30a ffffffff ffffffff     ................
  40d9e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40d9f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40da04:	ffffffff ffffffff ffffffff 3636ffff     ..............66
  40da14:	00000036 00000000 00000000 00000000     6...............
  40da24:	ff8e8e8e ffffffff ffffffff ffffffff     ................
  40da34:	ffffffff ffffffff ffffffff ffffffff     ................
  40da44:	ffffffff ffffffff ffffffff ffffffff     ................
  40da54:	ffffffff ffffffff ffffffff ffffffff     ................
  40da64:	ffffffff ffffffff ffffffff ffffffff     ................
  40da74:	ffffffff ffffffff ffffffff ffffffff     ................
  40da84:	edffffff 3d3deded 0101013d 00000000     ......===.......
	...
  40daa0:	06060000 9b9b9b06 ffffffff ffffffff     ................
  40dab0:	ffffffff ffffffff ffffffff ffffffff     ................
  40dac0:	ffffffff ffffffff ffffffff ffffffff     ................
  40dad0:	ffffffff ffffffff ffffffff ffffffff     ................
  40dae0:	131313ff 00000000 00000000 00000000     ................
  40daf0:	f6050505 fffff6f6 ffffffff ffffffff     ................
  40db00:	ffffffff ffffffff ffffffff ffffffff     ................
  40db10:	ffffffff ffffffff ffffffff ffffffff     ................
  40db20:	ffffffff ffffffff ffffffff ffffffff     ................
  40db30:	ffffffff ffffffff ffffffff ffffffff     ................
  40db40:	ffffffff ffffffff ffffffff ffffffff     ................
  40db50:	77ffffff 0d0d7777 0000000d 00000000     ...www..........
	...
  40db6c:	0a0a0000 9b9b9b0a ffffffff ffffffff     ................
  40db7c:	ffffffff ffffffff ffffffff ffffffff     ................
  40db8c:	ffffffff ffffffff ffffffff ffffffff     ................
  40db9c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dbac:	b7b7b7ff 00010101 00000000 00000000     ................
  40dbbc:	20000000 ffff2020 ffffffff d7ffffff     ...   ..........
  40dbcc:	eaead7d7 ffffffea ffffffff ffffffff     ................
  40dbdc:	ffffffff ffffffff ffffffff ffffffff     ................
  40dbec:	ffffffff ffffffff ffffffff ffffffff     ................
  40dbfc:	ffffffff ffffffff ffffffff ffffffff     ................
  40dc0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40dc1c:	1e868686 00001e1e 00000000 00000000     ................
	...
  40dc38:	0f0f0000 b3b3b30f ffffffff ffffffff     ................
  40dc48:	ffffffff ffffffff ffffffff ffffffff     ................
  40dc58:	ffffffff ffffffff ffffffff ffffffff     ................
  40dc68:	ffffffff ffffffff ffffffff ffffffff     ................
  40dc78:	ffffffff 00444444 00000000 00000000     ....DDD.........
  40dc88:	00000000 4c4c0000 ffffff4c 17bbbbbb     ......LLL.......
  40dc98:	00001717 03030300 78252525 fcfc7878     ........%%%xxx..
  40dca8:	fffffffc ffffffff ffffffff ffffffff     ................
  40dcb8:	ffffffff ffffffff ffffffff ffffffff     ................
  40dcc8:	ffffffff ffffffff ffffffff ffffffff     ................
  40dcd8:	ffffffff ffffffff e7e7ffff 616161e7     .............aaa
  40dce8:	001a1a1a 00000000 00000000 00000000     ................
	...
  40dd04:	1e1e0000 cdcdcd1e ffffffff ffffffff     ................
  40dd14:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd24:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd34:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd44:	ffffffff 0fffffff 00000f0f 00000000     ................
  40dd54:	00000000 01010000 bdbdbd01 1effffff     ................
  40dd64:	00001e1e 00000000 00000000 00000000     ................
  40dd74:	0c0c0c00 73343434 e2e27373 ffffffe2     ....444sss......
  40dd84:	ffffffff ffffffff ffffffff ffffffff     ................
  40dd94:	ffffffff ffffffff ffffffff ffffffff     ................
  40dda4:	ffffffff 61c6c6c6 2a2a6161 0505052a     .......aaa***...
	...
  40ddcc:	02000000 47470202 fcfcfc47 ffffffff     ......GGG.......
  40dddc:	ffffffff ffffffff ffffffff ffffffff     ................
  40ddec:	ffffffff ffffffff ffffffff ffffffff     ................
  40ddfc:	ffffffff ffffffff ffffffff ffffffff     ................
  40de0c:	ffffffff ffffffff 74ffffff 00007474     ...........ttt..
	...
  40de28:	1c1c1c00 ffffffff 0303ffff 00000003     ................
	...
  40de4c:	03030300 27141414 42422727 5e5e5e42     .......'''BBB^^^
  40de5c:	7b6b6b6b 8e8e7b7b 7777778e 5a696969     kkk{{{...wwwiiiZ
  40de6c:	3b3b5a5a 2323233b 000f0f0f 00000000     ZZ;;;###........
	...
  40de98:	13000000 8d8d1313 ffffff8d ffffffff     ................
  40dea8:	ffffffff ffffffff ffffffff ffffffff     ................
  40deb8:	ffffffff ffffffff ffffffff ffffffff     ................
  40dec8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ded8:	ffffffff ffffffff ffffffff 1717ffff     ................
  40dee8:	00000017 00000000 00000000 00000000     ................
  40def8:	ff5d5d5d ffffffff 0f0f0fff 00000000     ]]].............
	...
  40df64:	4e050505 f6f64e4e fffffff6 ffffffff     ...NNN..........
  40df74:	ffffffff ffffffff ffffffff ffffffff     ................
  40df84:	ffffffff ffffffff ffffffff ffffffff     ................
  40df94:	ffffffff ffffffff ffffffff ffffffff     ................
  40dfa4:	ffffffff ffffffff ffffffff 7a7affff     ..............zz
  40dfb4:	0000007a 00000000 00000000 00000000     z...............
  40dfc4:	e7090909 ffffe7e7 ffffffff 004e4e4e     ............NNN.
	...
  40e02c:	04040400 cd373737 ffffcdcd ffffffff     ....777.........
  40e03c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e04c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e05c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e06c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e07c:	f3f3ffff 101010f3 00000000 00000000     ................
  40e08c:	00000000 47000000 ffff4747 ffffffff     .......GGG......
  40e09c:	eaffffff 0a0aeaea 0000000a 00000000     ................
	...
  40e0f4:	0d0d0000 4444440d ffd7d7d7 ffffffff     .....DDD........
  40e104:	ffffffff ffffffff ffffffff ffffffff     ................
  40e114:	ffffffff ffffffff ffffffff ffffffff     ................
  40e124:	ffffffff ffffffff ffffffff ffffffff     ................
  40e134:	ffffffff ffffffff ffffffff ffffffff     ................
  40e144:	ffffffff ffffffff 464646ff 00000000     .........FFF....
	...
  40e15c:	07000000 dfdf0707 ffffffdf ffffffff     ................
  40e16c:	ffffffff 545454ff 00000000 00000000     .....TTT........
	...
  40e1bc:	300a0a0a 88883030 ffffff88 ffffffff     ...000..........
  40e1cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e1dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e1ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40e1fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e20c:	ffffffff ffffffff ffffffff 9b9b9bff     ................
  40e21c:	00030303 00000000 00000000 00000000     ................
  40e22c:	4a4a0000 ffffff4a ffffffff ffffffff     ..JJJ...........
  40e23c:	ffffffff 14f9f9f9 00001414 00000000     ................
	...
  40e258:	0f1a1a1a 02020f0f 00000002 00000000     ................
	...
  40e27c:	13040404 27271313 52525227 ffa8a8a8     ......'''RRR....
  40e28c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e29c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e2ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40e2bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e2cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e2dc:	ffffffff ffffffff dfdfdfff 000f0f0f     ................
	...
  40e2f8:	11110000 f3f3f311 ffffffff ffffffff     ................
  40e308:	ffffffff ffffffff 8a8affff 0101018a     ................
	...
  40e324:	1b000000 f0f01b1b f3f3f3f0 8aa5a5a5     ................
  40e334:	76768a8a 65656576 6b626262 78786b6b     ..vvveeebbbkkkxx
  40e344:	8e8e8e78 ffb9b9b9 ffffffff ffffffff     x...............
  40e354:	ffffffff ffffffff ffffffff ffffffff     ................
  40e364:	ffffffff ffffffff ffffffff ffffffff     ................
  40e374:	ffffffff ffffffff ffffffff ffffffff     ................
  40e384:	ffffffff ffffffff ffffffff ffffffff     ................
  40e394:	ffffffff ffffffff ffffffff ffffffff     ................
  40e3a4:	ffffffff ffffffff ffffffff fcfcfcff     ................
  40e3b4:	00252525 00000000 00000000 00000000     %%%.............
  40e3c4:	00000000 84848400 ffffffff ffffffff     ................
  40e3d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e3e4:	003c3c3c 00000000 00000000 00000000     <<<.............
  40e3f4:	00000000 2a2a2a00 ffffffff ffffffff     .....***........
  40e404:	ffffffff ffffffff ffffffff ffffffff     ................
  40e414:	ffffffff ffffffff ffffffff ffffffff     ................
  40e424:	ffffffff ffffffff ffffffff ffffffff     ................
  40e434:	ffffffff ffffffff ffffffff ffffffff     ................
  40e444:	ffffffff ffffffff ffffffff ffffffff     ................
  40e454:	ffffffff ffffffff ffffffff ffffffff     ................
  40e464:	ffffffff ffffffff ffffffff ffffffff     ................
  40e474:	ffffffff ffffffff ffffffff 00343434     ............444.
	...
  40e494:	32323200 ffffffff ffffffff ffffffff     .222............
  40e4a4:	ffffffff ffffffff ffffffff f0ffffff     ................
  40e4b4:	1414f0f0 00000014 00000000 00000000     ................
  40e4c4:	00000000 34000000 fcfc3434 fffffffc     .......444......
  40e4d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e4e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e4f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40e504:	ffffffff ffffffff ffffffff ffffffff     ................
  40e514:	ffffffff ffffffff ffffffff ffffffff     ................
  40e524:	ffffffff ffffffff ffffffff ffffffff     ................
  40e534:	ffffffff ffffffff ffffffff ffffffff     ................
  40e544:	ffffffff ffffffff 00404040 00000000     ........@@@.....
	...
  40e560:	14141400 ffededed ffffffff ffffffff     ................
  40e570:	ffffffff ffffffff ffffffff ffffffff     ................
  40e580:	ffffffff b7b7b7ff 00090909 00000000     ................
	...
  40e59c:	28282800 fff3f3f3 ffffffff ffffffff     .(((............
  40e5ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40e5bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e5cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e5dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e5ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40e5fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e60c:	ffffffff ffffffff fcfcfcff 00323232     ............222.
	...
  40e62c:	05050500 ffadadad ffffffff ffffffff     ................
  40e63c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e64c:	ffffffff ffffffff 82ffffff 03038282     ................
  40e65c:	00000003 00000000 00000000 00000000     ................
  40e66c:	1e000000 d5d51e1e ffffffd5 ffffffff     ................
  40e67c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e68c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e69c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e6ac:	ffffffff ffffffff ffffffff ffffffff     ................
  40e6bc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e6cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e6dc:	ffffffff dfdfdfff 00232323 00000000     ........###.....
	...
  40e6f8:	03030300 ff7c7c7c ffffffff ffffffff     ....|||.........
  40e708:	ffffffff ffffffff ffffffff ffffffff     ................
  40e718:	ffffffff ffffffff ffffffff ffffffff     ................
  40e728:	6b6b6bff 00010101 00000000 00000000     .kkk............
	...
  40e740:	0a0a0a00 ff818181 ffffffff ffffffff     ................
  40e750:	ffffffff ffffffff ffffffff ffffffff     ................
  40e760:	ffffffff ffffffff ffffffff ffffffff     ................
  40e770:	ffffffff ffffffff ffffffff ffffffff     ................
  40e780:	ffffffff ffffffff ffffffff ffffffff     ................
  40e790:	ffffffff ffffffff ffffffff ffffffff     ................
  40e7a0:	ffffffff ffffffff ffffffff a0a0a0ff     ................
  40e7b0:	00101010 00000000 00000000 00000000     ................
  40e7c0:	00000000 01010100 ff646464 ffffffff     ........ddd.....
  40e7d0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e7e0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e7f0:	ffffffff ffffffff 5effffff 01015e5e     ...........^^^..
  40e800:	00000001 00000000 00000000 00000000     ................
  40e810:	01000000 3d3d0101 e7e7e73d ffffffff     ......===.......
  40e820:	ffffffff ffffffff ffffffff ffffffff     ................
  40e830:	ffffffff ffffffff ffffffff ffffffff     ................
  40e840:	ffffffff ffffffff ffffffff ffffffff     ................
  40e850:	ffffffff ffffffff ffffffff ffffffff     ................
  40e860:	ffffffff ffffffff ffffffff ffffffff     ................
  40e870:	ffffffff f0f0ffff 464646f0 00030303     .........FFF....
	...
  40e890:	01010100 ff545454 ffffffff ffffffff     ....TTT.........
  40e8a0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e8b0:	ffffffff ffffffff ffffffff ffffffff     ................
  40e8c0:	ffffffff ffffffff ffffffff 6b6b6bff     .............kkk
  40e8d0:	00030303 00000000 00000000 00000000     ................
	...
  40e8e8:	620b0b0b ffff6262 ffffffff ffffffff     ...bbb..........
  40e8f8:	ffffffff ffffffff ffffffff ffffffff     ................
  40e908:	ffffffff ffffffff ffffffff ffffffff     ................
  40e918:	ffffffff ffffffff ffffffff ffffffff     ................
  40e928:	ffffffff ffffffff ffffffff ffffffff     ................
  40e938:	ffffffff ffffffff 7878ffff 0f0f0f78     ..........xxx...
	...
  40e95c:	03030300 ff656565 ffffffff ffffffff     ....eee.........
  40e96c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e97c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e98c:	ffffffff ffffffff ffffffff ffffffff     ................
  40e99c:	82ffffff 07078282 00000007 00000000     ................
	...
  40e9bc:	15151500 f3646464 fffff3f3 ffffffff     ....ddd.........
  40e9cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e9dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40e9ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40e9fc:	ffffffff ffffffff ffffffff 74ffffff     ...............t
  40ea0c:	17177474 00000017 00000000 00000000     tt..............
	...
  40ea28:	05050500 ff7c7c7c ffffffff ffffffff     ....|||.........
  40ea38:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea48:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea58:	ffffffff ffffffff ffffffff ffffffff     ................
  40ea68:	ffffffff ffffffff b7b7b7ff 00141414     ................
	...
  40ea90:	0a0a0000 4040400a ffa5a5a5 ffffffff     .....@@@........
  40eaa0:	ffffffff ffffffff ffffffff ffffffff     ................
  40eab0:	ffffffff ffffffff ffffffff ffffffff     ................
  40eac0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ead0:	b7b7b7ff 0f444444 00000f0f 00000000     ....DDD.........
	...
  40eaf4:	14141400 ffafafaf ffffffff ffffffff     ................
  40eb04:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb14:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb24:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb34:	ffffffff ffffffff ffffffff f0ffffff     ................
  40eb44:	3a3af0f0 0101013a 00000000 00000000     ..:::...........
	...
  40eb68:	0d0d0000 3434340d ad6b6b6b ffffadad     .....444kkk.....
  40eb78:	ffffffff ffffffff ffffffff ffffffff     ................
  40eb88:	ffffffff ffffffff ffffffff 71c6c6c6     ...............q
  40eb98:	36367171 13131336 00010101 00000000     qq666...........
	...
  40ebc0:	32323200 ffededed ffffffff ffffffff     .222............
  40ebd0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ebe0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ebf0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ec00:	ffffffff ffffffff ffffffff ffffffff     ................
  40ec10:	ffffffff ffffffff 12888888 00001212     ................
	...
  40ec44:	04040400 1d141414 25251d1d 2c2c2c25     ..........%%%,,,
  40ec54:	272e2e2e 20202727 15151520 00050505     ...'''   .......
	...
  40ec88:	11110000 84848411 ffffffff ffffffff     ................
  40ec98:	ffffffff ffffffff ffffffff ffffffff     ................
  40eca8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ecb8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ecc8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ecd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40ece8:	f6f6ffff 4f4f4ff6 00090909 00000000     .....OOO........
	...
  40ed50:	07000000 4a4a0707 f3f3f34a ffffffff     ......JJJ.......
  40ed60:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed70:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed80:	ffffffff ffffffff ffffffff ffffffff     ................
  40ed90:	ffffffff ffffffff ffffffff ffffffff     ................
  40eda0:	ffffffff ffffffff ffffffff ffffffff     ................
  40edb0:	ffffffff ffffffff ffffffff e4ffffff     ................
  40edc0:	4949e4e4 0a0a0a49 00000000 00000000     ..III...........
	...
  40ee1c:	47090909 dfdf4747 ffffffdf ffffffff     ...GGG..........
  40ee2c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ee3c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ee4c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ee5c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ee6c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ee7c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ee8c:	ffffffff ffffffff 67f6f6f6 1c1c6767     ...........ggg..
  40ee9c:	0101011c 00000000 00000000 00000000     ................
	...
  40eee0:	01010000 1c1c1c01 e75c5c5c ffffe7e7     ........\\\.....
  40eef0:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef00:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef10:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef20:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef30:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef40:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef50:	ffffffff ffffffff ffffffff ffffffff     ................
  40ef60:	ffffffff ffffffff ffffffff 51c9c9c9     ...............Q
  40ef70:	20205151 05050520 00000000 00000000     QQ   ...........
	...
  40efa8:	20050505 4c4c2020 bdbdbd4c ffffffff     ...   LLL.......
  40efb8:	ffffffff ffffffff ffffffff ffffffff     ................
  40efc8:	ffffffff ffffffff ffffffff ffffffff     ................
  40efd8:	ffffffff ffffffff ffffffff ffffffff     ................
  40efe8:	ffffffff ffffffff ffffffff ffffffff     ................
  40eff8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f008:	ffffffff ffffffff ffffffff ffffffff     ................
  40f018:	ffffffff ffffffff ffffffff ffffffff     ................
  40f028:	ffffffff ffffffff ffffffff ffffffff     ................
  40f038:	ffffffff ffffffff ffffffff 96f6f6f6     ................
  40f048:	5a5a9696 3434345a 131e1e1e 09091313     ..ZZZ444........
  40f058:	05050509 02010101 06060202 0c0c0c06     ................
  40f068:	20111111 37372020 55555537 f68f8f8f     ...   777UUU....
  40f078:	fffff6f6 ffffffff ffffffff ffffffff     ................
  40f088:	ffffffff ffffffff ffffffff ffffffff     ................
  40f098:	ffffffff ffffffff ffffffff ffffffff     ................
  40f0a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f0b8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f0c8:	00ffffff                                ....

0040f0cc <image_data_termometro>:
  40f0cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40f0dc:	ffffffff ffffffff ffffffff 9999ffff     ................
  40f0ec:	3b3b3b99 09141414 01010909 00000001     .;;;............
	...
  40f108:	11070707 32321111 7c7c7c32 ffffffff     ......222|||....
  40f118:	ffffffff ffffffff ffffffff ffffffff     ................
  40f128:	ffffffff ffffffff ffffffff ffffffff     ................
  40f138:	ffffffff ffffffff ffffffff ffffffff     ................
  40f148:	ffffffff ffffffff ffffffff ffffffff     ................
  40f158:	ffffffff ffffffff ffffffff ffffffff     ................
  40f168:	ffffffff ffffffff ffffffff ffffffff     ................
  40f178:	ffffffff ffffffff ffffffff b5b5ffff     ................
  40f188:	232323b5 00000000 00000000 00000000     .###............
	...
  40f1b4:	17170000 8f8f8f17 ffffffff ffffffff     ................
  40f1c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f1d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f1e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f1f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f204:	ffffffff ffffffff ffffffff ffffffff     ................
  40f214:	ffffffff ffffffff ffffffff ffffffff     ................
  40f224:	818181ff 00070707 00000000 00000000     ................
	...
  40f258:	03000000 5a5a0303 ffffff5a ffffffff     ......ZZZ.......
  40f268:	ffffffff ffffffff ffffffff ffffffff     ................
  40f278:	ffffffff ffffffff ffffffff ffffffff     ................
  40f288:	ffffffff ffffffff ffffffff ffffffff     ................
  40f298:	ffffffff ffffffff ffffffff ffffffff     ................
  40f2a8:	ffffffff ffffffff ffffffff ffffffff     ................
  40f2b8:	ffffffff ffffffff ffffffff 03919191     ................
  40f2c8:	00000303 00000000 00000000 00000000     ................
	...
  40f300:	5c000000 ffff5c5c ffffffff ffffffff     ...\\\..........
  40f310:	ffffffff ffffffff ffffffff ffffffff     ................
  40f320:	ffffffff ffffffff ffffffff ffffffff     ................
  40f330:	ffffffff ffffffff ffffffff ffffffff     ................
  40f340:	ffffffff ffffffff ffffffff ffffffff     ................
  40f350:	ffffffff ffffffff ffffffff ffffffff     ................
  40f360:	d5ffffff 0909d5d5 00000009 00000000     ................
	...
  40f3a4:	03030300 ff999999 ffffffff ffffffff     ................
  40f3b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f3c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f3d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f3e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f3f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f404:	383838ff 00000000 00000000 00000000     .888............
  40f414:	04000000 3b3b0404 8e8e8e3b d0c4c4c4     ......;;;.......
  40f424:	d0d0d0d0 d0d0d0d0 cbd0d0d0 9b9bcbcb     ................
  40f434:	4a4a4a9b 000a0a0a 00000000 00000000     .JJJ............
  40f444:	00000000 1c1c0000 ffffff1c ffffffff     ................
  40f454:	ffffffff ffffffff ffffffff ffffffff     ................
  40f464:	ffffffff ffffffff ffffffff ffffffff     ................
  40f474:	ffffffff ffffffff ffffffff ffffffff     ................
  40f484:	ffffffff ffffffff ffffffff ffffffff     ................
  40f494:	ffffffff ffffffff ffffffff ffffffff     ................
  40f4a4:	03e2e2e2 00000303 00000000 00000000     ................
  40f4b4:	0b0b0000 a9a9a90b ffffffff ffffffff     ................
  40f4c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f4d4:	ffffffff d2d2ffff 171717d2 00000000     ................
	...
  40f4ec:	94000000 ffff9494 ffffffff ffffffff     ................
  40f4fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40f50c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f51c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f52c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f53c:	ffffffff ffffffff 6969ffff 00000069     ..........iii...
	...
  40f554:	01010100 ff8f8f8f ffffffff ffffffff     ................
  40f564:	ffffffff ffffffff ffffffff ffffffff     ................
  40f574:	ffffffff ffffffff cbffffff 0606cbcb     ................
  40f584:	00000006 00000000 00000000 3d3d3d00     .............===
  40f594:	ffffffff ffffffff ffffffff ffffffff     ................
  40f5a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f5b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f5c4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f5d4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f5e4:	ffffffff 00383838 00000000 00000000     ....888.........
  40f5f4:	1d000000 ffff1d1d ffffffff ffffffff     ................
  40f604:	ffffffff ffffffff ffffffff ffffffff     ................
  40f614:	ffffffff ffffffff ffffffff ffffffff     ................
  40f624:	00393939 00000000 00000000 1b000000     999.............
  40f634:	ffff1b1b ffffffff ffffffff ffffffff     ................
  40f644:	ffffffff ffffffff ffffffff ffffffff     ................
  40f654:	ffffffff ffffffff ffffffff ffffffff     ................
  40f664:	ffffffff ffffffff ffffffff ffffffff     ................
  40f674:	ffffffff ffffffff ffffffff ffffffff     ................
  40f684:	ffffffff 2727ffff 00000027 00000000     ......'''.......
  40f694:	00000000 3f3f3f00 ffffffff ffffffff     .....???........
  40f6a4:	ffffffff f3ffffff 6f6ff3f3 6262626f     ..........ooobbb
  40f6b4:	ffd7d7d7 ffffffff ffffffff ffffffff     ................
  40f6c4:	6d6dffff 0000006d 00000000 00000000     ..mmm...........
  40f6d4:	10101000 ffffffff ffffffff ffffffff     ................
  40f6e4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f6f4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f704:	ffffffff ffffffff ffffffff ffffffff     ................
  40f714:	ffffffff ffffffff ffffffff ffffffff     ................
  40f724:	ffffffff ffffffff 00202020 00000000     ........   .....
  40f734:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40f744:	ffffffff f0f0ffff 171717f0 00000000     ................
  40f754:	0a0a0000 bdbdbd0a ffffffff ffffffff     ................
  40f764:	ffffffff 00848484 00000000 00000000     ................
  40f774:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40f784:	ffffffff ffffffff ffffffff ffffffff     ................
  40f794:	ffffffff ffffffff ffffffff ffffffff     ................
  40f7a4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f7b4:	ffffffff ffffffff ffffffff ffffffff     ................
  40f7c4:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40f7dc:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40f7ec:	00656565 00000000 00000000 38000000     eee............8
  40f7fc:	ffff3838 ffffffff ffffffff 8484ffff     88..............
  40f80c:	00000084 00000000 00000000 0a0a0a00     ................
  40f81c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f82c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f83c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f84c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f85c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f86c:	ffffffff 00202020 00000000 00000000     ....   .........
  40f87c:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40f88c:	4646ffff 00000046 00000000 00000000     ..FFF...........
  40f89c:	23232300 ffffffff ffffffff ffffffff     .###............
  40f8ac:	00848484 00000000 00000000 0a000000     ................
  40f8bc:	ffff0a0a ffffffff ffffffff ffffffff     ................
  40f8cc:	ffffffff ffffffff ffffffff ffffffff     ................
  40f8dc:	ffffffff ffffffff ffffffff ffffffff     ................
  40f8ec:	ffffffff ffffffff ffffffff ffffffff     ................
  40f8fc:	ffffffff ffffffff ffffffff ffffffff     ................
  40f90c:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40f91c:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  40f92c:	ffffffff 00454545 00000000 00000000     ....EEE.........
  40f93c:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  40f94c:	8484ffff 00000084 00000000 00000000     ................
  40f95c:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  40f96c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f97c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f98c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f99c:	ffffffff ffffffff ffffffff ffffffff     ................
  40f9ac:	ffffffff ffffffff 00202020 00000000     ........   .....
  40f9bc:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40f9cc:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  40f9dc:	00000000 23232300 ffffffff ffffffff     .....###........
  40f9ec:	ffffffff 00848484 00000000 00000000     ................
  40f9fc:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40fa0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa1c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa2c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa3c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fa4c:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40fa64:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40fa74:	00454545 00000000 00000000 23000000     EEE............#
  40fa84:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  40fa94:	00000084 00000000 00000000 0a0a0a00     ................
  40faa4:	ffffffff ffffffff ffffffff ffffffff     ................
  40fab4:	ffffffff ffffffff ffffffff ffffffff     ................
  40fac4:	ffffffff ffffffff ffffffff ffffffff     ................
  40fad4:	ffffffff ffffffff ffffffff ffffffff     ................
  40fae4:	ffffffff ffffffff ffffffff ffffffff     ................
  40faf4:	ffffffff 00202020 00000000 00000000     ....   .........
  40fb04:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40fb14:	4545ffff 00000045 00000000 00000000     ..EEE...........
  40fb24:	23232300 ffffffff ffffffff ffffffff     .###............
  40fb34:	00848484 00000000 00000000 0a000000     ................
  40fb44:	ffff0a0a ffffffff ffffffff ffffffff     ................
  40fb54:	ffffffff ffffffff ffffffff ffffffff     ................
  40fb64:	ffffffff ffffffff ffffffff ffffffff     ................
  40fb74:	ffffffff ffffffff ffffffff ffffffff     ................
  40fb84:	ffffffff ffffffff ffffffff ffffffff     ................
  40fb94:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40fba4:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  40fbb4:	ffffffff 00454545 00000000 00000000     ....EEE.........
  40fbc4:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  40fbd4:	8484ffff 00000084 00000000 00000000     ................
  40fbe4:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  40fbf4:	ffffffff ffffffff ffffffff ffffffff     ................
  40fc04:	ffffffff ffffffff ffffffff ffffffff     ................
  40fc14:	ffffffff ffffffff ffffffff ffffffff     ................
  40fc24:	ffffffff ffffffff ffffffff ffffffff     ................
  40fc34:	ffffffff ffffffff 00202020 00000000     ........   .....
  40fc44:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40fc54:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  40fc64:	00000000 23232300 ffffffff ffffffff     .....###........
  40fc74:	ffffffff 00848484 00000000 00000000     ................
  40fc84:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40fc94:	ffffffff ffffffff ffffffff ffffffff     ................
  40fca4:	ffffffff ffffffff ffffffff ffffffff     ................
  40fcb4:	ffffffff ffffffff ffffffff ffffffff     ................
  40fcc4:	ffffffff ffffffff ffffffff ffffffff     ................
  40fcd4:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40fcec:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40fcfc:	00454545 00000000 00000000 23000000     EEE............#
  40fd0c:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  40fd1c:	00000084 00000000 00000000 0a0a0a00     ................
  40fd2c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd3c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd4c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd5c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd6c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fd7c:	ffffffff 00202020 00000000 00000000     ....   .........
  40fd8c:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  40fd9c:	4545ffff 00000045 00000000 00000000     ..EEE...........
  40fdac:	23232300 ffffffff ffffffff ffffffff     .###............
  40fdbc:	00848484 00000000 00000000 0a000000     ................
  40fdcc:	ffff0a0a ffffffff ffffffff ffffffff     ................
  40fddc:	ffffffff ffffffff ffffffff ffffffff     ................
  40fdec:	ffffffff ffffffff ffffffff ffffffff     ................
  40fdfc:	ffffffff ffffffff ffffffff ffffffff     ................
  40fe0c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fe1c:	ffffffff 2020ffff 00000020 00000000     ......   .......
  40fe2c:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  40fe3c:	ffffffff 00454545 00000000 00000000     ....EEE.........
  40fe4c:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  40fe5c:	8484ffff 00000084 00000000 00000000     ................
  40fe6c:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  40fe7c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fe8c:	ffffffff ffffffff ffffffff ffffffff     ................
  40fe9c:	ffffffff ffffffff ffffffff ffffffff     ................
  40feac:	ffffffff ffffffff ffffffff ffffffff     ................
  40febc:	ffffffff ffffffff 00202020 00000000     ........   .....
  40fecc:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  40fedc:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  40feec:	00000000 23232300 ffffffff ffffffff     .....###........
  40fefc:	ffffffff 00848484 00000000 00000000     ................
  40ff0c:	0a000000 ffff0a0a ffffffff ffffffff     ................
  40ff1c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ff2c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ff3c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ff4c:	ffffffff ffffffff ffffffff ffffffff     ................
  40ff5c:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  40ff74:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  40ff84:	00454545 00000000 00000000 23000000     EEE............#
  40ff94:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  40ffa4:	00000084 00000000 00000000 0a0a0a00     ................
  40ffb4:	ffffffff ffffffff ffffffff ffffffff     ................
  40ffc4:	ffffffff ffffffff ffffffff ffffffff     ................
  40ffd4:	ffffffff ffffffff ffffffff ffffffff     ................
  40ffe4:	ffffffff ffffffff ffffffff ffffffff     ................
  40fff4:	ffffffff ffffffff ffffffff ffffffff     ................
  410004:	ffffffff 00202020 00000000 00000000     ....   .........
  410014:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  410024:	4545ffff 00000045 00000000 00000000     ..EEE...........
  410034:	23232300 ffffffff ffffffff ffffffff     .###............
  410044:	00848484 00000000 00000000 0a000000     ................
  410054:	ffff0a0a ffffffff ffffffff ffffffff     ................
  410064:	ffffffff ffffffff ffffffff ffffffff     ................
  410074:	ffffffff ffffffff ffffffff ffffffff     ................
  410084:	ffffffff ffffffff ffffffff ffffffff     ................
  410094:	ffffffff ffffffff ffffffff ffffffff     ................
  4100a4:	ffffffff 2020ffff 00000020 00000000     ......   .......
  4100b4:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  4100c4:	ffffffff 00454545 00000000 00000000     ....EEE.........
  4100d4:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  4100e4:	8484ffff 00000084 00000000 00000000     ................
  4100f4:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  410104:	ffffffff ffffffff ffffffff ffffffff     ................
  410114:	ffffffff ffffffff ffffffff ffffffff     ................
  410124:	ffffffff ffffffff ffffffff ffffffff     ................
  410134:	ffffffff ffffffff ffffffff ffffffff     ................
  410144:	ffffffff ffffffff 00202020 00000000     ........   .....
  410154:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  410164:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  410174:	00000000 23232300 ffffffff ffffffff     .....###........
  410184:	ffffffff 00848484 00000000 00000000     ................
  410194:	0a000000 ffff0a0a ffffffff ffffffff     ................
  4101a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4101b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4101c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4101d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4101e4:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  4101fc:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  41020c:	00454545 00000000 00000000 23000000     EEE............#
  41021c:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  41022c:	00000084 00000000 00000000 0a0a0a00     ................
  41023c:	ffffffff ffffffff ffffffff ffffffff     ................
  41024c:	ffffffff ffffffff ffffffff ffffffff     ................
  41025c:	ffffffff ffffffff ffffffff ffffffff     ................
  41026c:	ffffffff ffffffff ffffffff ffffffff     ................
  41027c:	ffffffff ffffffff ffffffff ffffffff     ................
  41028c:	ffffffff 00202020 00000000 00000000     ....   .........
  41029c:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  4102ac:	4545ffff 00000045 00000000 00000000     ..EEE...........
  4102bc:	23232300 ffffffff ffffffff ffffffff     .###............
  4102cc:	00848484 00000000 00000000 0a000000     ................
  4102dc:	ffff0a0a ffffffff ffffffff ffffffff     ................
  4102ec:	ffffffff ffffffff ffffffff ffffffff     ................
  4102fc:	ffffffff ffffffff ffffffff ffffffff     ................
  41030c:	ffffffff ffffffff ffffffff ffffffff     ................
  41031c:	ffffffff ffffffff ffffffff ffffffff     ................
  41032c:	ffffffff 2020ffff 00000020 00000000     ......   .......
  41033c:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  41034c:	ffffffff 00454545 00000000 00000000     ....EEE.........
  41035c:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  41036c:	8484ffff 00000084 00000000 00000000     ................
  41037c:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  41038c:	ffffffff ffffffff ffffffff ffffffff     ................
  41039c:	ffffffff ffffffff ffffffff ffffffff     ................
  4103ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4103bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4103cc:	ffffffff ffffffff 00202020 00000000     ........   .....
  4103dc:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  4103ec:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  4103fc:	00000000 23232300 ffffffff ffffffff     .....###........
  41040c:	ffffffff 00848484 00000000 00000000     ................
  41041c:	0a000000 ffff0a0a ffffffff ffffffff     ................
  41042c:	ffffffff ffffffff ffffffff ffffffff     ................
  41043c:	ffffffff ffffffff ffffffff ffffffff     ................
  41044c:	ffffffff ffffffff ffffffff ffffffff     ................
  41045c:	ffffffff ffffffff ffffffff ffffffff     ................
  41046c:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  410484:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  410494:	00454545 00000000 00000000 23000000     EEE............#
  4104a4:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  4104b4:	00000084 00000000 00000000 0a0a0a00     ................
  4104c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4104d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4104e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4104f4:	ffffffff ffffffff ffffffff ffffffff     ................
  410504:	ffffffff ffffffff ffffffff ffffffff     ................
  410514:	ffffffff 00202020 00000000 00000000     ....   .........
  410524:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  410534:	4545ffff 00000045 00000000 00000000     ..EEE...........
  410544:	23232300 ffffffff ffffffff ffffffff     .###............
  410554:	00848484 00000000 00000000 0a000000     ................
  410564:	ffff0a0a ffffffff ffffffff ffffffff     ................
  410574:	ffffffff ffffffff ffffffff ffffffff     ................
  410584:	ffffffff ffffffff ffffffff ffffffff     ................
  410594:	ffffffff ffffffff ffffffff ffffffff     ................
  4105a4:	ffffffff ffffffff ffffffff ffffffff     ................
  4105b4:	ffffffff 2020ffff 00000020 00000000     ......   .......
  4105c4:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  4105d4:	ffffffff 00454545 00000000 00000000     ....EEE.........
  4105e4:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  4105f4:	8484ffff 00000084 00000000 00000000     ................
  410604:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  410614:	ffffffff ffffffff ffffffff ffffffff     ................
  410624:	ffffffff ffffffff ffffffff ffffffff     ................
  410634:	ffffffff ffffffff ffffffff ffffffff     ................
  410644:	ffffffff ffffffff ffffffff ffffffff     ................
  410654:	ffffffff ffffffff 00202020 00000000     ........   .....
  410664:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  410674:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  410684:	00000000 23232300 ffffffff ffffffff     .....###........
  410694:	ffffffff 00848484 00000000 00000000     ................
  4106a4:	0a000000 ffff0a0a ffffffff ffffffff     ................
  4106b4:	ffffffff ffffffff ffffffff ffffffff     ................
  4106c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4106d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4106e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4106f4:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  41070c:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  41071c:	00454545 00000000 00000000 23000000     EEE............#
  41072c:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  41073c:	00000084 00000000 00000000 0a0a0a00     ................
  41074c:	ffffffff ffffffff ffffffff ffffffff     ................
  41075c:	ffffffff ffffffff ffffffff ffffffff     ................
  41076c:	ffffffff ffffffff ffffffff ffffffff     ................
  41077c:	ffffffff ffffffff ffffffff ffffffff     ................
  41078c:	ffffffff ffffffff ffffffff ffffffff     ................
  41079c:	ffffffff 00202020 00000000 00000000     ....   .........
  4107ac:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  4107bc:	4545ffff 00000045 00000000 00000000     ..EEE...........
  4107cc:	23232300 ffffffff ffffffff ffffffff     .###............
  4107dc:	00848484 00000000 00000000 0a000000     ................
  4107ec:	ffff0a0a ffffffff ffffffff ffffffff     ................
  4107fc:	ffffffff ffffffff ffffffff ffffffff     ................
  41080c:	ffffffff ffffffff ffffffff ffffffff     ................
  41081c:	ffffffff ffffffff ffffffff ffffffff     ................
  41082c:	ffffffff ffffffff ffffffff ffffffff     ................
  41083c:	ffffffff 2020ffff 00000020 00000000     ......   .......
  41084c:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  41085c:	ffffffff 00454545 00000000 00000000     ....EEE.........
  41086c:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  41087c:	8484ffff 00000084 00000000 00000000     ................
  41088c:	0a0a0a00 ffffffff ffffffff ffffffff     ................
  41089c:	ffffffff ffffffff ffffffff ffffffff     ................
  4108ac:	ffffffff ffffffff ffffffff ffffffff     ................
  4108bc:	ffffffff ffffffff ffffffff ffffffff     ................
  4108cc:	ffffffff ffffffff ffffffff ffffffff     ................
  4108dc:	ffffffff ffffffff 00202020 00000000     ........   .....
  4108ec:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  4108fc:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  41090c:	00000000 23232300 ffffffff ffffffff     .....###........
  41091c:	ffffffff 00848484 00000000 00000000     ................
  41092c:	0a000000 ffff0a0a ffffffff ffffffff     ................
  41093c:	ffffffff ffffffff ffffffff ffffffff     ................
  41094c:	ffffffff ffffffff ffffffff ffffffff     ................
  41095c:	ffffffff ffffffff ffffffff ffffffff     ................
  41096c:	ffffffff ffffffff ffffffff ffffffff     ................
  41097c:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  410994:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  4109a4:	00454545 00000000 00000000 23000000     EEE............#
  4109b4:	ffff2323 ffffffff ffffffff 8484ffff     ##..............
  4109c4:	00000084 00000000 00000000 0a0a0a00     ................
  4109d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4109e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4109f4:	ffffffff ffffffff ffffffff ffffffff     ................
  410a04:	ffffffff ffffffff ffffffff ffffffff     ................
  410a14:	ffffffff ffffffff ffffffff ffffffff     ................
  410a24:	ffffffff 00202020 00000000 00000000     ....   .........
  410a34:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  410a44:	4545ffff 00000045 00000000 00000000     ..EEE...........
  410a54:	23232300 ffffffff ffffffff ffffffff     .###............
  410a64:	00848484 00000000 00000000 09000000     ................
  410a74:	85850909 4d4d4d85 232e2e2e 1b1b2323     .....MMM...###..
  410a84:	1b1b1b1b 34232323 54543434 a0a0a054     ....###444TTT...
  410a94:	ffffffff ffffffff ffffffff ffffffff     ................
  410aa4:	ffffffff ffffffff ffffffff ffffffff     ................
  410ab4:	ffffffff ffffffff ffffffff ffffffff     ................
  410ac4:	ffffffff 2020ffff 00000020 00000000     ......   .......
  410ad4:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  410ae4:	ffffffff 00454545 00000000 00000000     ....EEE.........
  410af4:	23000000 ffff2323 ffffffff ffffffff     ...###..........
  410b04:	8484ffff 00000084 00000000 00000000     ................
	...
  410b34:	0a0a0000 3636360a ffa2a2a2 ffffffff     .....666........
  410b44:	ffffffff ffffffff ffffffff ffffffff     ................
  410b54:	ffffffff ffffffff ffffffff ffffffff     ................
  410b64:	ffffffff ffffffff 00202020 00000000     ........   .....
  410b74:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  410b84:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
  410b94:	00000000 23232300 ffffffff ffffffff     .....###........
  410ba4:	ffffffff 00848484 00000000 00000000     ................
	...
  410bdc:	01010000 21212101 ffa2a2a2 ffffffff     .....!!!........
  410bec:	ffffffff ffffffff ffffffff ffffffff     ................
  410bfc:	ffffffff ffffffff ffffffff ffffffff     ................
  410c0c:	2020ffff 00000020 00000000 00000000     ..   ...........
  410c1c:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  410c2c:	00454545 00000000 00000000 23000000     EEE............#
  410c3c:	ffff2323 ffffffff bbffffff 1c1cbbbb     ##..............
  410c4c:	0000001c 00000000 00000000 00000000     ................
	...
  410c84:	02020000 3b3b3b02 fff3f3f3 ffffffff     .....;;;........
  410c94:	ffffffff ffffffff ffffffff ffffffff     ................
  410ca4:	ffffffff ffffffff ffffffff 00202020     ............   .
	...
  410cbc:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  410ccc:	4545ffff 00000045 00000000 00000000     ..EEE...........
  410cdc:	23232300 ffffffff 7878ffff 06060678     .###......xxx...
	...
  410d2c:	17170000 bdbdbd17 ffffffff ffffffff     ................
  410d3c:	ffffffff ffffffff ffffffff ffffffff     ................
  410d4c:	ffffffff 2020ffff 00000020 00000000     ......   .......
  410d5c:	00000000 4c4c4c00 ffffffff ffffffff     .....LLL........
  410d6c:	ffffffff 00454545 00000000 00000000     ....EEE.........
  410d7c:	23000000 ffff2323 5e5e5eff 00010101     ...###...^^^....
	...
  410da0:	15010101 32321515 42424232 525a5a5a     ......222BBBZZZR
  410db0:	3d3d5252 2a2a2a3d 000b0b0b 00000000     RR===***........
	...
  410dd0:	0b000000 a5a50b0b ffffffa5 ffffffff     ................
  410de0:	ffffffff ffffffff ffffffff ffffffff     ................
  410df0:	ffffffff 00202020 00000000 00000000     ....   .........
  410e00:	4c000000 ffff4c4c ffffffff ffffffff     ...LLL..........
  410e10:	4545ffff 00000045 00000000 00000000     ..EEE...........
  410e20:	23232300 01626262 00000101 00000000     .###bbb.........
	...
  410e3c:	4f0b0b0b c2c24f4f ffffffc2 ffffffff     ...OOO..........
  410e4c:	ffffffff ffffffff ffffffff ffffffff     ................
  410e5c:	949494ff 03343434 00000303 00000000     ....444.........
	...
  410e78:	b70a0a0a ffffb7b7 ffffffff ffffffff     ................
  410e88:	ffffffff ffffffff ffffffff 2020ffff     ..............  
  410e98:	00000020 00000000 00000000 4c4c4c00      ............LLL
  410ea8:	ffffffff ffffffff ffffffff 00454545     ............EEE.
	...
  410ec0:	0f000000 03030f0f 00000003 00000000     ................
	...
  410ed8:	49040404 eaea4949 ffffffea ffffffff     ...III..........
  410ee8:	ffffffff ffffffff ffffffff ffffffff     ................
  410ef8:	ffffffff ffffffff ffffffff b7b7b7ff     ................
  410f08:	00272727 00000000 00000000 00000000     '''.............
  410f18:	00000000 10101000 ffe4e4e4 ffffffff     ................
  410f28:	ffffffff ffffffff ffffffff ffffffff     ................
  410f38:	00202020 00000000 00000000 4c000000        ............L
  410f48:	ffff4c4c ffffffff ffffffff 4545ffff     LL............EE
  410f58:	00000045 00000000 00000000 00000000     E...............
	...
  410f74:	0c000000 99990c0c ffffff99 ffffffff     ................
  410f84:	ffffffff ffffffff ffffffff ffffffff     ................
  410f94:	ffffffff ffffffff ffffffff ffffffff     ................
  410fa4:	ffffffff ffffffff 555555ff 00020202     .........UUU....
	...
  410fc0:	2c2c0000 ffffff2c ffffffff ffffffff     ..,,,...........
  410fd0:	ffffffff ffffffff 2020ffff 00000020     ..........   ...
	...
  410fe8:	4c4c4c00 ffffffff ffffffff ffffffff     .LLL............
  410ff8:	00454545 00000000 00000000 00000000     EEE.............
	...
  411014:	11110000 cbcbcb11 ffffffff ffffffff     ................
  411024:	ffffffff ffffffff ffffffff ffffffff     ................
  411034:	ffffffff ffffffff ffffffff ffffffff     ................
  411044:	ffffffff ffffffff ffffffff 8080ffff     ................
  411054:	03030380 00000000 00000000 00000000     ................
  411064:	7c000000 ffff7c7c ffffffff ffffffff     ...|||..........
  411074:	ffffffff ffffffff 001d1d1d 00000000     ................
  411084:	00000000 4c000000 ffff4c4c ffffffff     .......LLL......
  411094:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
	...
  4110b4:	09090900 ffb5b5b5 ffffffff ffffffff     ................
  4110c4:	ffffffff ffffffff ffffffff ffffffff     ................
  4110d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4110e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4110f4:	61ffffff 00006161 00000000 00000000     ...aaa..........
  411104:	00000000 11111100 fffcfcfc ffffffff     ................
  411114:	ffffffff 77ffffff 01017777 00000001     .......www......
	...
  41112c:	4d4d4d00 ffffffff ffffffff ffffffff     .MMM............
  41113c:	00454545 00000000 00000000 00000000     EEE.............
	...
  411154:	85010101 ffff8585 ffffffff ffffffff     ................
  411164:	ffffffff ffffffff ffffffff ffffffff     ................
  411174:	ffffffff ffffffff ffffffff ffffffff     ................
  411184:	ffffffff ffffffff ffffffff ffffffff     ................
  411194:	ffffffff ffffffff 00343434 00000000     ........444.....
	...
  4111ac:	6b6b0000 ffffff6b ffffffff bfbfffff     ..kkk...........
  4111bc:	070707bf 00000000 00000000 00000000     ................
  4111cc:	78000000 ffff7878 ffffffff ffffffff     ...xxx..........
  4111dc:	4545ffff 00000045 00000000 00000000     ..EEE...........
	...
  4111f4:	27270000 ffffff27 ffffffff ffffffff     ..'''...........
  411204:	ffffffff ffffffff ffffffff bdbdbdff     ................
  411214:	6c737373 9e9e6c6c ffffff9e ffffffff     ssslll..........
  411224:	ffffffff ffffffff ffffffff ffffffff     ................
  411234:	ffffffff ffffffff dadaffff 070707da     ................
	...
  411250:	ff1c1c1c ffffffff ffffffff 00212121     ............!!!.
	...
  41126c:	1e1e0000 ffffff1e ffffffff ffffffff     ................
  41127c:	ffffffff 00454545 00000000 00000000     ....EEE.........
	...
  411294:	02020200 ffb1b1b1 ffffffff ffffffff     ................
  4112a4:	ffffffff ffffffff b1b1b1ff 01202020     ............   .
  4112b4:	00000101 00000000 11000000 89891111     ................
  4112c4:	ffffff89 ffffffff ffffffff ffffffff     ................
  4112d4:	ffffffff ffffffff ffffffff 4cffffff     ...............L
  4112e4:	00004c4c 00000000 00000000 01010000     LL..............
  4112f4:	c2c2c201 9bffffff 01019b9b 00000001     ................
	...
  41130c:	0f0f0f00 ffd5d5d5 ffffffff ffffffff     ................
  41131c:	ffffffff 4545ffff 00000045 00000000     ......EEE.......
	...
  411334:	1e000000 ffff1e1e ffffffff ffffffff     ................
  411344:	ffffffff ffffffff 09a8a8a8 00000909     ................
  411354:	03030300 1e1c1c1c 06061e1e 00000006     ................
  411364:	8d020202 ffff8d8d ffffffff ffffffff     ................
  411374:	ffffffff ffffffff ffffffff ffffffff     ................
  411384:	dcdcdcff 00030303 00000000 00000000     ................
  411394:	5c000000 ffff5c5c 232323ff 00000000     ...\\\...###....
	...
  4113ac:	ab030303 ffffabab ffffffff ffffffff     ................
  4113bc:	ffffffff ffffffff 00454545 00000000     ........EEE.....
	...
  4113d8:	55555500 ffffffff ffffffff ffffffff     .UUU............
  4113e8:	ffffffff 1515ffff 00000015 a50c0c0c     ................
  4113f8:	ffffa5a5 ffffffff 1ddcdcdc 09091d1d     ................
  411408:	77777709 fcffffff 4040fcfc 0f0f0f40     .www......@@@...
  411418:	7b151515 ffff7b7b ffffffff ffffffff     ...{{{..........
  411428:	1d1dffff 0000001d 00000000 00000000     ................
  411438:	2c2c2c00 01d5d5d5 00000101 00000000     .,,,............
  411448:	00000000 36360000 ffffff36 ffffffff     ......666.......
  411458:	ffffffff ffffffff ffffffff 4545ffff     ..............EE
  411468:	00000045 00000000 00000000 00000000     E...............
  411478:	bb000000 ffffbbbb ffffffff ffffffff     ................
  411488:	ffffffff 828282ff 00000000 81810000     ................
  411498:	ffffff81 ffffffff ffffffff cdcdcdff     ................
  4114a8:	ffc9c9c9 ffffffff 656565ff 6b030303     .........eee...k
  4114b8:	38386b6b 05050538 ffd7d7d7 ffffffff     kk888...........
  4114c8:	ffffffff 004c4c4c 00000000 00000000     ....LLL.........
  4114d8:	17000000 65651717 00000065 00000000     ......eee.......
  4114e8:	00000000 03030300 ffd0d0d0 ffffffff     ................
  4114f8:	ffffffff ffffffff ffffffff ffffffff     ................
  411508:	00363636 00000000 00000000 00000000     666.............
  411518:	02020000 fcfcfc02 ffffffff ffffffff     ................
  411528:	ffffffff 3fffffff 00003f3f 0c0c0c00     .......???......
  411538:	ffffffff ffffffff ffffffff ffffffff     ................
  411548:	ffffffff ffffffff 38ffffff 18183838     ...........888..
  411558:	ffffff18 00c4c4c4 8d8d0000 ffffff8d     ................
  411568:	ffffffff 6b6bffff 0000006b 00000000     ......kkk.......
  411578:	00000000 09090900 002c2c2c 00000000     ........,,,.....
  411588:	00000000 1e000000 ffff1e1e ffffffff     ................
  411598:	ffffffff ffffffff ffffffff 3dffffff     ...............=
  4115a8:	00003d3d 00000000 00000000 00000000     ==..............
  4115b8:	00000000 ff0b0b0b ffffffff ffffffff     ................
  4115c8:	ffffffff ffffffff 323232ff 18000000     .........222....
  4115d8:	ffff1818 ffffffff ffffffff ffffffff     ................
  4115e8:	ffffffff ffffffff ffffffff 656565ff     .............eee
  4115f8:	6c040404 3a3a6c6c 0505053a ffd5d5d5     ...lll:::.......
  411608:	ffffffff ffffffff 008f8f8f 00000000     ................
  411618:	00000000 03000000 15150303 00000015     ................
	...
  411630:	4f4f4f00 ffffffff ffffffff ffffffff     .OOO............
  411640:	ffffffff 7474ffff 00000074 00000000     ......ttt.......
	...
  41165c:	0f0f0000 ffffff0f ffffffff ffffffff     ................
  41166c:	ffffffff 45ffffff 00004545 0a0a0a00     .......EEE......
  41167c:	ffffffff ffffffff ffffffff ffffffff     ................
  41168c:	ffffffff ffffffff fcffffff 4141fcfc     ..............AA
  41169c:	0f0f0f41 7a151515 ffff7a7a ffffffff     A......zzz......
  4116ac:	ffffffff a4a4ffff 000000a4 00000000     ................
  4116bc:	00000000 01010100 000c0c0c 00000000     ................
  4116cc:	00000000 76000000 ffff7676 ffffffff     .......vvv......
  4116dc:	ffffffff ffffffff ffffffff 001b1b1b     ................
	...
  411700:	ff060606 ffffffff ffffffff ffffffff     ................
  411710:	ffffffff 989898ff 00000000 77770000     ..............ww
  411720:	ffffff77 ffffffff ffffffff dadadaff     w...............
  411730:	ffb7b7b7 ffffffff ffffffff ffffffff     ................
  411740:	ffffffff ffffffff ffffffff ffffffff     ................
  411750:	ffffffff 007e7e7e 00000000 00000000     ....~~~.........
  411760:	05000000 04040505 00000004 00000000     ................
  411770:	00000000 9b9b9b00 ffffffff ffffffff     ................
  411780:	ffffffff ffffffff 0707ffff 00000007     ................
	...
  4117a4:	eaeaea00 ffffffff ffffffff ffffffff     ................
  4117b4:	ffffffff 1e1effff 0000001e 990b0b0b     ................
  4117c4:	ffff9999 ffffffff 23e7e7e7 03032323     ...........###..
  4117d4:	4c4c4c03 ffffffff ffffffff ffffffff     .LLL............
  4117e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4117f4:	5f5fffff 0000005f 00000000 00000000     ..___...........
  411804:	0d0d0d00 00020202 00000000 00000000     ................
  411814:	9d000000 ffff9d9d ffffffff ffffffff     ................
  411824:	ffffffff ffffffff 00050505 00000000     ................
	...
  411844:	89000000 ffff8989 ffffffff ffffffff     ................
  411854:	ffffffff ffffffff 0cc2c2c2 00000c0c     ................
  411864:	03030300 231e1e1e 07072323 00000007     .......###......
  411874:	74010101 ffff7474 ffffffff ffffffff     ...ttt..........
  411884:	ffffffff ffffffff ffffffff ffffffff     ................
  411894:	ffffffff 00363636 00000000 00000000     ....666.........
  4118a4:	1e000000 06061e1e 00000006 00000000     ................
  4118b4:	00000000 77777700 ffffffff ffffffff     .....www........
  4118c4:	ffffffff ffffffff 1a1affff 0000001a     ................
	...
  4118e8:	38383800 ffffffff ffffffff ffffffff     .888............
  4118f8:	ffffffff ffffffff c2c2c2ff 01212121     ............!!!.
  411908:	00000101 00000000 11000000 81811111     ................
  411918:	ffffff81 ffffffff ffffffff ffffffff     ................
  411928:	ffffffff ffffffff ffffffff ffffffff     ................
  411938:	0d0dffff 0000000d 00000000 00000000     ................
  411948:	3d3d3d00 00121212 00000000 00000000     .===............
  411958:	52000000 ffff5252 ffffffff ffffffff     ...RRR..........
  411968:	ffffffff ffffffff 006b6b6b 00000000     ........kkk.....
	...
  411988:	0d000000 fcfc0d0d fffffffc ffffffff     ................
  411998:	ffffffff ffffffff ffffffff ffffffff     ................
  4119a8:	b3b3b3ff 686b6b6b a0a06868 ffffffa0     ....kkkhhh......
  4119b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4119c8:	ffffffff ffffffff ffffffff ffffffff     ................
  4119d8:	999999ff 00000000 00000000 00000000     ................
  4119e8:	80000000 27278080 00000027 00000000     ......'''.......
  4119f8:	00000000 1e1e1e00 ffffffff ffffffff     ................
  411a08:	ffffffff ffffffff ffffffff 363636ff     .............666
	...
  411a30:	ff616161 ffffffff ffffffff ffffffff     aaa.............
  411a40:	ffffffff ffffffff ffffffff ffffffff     ................
  411a50:	ffffffff ffffffff ffffffff ffffffff     ................
  411a60:	ffffffff ffffffff ffffffff ffffffff     ................
  411a70:	ffffffff ffffffff 23ffffff 00002323     ...........###..
	...
  411a88:	09090000 f3f3f309 00545454 00000000     ........TTT.....
  411a98:	00000000 03000000 d5d50303 ffffffd5     ................
  411aa8:	ffffffff ffffffff ffffffff ffffffff     ................
  411ab8:	6464ffff 14141464 00010101 00000000     ..ddd...........
	...
  411ad0:	0c0c0000 ededed0c ffffffff ffffffff     ................
  411ae0:	ffffffff ffffffff ffffffff ffffffff     ................
  411af0:	ffffffff ffffffff ffffffff ffffffff     ................
  411b00:	ffffffff ffffffff ffffffff ffffffff     ................
  411b10:	ffffffff ffffffff 8888ffff 00000088     ................
	...
  411b2c:	ff343434 bfbfffff 010101bf 00000000     444.............
	...
  411b44:	ff3a3a3a ffffffff ffffffff ffffffff     :::.............
  411b54:	ffffffff ffffffff ffffffff f0f0ffff     ................
  411b64:	494949f0 00000000 00000000 00000000     .III............
  411b74:	32000000 ffff3232 ffffffff ffffffff     ...222..........
  411b84:	ffffffff ffffffff ffffffff ffffffff     ................
  411b94:	ffffffff ffffffff ffffffff ffffffff     ................
  411ba4:	ffffffff ffffffff ffffffff ffffffff     ................
  411bb4:	ffffffff dadadaff 000f0f0f 00000000     ................
  411bc4:	00000000 02000000 b7b70202 ffffffb7     ................
  411bd4:	1effffff 00001e1e 00000000 00000000     ................
  411be4:	03030000 b1b1b103 ffffffff ffffffff     ................
  411bf4:	ffffffff ffffffff ffffffff ffffffff     ................
  411c04:	edffffff 0b0beded 0000000b 00000000     ................
	...
  411c1c:	ff545454 ffffffff ffffffff ffffffff     TTT.............
  411c2c:	ffffffff ffffffff ffffffff ffffffff     ................
  411c3c:	ffffffff ffffffff ffffffff ffffffff     ................
  411c4c:	ffffffff ffffffff ffffffff 1ef9f9f9     ................
  411c5c:	00001e1e 00000000 00000000 00000000     ................
  411c6c:	32323200 ffffffff ffffffff 7e7e7eff     .222.........~~~
	...
  411c88:	11000000 dfdf1111 ffffffdf ffffffff     ................
  411c98:	ffffffff ffffffff ffffffff ffffffff     ................
  411ca8:	ffffffff 00707070 00000000 00000000     ....ppp.........
  411cb8:	00000000 02020000 54545402 ffffffff     .........TTT....
  411cc8:	ffffffff ffffffff ffffffff ffffffff     ................
  411cd8:	ffffffff ffffffff ffffffff ffffffff     ................
  411ce8:	ffffffff ffffffff ffffffff e4ffffff     ................
  411cf8:	2525e4e4 00000025 00000000 00000000     ..%%%...........
  411d08:	00000000 d5090909 ffffd5d5 ffffffff     ................
  411d18:	ffffffff 1d1dffff 0000001d 00000000     ................
	...
  411d30:	e21e1e1e ffffe2e2 ffffffff ffffffff     ................
  411d40:	ffffffff ffffffff ffffffff ffffffff     ................
  411d50:	2c2c2cff 00000000 00000000 00000000     .,,,............
  411d60:	00000000 30300000 ededed30 ffffffff     ......000.......
  411d70:	ffffffff ffffffff ffffffff ffffffff     ................
  411d80:	ffffffff ffffffff ffffffff ffffffff     ................
  411d90:	ffffffff b3b3ffff 131313b3 00000000     ................
	...
  411da8:	01000000 74740101 ffffff74 ffffffff     ......ttt.......
  411db8:	ffffffff ffffffff 04adadad 00000404     ................
	...
  411dd4:	11111100 ffafafaf ffffffff ffffffff     ................
  411de4:	ffffffff ffffffff ffffffff eaffffff     ................
  411df4:	1515eaea 00000015 00000000 00000000     ................
  411e04:	00000000 0b000000 5d5d0b0b f9f9f95d     ..........]]]...
  411e14:	ffffffff ffffffff ffffffff ffffffff     ................
  411e24:	ffffffff ffffffff ffffffff d2d2ffff     ................
  411e34:	383838d2 00030303 00000000 00000000     .888............
	...
  411e4c:	40404000 ffffffff ffffffff ffffffff     .@@@............
  411e5c:	ffffffff ffffffff 616161ff 00000000     .........aaa....
	...
  411e78:	04040000 3a3a3a04 ffd2d2d2 ffffffff     .....:::........
  411e88:	ffffffff ffffffff ffffffff ffffffff     ................
  411e98:	10cdcdcd 00001010 00000000 00000000     ................
	...
  411eb0:	0d000000 37370d0d 85858537 ffededed     ......777.......
  411ec0:	ffffffff ffffffff d5ffffff 6565d5d5     ..............ee
  411ed0:	27272765 00050505 00000000 00000000     e'''............
	...
  411eec:	ff303030 ffffffff ffffffff ffffffff     000.............
  411efc:	ffffffff ffffffff ffffffff 4242ffff     ..............BB
  411f0c:	00000042 00000000 00000000 00000000     B...............
  411f1c:	00000000 04040000 20202004 82525252     .........   RRR.
  411f2c:	a2a28282 b7b7b7a2 5c858585 27275c5c     ...........\\\''
  411f3c:	06060627 00000000 00000000 00000000     '...............
	...
  411f60:	07070700 0f101010 04040f0f 00000004     ................
	...
  411f88:	3b000000 fcfc3b3b fffffffc ffffffff     ...;;;..........
  411f98:	ffffffff ffffffff ffffffff ffffffff     ................
  411fa8:	ffffffff 42ffffff 00004242 00000000     .......BBB......
	...
  412024:	05000000 64640505 ffffff64 ffffffff     ......ddd.......
  412034:	ffffffff ffffffff ffffffff ffffffff     ................
  412044:	ffffffff ffffffff ffffffff ffffffff     ................
  412054:	05646464 00000505 00000000 00000000     ddd.............
	...
  4120c4:	22220000 b5b5b522 ffffffff ffffffff     .."""...........
  4120d4:	ffffffff ffffffff ffffffff ffffffff     ................
  4120e4:	ffffffff ffffffff ffffffff ffffffff     ................
  4120f4:	ffffffff b3b3b3ff 00212121 00000000     ........!!!.....
	...
  41212c:	18000000 49491818 11111149 00000000     ......III.......
	...
  41215c:	01000000 1e1e0101 8686861e ffffffff     ................
  41216c:	ffffffff ffffffff ffffffff ffffffff     ................
  41217c:	ffffffff ffffffff ffffffff ffffffff     ................
  41218c:	ffffffff ffffffff ffffffff ffffffff     ................
  41219c:	ffffffff 858585ff 02212121 00000202     ........!!!.....
	...
  4121c8:	1b010101 6d6d1b1b ffffff6d ffffffff     ......mmm.......
  4121d8:	8989ffff 39393989 03131313 00000303     .....999........
	...
  4121f8:	1e050505 4a4a1e1e bbbbbb4a ffffffff     ......JJJ.......
  412208:	ffffffff ffffffff ffffffff ffffffff     ................
  412218:	ffffffff ffffffff ffffffff ffffffff     ................
  412228:	ffffffff ffffffff ffffffff ffffffff     ................
  412238:	ffffffff ffffffff ffffffff ffffffff     ................
  412248:	cdcdcdff 2b5a5a5a 14142b2b 07070714     ....ZZZ+++......
  412258:	02020202 09090202 11111109 52282828     ............(((R
  412268:	b7b75252 ffffffb7 ffffffff ffffffff     RR..............
  412278:	ffffffff ffffffff ffffffff f6f6f6ff     ................
  412288:	85a4a4a4 73738585 76767673 bf888888     ......sssvvv....
  412298:	ffffbfbf ffffffff ffffffff ffffffff     ................
  4122a8:	ffffffff ffffffff ffffffff ffffffff     ................
  4122b8:	ffffffff ffffffff ffffffff ffffffff     ................
  4122c8:	0000ffff 0074786d 6c696146 74206465     ....mxt.Failed t
  4122d8:	7263206f 65746165 73657420 656c2074     o create test le
  4122e8:	61742064 0a0d6b73 00000000 0064636c     d task......lcd.
  4122f8:	64253a78 253a7920 00000a64 63617473     x:%d y:%d...stac
  412308:	766f206b 6c667265 2520776f 73252078     k overflow %x %s
  412318:	00000a0d                                ....

0041231c <_global_impure_ptr>:
  41231c:	20400020 33323130 37363534 42413938      .@ 0123456789AB
  41232c:	46454443 00000000 33323130 37363534     CDEF....01234567
  41233c:	62613938 66656463 00000000 6c756e28     89abcdef....(nul
  41234c:	0000296c                                l)..

00412350 <blanks.7217>:
  412350:	20202020 20202020 20202020 20202020                     

00412360 <zeroes.7218>:
  412360:	30303030 30303030 30303030 30303030     0000000000000000
  412370:	00000043 49534f50 00000058 0000002e     C...POSIX.......

00412380 <_ctype_>:
  412380:	20202000 20202020 28282020 20282828     .         ((((( 
  412390:	20202020 20202020 20202020 20202020                     
  4123a0:	10108820 10101010 10101010 10101010      ...............
  4123b0:	04040410 04040404 10040404 10101010     ................
  4123c0:	41411010 41414141 01010101 01010101     ..AAAAAA........
  4123d0:	01010101 01010101 01010101 10101010     ................
  4123e0:	42421010 42424242 02020202 02020202     ..BBBBBB........
  4123f0:	02020202 02020202 02020202 10101010     ................
  412400:	00000020 00000000 00000000 00000000      ...............
	...

00412484 <_init>:
  412484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  412486:	bf00      	nop
  412488:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41248a:	bc08      	pop	{r3}
  41248c:	469e      	mov	lr, r3
  41248e:	4770      	bx	lr

00412490 <__init_array_start>:
  412490:	004059b9 	.word	0x004059b9

00412494 <__frame_dummy_init_array_entry>:
  412494:	0040018d                                ..@.

00412498 <_fini>:
  412498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  41249a:	bf00      	nop
  41249c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  41249e:	bc08      	pop	{r3}
  4124a0:	469e      	mov	lr, r3
  4124a2:	4770      	bx	lr

004124a4 <__fini_array_start>:
  4124a4:	00400169 	.word	0x00400169

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <uxCriticalNesting>:
20400010:	aaaa aaaa                                   ....

20400014 <last_state.11697>:
20400014:	00ff 0000                                   ....

20400018 <_impure_ptr>:
20400018:	0020 2040 0000 0000                          .@ ....

20400020 <impure_data>:
20400020:	0000 0000 030c 2040 0374 2040 03dc 2040     ......@ t.@ ..@ 
	...
204000c8:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
204000d8:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400448 <__malloc_av_>:
	...
20400450:	0448 2040 0448 2040 0450 2040 0450 2040     H.@ H.@ P.@ P.@ 
20400460:	0458 2040 0458 2040 0460 2040 0460 2040     X.@ X.@ `.@ `.@ 
20400470:	0468 2040 0468 2040 0470 2040 0470 2040     h.@ h.@ p.@ p.@ 
20400480:	0478 2040 0478 2040 0480 2040 0480 2040     x.@ x.@ ..@ ..@ 
20400490:	0488 2040 0488 2040 0490 2040 0490 2040     ..@ ..@ ..@ ..@ 
204004a0:	0498 2040 0498 2040 04a0 2040 04a0 2040     ..@ ..@ ..@ ..@ 
204004b0:	04a8 2040 04a8 2040 04b0 2040 04b0 2040     ..@ ..@ ..@ ..@ 
204004c0:	04b8 2040 04b8 2040 04c0 2040 04c0 2040     ..@ ..@ ..@ ..@ 
204004d0:	04c8 2040 04c8 2040 04d0 2040 04d0 2040     ..@ ..@ ..@ ..@ 
204004e0:	04d8 2040 04d8 2040 04e0 2040 04e0 2040     ..@ ..@ ..@ ..@ 
204004f0:	04e8 2040 04e8 2040 04f0 2040 04f0 2040     ..@ ..@ ..@ ..@ 
20400500:	04f8 2040 04f8 2040 0500 2040 0500 2040     ..@ ..@ ..@ ..@ 
20400510:	0508 2040 0508 2040 0510 2040 0510 2040     ..@ ..@ ..@ ..@ 
20400520:	0518 2040 0518 2040 0520 2040 0520 2040     ..@ ..@  .@  .@ 
20400530:	0528 2040 0528 2040 0530 2040 0530 2040     (.@ (.@ 0.@ 0.@ 
20400540:	0538 2040 0538 2040 0540 2040 0540 2040     8.@ 8.@ @.@ @.@ 
20400550:	0548 2040 0548 2040 0550 2040 0550 2040     H.@ H.@ P.@ P.@ 
20400560:	0558 2040 0558 2040 0560 2040 0560 2040     X.@ X.@ `.@ `.@ 
20400570:	0568 2040 0568 2040 0570 2040 0570 2040     h.@ h.@ p.@ p.@ 
20400580:	0578 2040 0578 2040 0580 2040 0580 2040     x.@ x.@ ..@ ..@ 
20400590:	0588 2040 0588 2040 0590 2040 0590 2040     ..@ ..@ ..@ ..@ 
204005a0:	0598 2040 0598 2040 05a0 2040 05a0 2040     ..@ ..@ ..@ ..@ 
204005b0:	05a8 2040 05a8 2040 05b0 2040 05b0 2040     ..@ ..@ ..@ ..@ 
204005c0:	05b8 2040 05b8 2040 05c0 2040 05c0 2040     ..@ ..@ ..@ ..@ 
204005d0:	05c8 2040 05c8 2040 05d0 2040 05d0 2040     ..@ ..@ ..@ ..@ 
204005e0:	05d8 2040 05d8 2040 05e0 2040 05e0 2040     ..@ ..@ ..@ ..@ 
204005f0:	05e8 2040 05e8 2040 05f0 2040 05f0 2040     ..@ ..@ ..@ ..@ 
20400600:	05f8 2040 05f8 2040 0600 2040 0600 2040     ..@ ..@ ..@ ..@ 
20400610:	0608 2040 0608 2040 0610 2040 0610 2040     ..@ ..@ ..@ ..@ 
20400620:	0618 2040 0618 2040 0620 2040 0620 2040     ..@ ..@  .@  .@ 
20400630:	0628 2040 0628 2040 0630 2040 0630 2040     (.@ (.@ 0.@ 0.@ 
20400640:	0638 2040 0638 2040 0640 2040 0640 2040     8.@ 8.@ @.@ @.@ 
20400650:	0648 2040 0648 2040 0650 2040 0650 2040     H.@ H.@ P.@ P.@ 
20400660:	0658 2040 0658 2040 0660 2040 0660 2040     X.@ X.@ `.@ `.@ 
20400670:	0668 2040 0668 2040 0670 2040 0670 2040     h.@ h.@ p.@ p.@ 
20400680:	0678 2040 0678 2040 0680 2040 0680 2040     x.@ x.@ ..@ ..@ 
20400690:	0688 2040 0688 2040 0690 2040 0690 2040     ..@ ..@ ..@ ..@ 
204006a0:	0698 2040 0698 2040 06a0 2040 06a0 2040     ..@ ..@ ..@ ..@ 
204006b0:	06a8 2040 06a8 2040 06b0 2040 06b0 2040     ..@ ..@ ..@ ..@ 
204006c0:	06b8 2040 06b8 2040 06c0 2040 06c0 2040     ..@ ..@ ..@ ..@ 
204006d0:	06c8 2040 06c8 2040 06d0 2040 06d0 2040     ..@ ..@ ..@ ..@ 
204006e0:	06d8 2040 06d8 2040 06e0 2040 06e0 2040     ..@ ..@ ..@ ..@ 
204006f0:	06e8 2040 06e8 2040 06f0 2040 06f0 2040     ..@ ..@ ..@ ..@ 
20400700:	06f8 2040 06f8 2040 0700 2040 0700 2040     ..@ ..@ ..@ ..@ 
20400710:	0708 2040 0708 2040 0710 2040 0710 2040     ..@ ..@ ..@ ..@ 
20400720:	0718 2040 0718 2040 0720 2040 0720 2040     ..@ ..@  .@  .@ 
20400730:	0728 2040 0728 2040 0730 2040 0730 2040     (.@ (.@ 0.@ 0.@ 
20400740:	0738 2040 0738 2040 0740 2040 0740 2040     8.@ 8.@ @.@ @.@ 
20400750:	0748 2040 0748 2040 0750 2040 0750 2040     H.@ H.@ P.@ P.@ 
20400760:	0758 2040 0758 2040 0760 2040 0760 2040     X.@ X.@ `.@ `.@ 
20400770:	0768 2040 0768 2040 0770 2040 0770 2040     h.@ h.@ p.@ p.@ 
20400780:	0778 2040 0778 2040 0780 2040 0780 2040     x.@ x.@ ..@ ..@ 
20400790:	0788 2040 0788 2040 0790 2040 0790 2040     ..@ ..@ ..@ ..@ 
204007a0:	0798 2040 0798 2040 07a0 2040 07a0 2040     ..@ ..@ ..@ ..@ 
204007b0:	07a8 2040 07a8 2040 07b0 2040 07b0 2040     ..@ ..@ ..@ ..@ 
204007c0:	07b8 2040 07b8 2040 07c0 2040 07c0 2040     ..@ ..@ ..@ ..@ 
204007d0:	07c8 2040 07c8 2040 07d0 2040 07d0 2040     ..@ ..@ ..@ ..@ 
204007e0:	07d8 2040 07d8 2040 07e0 2040 07e0 2040     ..@ ..@ ..@ ..@ 
204007f0:	07e8 2040 07e8 2040 07f0 2040 07f0 2040     ..@ ..@ ..@ ..@ 
20400800:	07f8 2040 07f8 2040 0800 2040 0800 2040     ..@ ..@ ..@ ..@ 
20400810:	0808 2040 0808 2040 0810 2040 0810 2040     ..@ ..@ ..@ ..@ 
20400820:	0818 2040 0818 2040 0820 2040 0820 2040     ..@ ..@  .@  .@ 
20400830:	0828 2040 0828 2040 0830 2040 0830 2040     (.@ (.@ 0.@ 0.@ 
20400840:	0838 2040 0838 2040 0840 2040 0840 2040     8.@ 8.@ @.@ @.@ 

20400850 <__malloc_sbrk_base>:
20400850:	ffff ffff                                   ....

20400854 <__malloc_trim_threshold>:
20400854:	0000 0002                                   ....

20400858 <__atexit_recursive_mutex>:
20400858:	c7f8 2040                                   ..@ 

2040085c <__global_locale>:
2040085c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040087c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040089c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008bc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008dc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
204008fc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040091c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
	...
2040093c:	6ab1 0040 6441 0040 0000 0000 2380 0041     .j@.Ad@......#A.
2040094c:	237c 0041 22f0 0041 22f0 0041 22f0 0041     |#A.."A.."A.."A.
2040095c:	22f0 0041 22f0 0041 22f0 0041 22f0 0041     ."A.."A.."A.."A.
2040096c:	22f0 0041 22f0 0041 ffff ffff ffff ffff     ."A.."A.........
2040097c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
	...
204009a4:	0000 5341 4943 0049 0000 0000 0000 0000     ..ASCII.........
	...
